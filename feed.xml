<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-08T16:42:37+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Data Visualization, Data Science and AI</title><subtitle>Data Visualization and AI apps for the web using Streamlit, Plotly, Python and Flask. See the articles/tutorials, below - many have the example code on Github.</subtitle><entry><title type="html">Newer Articles are on Substack</title><link href="http://localhost:4000/2025/05/15/link-to-substack.html" rel="alternate" type="text/html" title="Newer Articles are on Substack" /><published>2025-05-15T00:00:00+02:00</published><updated>2025-05-15T00:00:00+02:00</updated><id>http://localhost:4000/2025/05/15/link-to-substack</id><content type="html" xml:base="http://localhost:4000/2025/05/15/link-to-substack.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[For the time being, new articles will be published on my Substack - you can subscribe for free, to be emailed articles or just follow me if you a substack subscriber.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/front.png?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/front.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Structured Outputs for Consistent LLM Responses</title><link href="http://localhost:4000/2025/04/06/structured-outputs.html" rel="alternate" type="text/html" title="Structured Outputs for Consistent LLM Responses" /><published>2025-04-06T00:00:00+02:00</published><updated>2025-04-06T00:00:00+02:00</updated><id>http://localhost:4000/2025/04/06/structured-outputs</id><content type="html" xml:base="http://localhost:4000/2025/04/06/structured-outputs.html"><![CDATA[<p><img src="https://github.com/DataVizandAI/public_code/blob/main/structured-outputs/images/structure.png?raw=true" alt="" /></p>

<p>Neat structures — Photo by <a href="https://unsplash.com/@johnjac?utm_source=medium&amp;utm_medium=referral">John Jackson</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a></p>

<p>Ask an LLM a well-put question and the likelihood is that you will get a sensible answer. Ask the same question again, though, and you might get an equally sensible but slightly different answer.</p>

<p>For example, I was trying to get an API to write executable code, and it turned out to be a challenge because no matter how many times and in how many places I told it not to, once in a while, it would put Markdown-style fencing around the code, making it syntactically wrong. (OK, it’s not too much of a problem filtering them out, but still…)</p>

<p>The responses from an LLM vary because there is always some randomness in processing the result. When using an API, you can reduce this with the ‘temperature’ setting, but, nevertheless, there will always be some variation.</p>

<p>If you are a human talking to ChatGPT, Gemini, Claude, etc., then this won’t matter. If the wording of the response is a bit different or the layout has changed, you still understand.</p>

<p>But if you are a computer program tuned to process one type of response, then even a slight variation may cause an error.</p>

<p>The solution is to use structured outputs to guarantee a consistent result.</p>

<p>We are going to look at how to create structured outputs using <a href="https://ai.pydantic.dev/">PydanticAI</a> and apply them to a couple of use cases. First, we’ll see how structured outputs work, and then we’ll process unstructured data into a structured format that can be used programmatically. We’ll also see how we can generate runnable code reliably.</p>

<p>Why PydanticAI?</p>

<p>First, it’s open source and easy to use. And second, it is model-neutral: you can use it with several different LLMs (unlike OpenAI’s structured outputs, for example, that only work with their API).</p>

<h4 id="why-use-structured-outputs-from-an-llm">Why Use Structured Outputs from an LLM</h4>

<p>There are several benefits in using structured outputs over conventional responses, for example:</p>

<ul>
  <li>
    <p>Reliability is improved— enforcing a predictable format will ensure the LLM response is consistent, and no complex parsing of the LLM response is required</p>
  </li>
  <li>
    <p>Integration is easier — elements of a structured response can be used directly in an application or more easily processed into a required format</p>
  </li>
  <li>
    <p>Development is faster — less code is required, and testing is less complex</p>
  </li>
</ul>

<p>Altogether, if you aim to use LLM responses in an application, structured outputs make life more straightforward.</p>

<h4 id="what-does-a-structured-output-look-like">What does a structured output look like</h4>

<p>Typically, we are talking about JSON-like responses with specified fields and types. Such a structure can be easily used directly in a Python program as an array or dictionary, or may be converted into a Pandas dataframe or other data structure.</p>

<p>Take a look at the following message from a customer and the prompt.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>complaint = """Hi, this is Jane. My internet has been down for two days 
               and I'm very upset."""

prompt = f"""
Extract the following information from the customer complaint:

Customer Name, Issue Category, Sentiment, Urgency.

Return your answer as a JSON object.
{complaint}
"""
</code></pre></div></div>

<p>We’re asking the LLM to analyse the customer complaint and produce a JSON response that will look something like the following.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "customer_name": "Jane",
  "issue_category": "Connectivity",
  "sentiment": "Frustrated",
  "urgency": "High"
}
</code></pre></div></div>

<p>In this experiment, we will specify the structured output format a little more formally than this, and since the framework we are using is PydanticAI, it won’t be any surprise that we use Pydantic to define the output structure.</p>

<h4 id="pydanticai">PydanticAI</h4>

<p>PydanticAI is a fairly new framework for constructing AI agents. It’s MIT-licensed and pretty easy to use.</p>

<p>The following code is in the form of Jupyter Notebook cells, but you ought to be able to construct a plain old Python file from it, too. I’ll pop a link to the source code at the end of the article.</p>

<p>First things first, we need to import the Pydantic library, and so that it doesn’t interfere with the Jupyter runtime, we need to import <code class="language-plaintext highlighter-rouge">nest_asyncio</code> and run the <code class="language-plaintext highlighter-rouge">apply</code> method. You won’t need this in a plain Python program.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from pydantic_ai import Agent
import nest_asyncio
nest_asyncio.apply()
</code></pre></div></div>

<h4 id="simple-structured-output">Simple structured output</h4>

<p>This example comes from the PydanticAI documentation. We ask a simple question, and the answer should be a city. The response should be the name of the city and the country that it is in.</p>

<p>You can see in the code below that we have a very straightforward Pydantic declaration of a class <code class="language-plaintext highlighter-rouge">CityLocation</code>. It consists of two strings, one for the city name and the other for the country name.</p>

<p>The agent is defined with the model type and the <code class="language-plaintext highlighter-rouge">result_type</code> set to <code class="language-plaintext highlighter-rouge">CityLocation</code> , meaning that the response must be of that type.</p>

<p>We then run the agent with a query ‘Where were the olympics held in 2012?’ and print the result. This can be seen in the panel below the code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from pydantic import BaseModel

class CityLocation(BaseModel):
    city: str
    country: str

agent = Agent('openai:gpt-4o-mini', result_type=CityLocation)
result = agent.run_sync('Where were the olympics held in 2012?')
print(result.data)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>city='London' country='United Kingdom'
</code></pre></div></div>

<p>We could ask any question where the result is a city and receive a response in the same format. But what if the question does not produce a valid output? This could be due to an error in the LLM processing or because it is simply impossible to provide a suitable response to the question given.</p>

<p>In the case of an LLM failure, you probably need to validate the response against the Pydantic model and retry the query. There is a whole section on validation in the <a href="https://ai.pydantic.dev/results/#streaming-structured-responses">PydanticAI documents</a> that deals with this, and it would take another article to deal with it, so I won’t go into it here.</p>

<p>However, when a valid answer isn’t possible, a simple strategy is to ask the LLM to fill in fields in the response that indicate whether a response is valid or not, e.g.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from pydantic import BaseModel

class CityLocation(BaseModel):
    city: str
    country: str
    valid: bool = True
    error: str = None

prompt = """If the answer is not a city, 
            return empty strings for the city and country, 
            return valid=False and an error message."""
agent = Agent('openai:gpt-4o-mini', 
              result_type=CityLocation, 
              system_prompt=prompt)
</code></pre></div></div>

<p>Here are a couple of queries, one bad, the other good:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>result = agent.run_sync('What is a fish?')
print(result.data)

result = agent.run_sync('In what city was the soccer world cup final last played?')
print(result.data)
</code></pre></div></div>

<p>And the results:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>city='' country='' valid=False error='The answer provided is not a city.'
city='Lusail' country='Qatar' valid=True error=None
</code></pre></div></div>

<p>So, that’s how to get structured outputs from an LLM. Let’s take a look at a couple of practical examples that might form part of an application.</p>

<p>We’ll first look at how we can transform unstructured customer feedback into a form that we can load into a Pandas dataframe for processing, and then we’ll see how we can generate runnable Python code.</p>

<h3 id="structured-customer-feedback">Structured customer feedback</h3>

<p>I’m going to use fictitious customer feedback similar to my AI for BI article <a href="https://medium.com/data-science/transform-customer-feedback-into-actionable-insights-with-crewai-and-streamlit-06b6f482f5ae"><em>Transform Customer Feedback into Actionable Insights with CrewAI and Streamlit</em></a><em>.</em> It is a set of ratings and comments about products from a made-up online shoe store.</p>

<p>I’ve stored the comments in a Markdown file called <em>shoes.md,</em> and so we can read it like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fb_raw = "shoes.md"
with open(fb_raw, 'r') as f:
    fb = f.read()

print(fb)
</code></pre></div></div>

<p>When printed, it looks like the following: a star rating and a comment about the product.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Customer feedback

### CloudStrider Sneakers

1. Stars: 2  
   "The shoes were super comfortable initially, but after just two months, the sole started to peel off! Really disappointed with the durability."  
2. Stars: 1  
   "I ordered my usual size, but these sneakers were way too tight. Had to return them. The sizing is totally off."  
3. Stars: 3  
   "Great for short runs, but they hold onto odors even after washing. Not ideal for heavy use."  
4. Stars: 5  
   "Extremely lightweight and breathable. Perfect for casual jogging. No issues so far!"
### PeakTrek Hikers
1. Stars: 1  
   "These boots claim to be waterproof, but my feet were soaked after just walking through damp grass. Not worth it."  
2. Stars: 2  
   "I slipped multiple times on rocky trails because the soles donâ€™t grip well on wet surfaces. Not safe for serious hikes."  
3. Stars: 4  
   "The boots are sturdy and provide decent ankle support, but I wish the padding was thicker for longer treks."  
4. Stars: 5  
   "Used these for a weekend hike in the mountains, and they held up really well. No blisters, and they felt solid."
</code></pre></div></div>

<p>I want to transform this into a structured format, and I use the following prompt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>description=f""" 
            Analyse '{fb}' the data provided - it is in Markdown format. 
            The data is about the range of shoes in an online shop each with 
            set of messages from customers giving feedback about the shoes that they have purchased.
            """
</code></pre></div></div>

<p>This is used along with two Pydantic models: the first is the format of an individual comment, while the second defines a list of those comments. An <code class="language-plaintext highlighter-rouge">Enum</code> is used to define the possible sentiment values.</p>

<p>The agent is then called using the list as the structured output definition.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from pydantic import BaseModel
from enum import Enum

class Sentiment(str, Enum):
    negative = 'negative'
    neutral = 'neutral'
    positive = 'positive'

class feedback_report_shoe(BaseModel):
    product: str
    overall_rating: int  
    issue: str 
    review: str
    sentiment: Sentiment

class feedback_report(BaseModel):
    feedback: list[feedback_report_shoe]

agent = Agent('openai:gpt-4o-mini', result_type=feedback_report)
result = agent.run_sync(description)
</code></pre></div></div>

<p>The result, in JSON format, can be seen using the following print statement.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(result.data.model_dump_json(indent=2))
</code></pre></div></div>

<p>And here is a sample of that output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "feedback": [
    {
      "product": "CloudStrider Sneakers",
      "overall_rating": 2,
      "issue": "Durability",
      "review": "The shoes were super comfortable initially, but after just two months, the sole started to peel off! Really disappointed with the durability.",
      "sentiment": "negative"
    },
    {
      "product": "CloudStrider Sneakers",
      "overall_rating": 1,
      "issue": "Sizing",
      "review": "I ordered my usual size, but these sneakers were way too tight. Had to return them. The sizing is totally off.",
      "sentiment": "negative"
    }
...

  ]
}
</code></pre></div></div>

<p>Now that we have a nicely structured output, we can easily convert it into a dataframe for further processing.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pandas as pd
df = pd.DataFrame([dict(f) for f in result.data.feedback])
df['sentiment'] = df['sentiment'].apply(lambda x: x.value)
df
</code></pre></div></div>

<p>This code will give us the dataframe illustrated below.</p>

<p><img src="https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fece3f1b4-31ce-4ccf-8069-f79d0d062b6c_880x581.png" alt="" /></p>

<p>We can process the data further, for example, ranking the products according to their star rating.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>average_ratings = df.groupby('product')['overall_rating'].mean()
average_ratings = average_ratings.sort_values(ascending=False)
print(average_ratings)
</code></pre></div></div>

<p>We first grouped the products, calculated the mean of the rating and then sorted them.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BounceMax Runners        4.75
EcoStep Slip-Ons         4.50
LuxeLace Oxfords         4.50
PeakTrek Hikers          3.00
CloudStrider Sneakers    2.75
SwiftShine Heels         2.50
</code></pre></div></div>

<p>In this example, getting the LLM to structure the data makes it easy for us to process it. Now, let’s look at my code generation problem.</p>

<h4 id="unstructured-code-generation">Unstructured code generation</h4>

<p>LLMs are quite proficient at producing code, but, as I discussed earlier, getting them to produce something consistent and usable is slightly trickier.</p>

<p>Here is a simple example of code generation. We simply asked the agent to produce a Python function to add two integers.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from pydantic_ai import Agent

agent = Agent(  
    'openai:gpt-4o-mini',
)

result = agent.run_sync("Write a Python function to add two integers"
                        "together and give an example call")  
print(result.data)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Here is a simple Python function that takes two integers as input, 
adds them together, and returns the result:

```python
def add_two_integers(a, b):
    """
    Add two integers together.

    Parameters:
    a (int): The first integer.
    b (int): The second integer.

    Returns:
    int: The sum of the two integers.
    """
    return a + b

# Example call
result = add_two_integers(5, 3)
print(result)  # Output: 8
</code></pre></div></div>

<p>In this example, the function <code class="language-plaintext highlighter-rouge">add_two_integers</code> is defined to take two 
parameters, <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>. It calculates the sum of these two integers and 
returns the result. The example call at the bottom demonstrates how to use 
the function by adding the integers 5 and 3, resulting in an output of 8.</p>

<p>The result is typical of a chat-like response and contains exactly the right information. But I cannot use the output to directly run the code because the response is targeted at a human not a computer program.</p>

<h4 id="structured-code-generation">Structured code generation</h4>

<p>Here is a different version with a Pydantic model defined to split the output into the code section and a commentary.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Code_Output(BaseModel):
    code: str
    commentary: str

agent = Agent('openai:gpt-4o-mini', result_type=Code_Output)

result = agent.run_sync("Write a Python function to add two integers" 
                        "together and give an example call")  
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">code</code> part of the response contains a runnable function — no additional information or Markdown fencing, just the code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(result.data.code)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def add_two_integers(a, b):
    """
    This function takes two integers and returns their sum.
    """
    return a + b
</code></pre></div></div>

<p>And the commentary contains the rest of the output.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(result.data.commentary)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Example call

result = add_two_integers(5, 3)
print(result)  # Output: 8

The function 'add_two_integers' is defined to take two integers as parameters 
and return their sum. An example call is provided where the function is 
called with the integers 5 and 3, and the result is printed.
</code></pre></div></div>

<p>We can run the code easily. Here is a Notebook cell that does just that. The functional part of the cell is just <code class="language-plaintext highlighter-rouge">exec(result.data.code)</code>. The rest of the code ensures that the user can review the code and is warned that running it could cause problems. It is a bad idea to run LLM-generated code unseen unless it is in a sandbox environment such as Docker. LLMs make errors and while it is unlikely that a function to add two integers will cause any harm, we should still check.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import ipywidgets as widgets

text = widgets.HTML("&lt;h3&gt;Running the code is potentially dangerous&lt;/h3&gt;") 
button = widgets.Button(description="Run it, anyway",
                         button_style='danger')
output = widgets.Output(layout={'border': '1px solid black'})
with output:
    print("Code result:")

display(widgets.VBox([text,button, output]))

def run(b):
    with output:
        exec(result.data.code)

button.on_click(run)

VBox(children=(HTML(value='&lt;h3&gt;Running the code is potentially dangerous&lt;/h3&gt;'), Button(button_style='danger',…
</code></pre></div></div>

<h3 id="conclusion">Conclusion</h3>

<p>Structured outputs are a useful way of ensuring consistency in an LLM’s response, as I hope these simple examples have illustrated.</p>

<p>They are easily implemented in PydanticAI: simply define a Pydantic model and use that in the call to the AI agent. The result will be a data structure that is easily used in further coding.</p>

<p>I haven’t properly covered what happens if the LLM does not respond as required, which is always a possibility, as this could easily be a lengthy discussion. The method that I showed above only copes with the simplest of errors, and more sophisticated error detection may well be necessary for a particular application, for example, validation against the model and retrying the query - PydanticAI discusses this in their docs.</p>

<hr />

<p>As ever, thanks for reading and I hope that this has been useful. To see more of my articles, follow me on <a href="https://medium.com/@alan-jones">Medium</a> or subscribe to my <a href="http://technofile.substack.com/">Substack</a>.</p>

<p>The code and data for this article can be found in my GitHub repo. I will place a link to it <a href="https://github.com/DataVizandAI/public_code/tree/main/structured-outputs"><em>here</em></a> shortly after publication.</p>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Stop being driven crazy by inconsistent responses]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/DataVizandAI/public_code/blob/main/structured-outputs/images/structure.png?raw=true" /><media:content medium="image" url="https://github.com/DataVizandAI/public_code/blob/main/structured-outputs/images/structure.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Visualization with Dash and Bootstrap Components</title><link href="http://localhost:4000/2025/02/28/dash-bootstrap.html" rel="alternate" type="text/html" title="Data Visualization with Dash and Bootstrap Components" /><published>2025-02-28T00:00:00+01:00</published><updated>2025-02-28T00:00:00+01:00</updated><id>http://localhost:4000/2025/02/28/dash-bootstrap</id><content type="html" xml:base="http://localhost:4000/2025/02/28/dash-bootstrap.html"><![CDATA[<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dash-bootstrap/images/app-screenshot.png?raw=true" alt="app screenshot" /></p>

<p>I’ve been ignoring Dash for years, preferring to use a combination of Flask and HTML. My argument was that if you need to create your user interface in HTML (which you kind of have to in Dash), then why not go the whole hog and actually write it in HTML? <a href="https://medium.com/towards-data-science/flapjax-data-visualization-on-the-web-with-plotly-and-flask-465090fa3fba">As I wrote here, it’s not so difficult</a>.</p>

<p>Anyway, then along came Streamlit, which made things easier.</p>

<p>But I occasionally got a bit annoyed with Streamlit - it is too easy to mix the UI with the rest of the code, and if you aren’t careful, it can be a mess.</p>

<p>So I started looking at other platforms, <a href="https://medium.com/towards-data-science/a-data-dashboard-in-pure-python-with-taipy-bdb164a62b8b">Taipy</a> and <a href="https://medium.com/towards-data-science/hands-on-data-visualization-with-google-mesop-bdde37ef09da">Mesop</a>, for example - both of these nicely separate the program logic from the UI. Much less messy, but designing the UI on these platforms was much closer to writing HTML in Python - my original bugbear with Dash.</p>

<p>So, belatedly, I decided it was time to take another look at Dash. Also belatedly, I found that I could use my favourite Bootstrap components with it (I rarely write HTML without Bootstrap), and I made the app you can see above.</p>

<p>It’s a simple dashboard-type app with two interactive charts (a choropleth and a bar chart) along with their controls (a drop-down menu and a slider).</p>

<p>As you can see from the image, it’s not so bad!</p>

<p>Well, I was fairly happy with the result, anyway. I’ve never properly engaged with Dash before, and I was quite pleased that it didn’t feel any more difficult than Streamlit (or Taipy or Mesop).</p>

<p>The whole app is around 80 lines of well-spaced-out code. A fair chunk of that is to draw the choropleth, and the Dash/Bootstrap UI is only about 20 lines.</p>

<p>So, let’s look at how it’s put together.</p>

<h3 id="a-dash-app">A Dash app</h3>

<p>A Dash app consists of four parts:</p>

<ul>
  <li>the preliminary code that sets up the app and does any data set up and so on,</li>
  <li>the page layout, which is defined as Dash and Bootstrap components,</li>
  <li>callbacks, which are the functions that are called in response to user interaction,</li>
  <li>the app run command.</li>
</ul>

<p>We’ll look at all of these and how they are put together shortly, and you will find all of the code in my <a href="https://github.com/DataVizandAI/public_code/tree/main/dash-bootstrap">GitHub repo</a>.</p>

<p>But first, let’s look at the way we define the page.</p>

<h3 id="page-layout">Page layout</h3>

<p>When deployed, a Dash app consists of two parts: the web page displayed in the browser and the code that supports it, which remains on the server. This separation is hidden; the HTML page layout, which will become the web page, is defined in the app code.</p>

<p>Both Dash and Bootstrap provide us with components that get converted to HTML. Bootstrap also incorporates styles we can adopt to make our page look good and stylistically consistent.</p>

<p>I have defined a default style using Bootstrap that gives every component a common look: a border, a light background, margins around the component and padding inside it. This is a single line of code (that we will see soon) that is applied to each component. The layout of the page looks like the image below. You might find the design a little fussy, but one of my aims is to demonstrate the use of Bootstrap styles, and this does the job, as we will see later.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dash-bootstrap/images/app-layout.png?raw=true" alt="app layout" /></p>

<p>There are four main components to the UI: the outer container that wraps the whole page; a header that is styled a little differently to make it stand out; and two columns that contain the charts, the user controls and some text. At the bottom of the outer container, there is a footer - just a string of text.</p>

<p>In HTML, we would write this page as a set of tags, mostly <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> tags, that are nested inside each other. With Dash, we use the components provided and code the UI in Python.</p>

<h3 id="a-first-dash-app-with-bootstrap-styling">A first Dash app with Bootstrap styling</h3>

<p>Let’s have a quick blast through a simple Dash app that uses Bootstrap components.</p>

<p>Below is the code for a very simple Dash app that uses Bootstrap styling, and below that is a screenshot of the result. We will use this as the basis of the full app.</p>

<pre><code class="language-Python">from dash import Dash, html
import dash_bootstrap_components as dbc

# Initialize the Dash app with Bootstrap stylesheet
app = Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define a default CSS class for styling
DEFAULT_CLASS = 'border border-primary rounded bg-light p-2 m-2'

# Define the layout of the app
app.layout = dbc.Container(
    [
        html.H1("A Bootstrap 'primary' styled header",
        className="text-primary"),
        html.Div("Some normal text in a 'secondary' style",
        className='text-secondary'),
    ], className=DEFAULT_CLASS
)

# Run the app
if __name__ == '__main__':
    app.run(debug=True)
</code></pre>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dash-bootstrap/images/simple-app.png?raw=true" alt="simple app screenshot" /></p>

<p>The first couple of lines import the required libraries. If you want to follow along with the coding, you’ll probably want ot create a virtual environment and <code class="language-plaintext highlighter-rouge">pip install</code> these (or use whatever your favourite installation method is). Later, you will also need <code class="language-plaintext highlighter-rouge">plotly</code>, <code class="language-plaintext highlighter-rouge">pandas</code> and <code class="language-plaintext highlighter-rouge">numpy</code>.</p>

<p>After that, the Dash app itself is created, and here we need to tell Dash that we will be using the Bootstrap themes.</p>

<p>There are two aspects of the Bootstrap components: one is the component themselves (e.g. the rows and columns we’ll see later). Styles are defined as classes by Bootstrap, and we can string them together to make quite complex styles. For example, there are classes that define borders, ones that define margins and padding, and those that determine how the text and the background should look.</p>

<p>As I mentioned before, I set up a default style, and that is the next line of code that you see.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DEFAULT_CLASS</span> <span class="o">=</span> <span class="sh">'</span><span class="s">border border-primary rounded bg-light p-2 m-2</span><span class="sh">'</span>
</code></pre></div></div>

<p>The meaning of each part is as follows:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">border</code> - there is a border around the component</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">border-primary</code> - that is the colour of the border</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">rounded</code> - the border has rounded corners</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bg-light</code> - the background colour</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">p-2</code> - two pixels of padding</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">m-2</code> - a two-pixel margin</p>
  </li>
</ul>

<p>There are many,  many ways of setting up the way that Bootstrap components look. See the <a href="[Get started with Bootstrap · Bootstrap v5.3](https://getbootstrap.com/docs/5.3/getting-started/introduction/)">Bootstrap docs</a> for the full set of components and styles and the <a href="https://dash-bootstrap-components.opensource.faculty.ai/">Dash Bootstrap Components</a> for how to use them in Dash.</p>

<p>We can see the usage of this default style in the first component in the layout. Because that is the next thing we come across. The <code class="language-plaintext highlighter-rouge">app.layout</code> defines how the app will look, and here we assign it to a component called <code class="language-plaintext highlighter-rouge">dbc.container</code>. This is a general-purpose container provided by Bootstrap, which contains a list of elements or other containers. At the end of that list, we can specify the style of the container, and it is here that we use the default style.</p>

<p>Inside the container, there are two more elements: a header and a <em>div</em> container. The purpose of a header is self-explanatory, and a <em>div</em>  is another general-purpose container (that will create an HTML <em>&lt;div&gt;</em> tag).</p>

<p>Each of these elements contains a string, which will be displayed and a <code class="language-plaintext highlighter-rouge">classname</code> which defines the style (in this case, the colour).</p>

<p>The last couple of lines of code run the app, and in this case, we set the <code class="language-plaintext highlighter-rouge">debug</code> flag to <code class="language-plaintext highlighter-rouge">True</code>. This is convenient for development, as it will reload the app whenever it detects a change.</p>

<p>The thing we don’t see in this app is the dynamic part - the callback functions. These are invoked when a UI component changes, and we need something to be done. We’ll get on to those later.</p>

<h3 id="callbacks---adding-charts-and-controls">Callbacks - adding charts and controls</h3>

<p>The final app displays charts of CO₂ emissions that come from a local CSV file.</p>

<p>Our next app gets part of the way there by reading data and building a chart from it. Furthermore, it incorporates a user control (a slider) that lets the user choose the particular aspect of the data to be displayed (the year).</p>

<p>This illustrates how Dash deals with user input via callback functions. These functions are linked to values in the user interface: the input that has changed and an output value that the callback will calculate from that changed input.</p>

<p>Here is what our data looks like.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dash-bootstrap/images/data.png?raw=true" alt="app layout" /></p>

<p>It is a simple table that records CO₂ emissions for a country (‘Entity’) in a particular year and is sourced from <a href="https://ourworldindata.org/"><strong>Our World in Data</strong></a>.</p>

<p>The application allows users to explore CO₂ emissions data over time by selecting a specific year from a slider. A <strong>choropleth map</strong> updates dynamically, displaying emissions for each country using a color scale.</p>

<p>First, we import the necessary libraries - there are a couple more this time:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dash</span> <span class="kn">import</span> <span class="n">Dash</span><span class="p">,</span> <span class="n">html</span><span class="p">,</span> <span class="n">dcc</span><span class="p">,</span> <span class="n">callback</span><span class="p">,</span> <span class="n">Output</span><span class="p">,</span> <span class="n">Input</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">dash_bootstrap_components</span> <span class="k">as</span> <span class="n">dbc</span>
</code></pre></div></div>

<ul>
  <li>Dash and Dash Bootstrap Components (dbc)  as before.</li>
  <li>Plotly Express (px) is used to generate the choropleth map.</li>
  <li>Pandas loads and manipulates the CO₂ emissions dataset.</li>
</ul>

<p>As before, we create an instance of <code class="language-plaintext highlighter-rouge">Dash</code> and apply an external Bootstrap stylesheet for styling:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">app</span> <span class="o">=</span> <span class="nc">Dash</span><span class="p">(</span><span class="n">external_stylesheets</span><span class="o">=</span><span class="p">[</span><span class="n">dbc</span><span class="p">.</span><span class="n">themes</span><span class="p">.</span><span class="n">BOOTSTRAP</span><span class="p">])</span>
</code></pre></div></div>

<p>The dataset, stored in a CSV file, is loaded using Pandas. We record the minimum, maximum, and midpoint years for configuring the slider later:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">data/co2_total.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">marks</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">):</span> <span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">Year</span><span class="p">.</span><span class="nf">unique</span><span class="p">()</span> <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">50</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span>

<span class="n">min_year</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">Year</span><span class="p">.</span><span class="nf">min</span><span class="p">()</span>
<span class="n">max_year</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">Year</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span>
<span class="n">mid_year</span> <span class="o">=</span> <span class="p">(</span><span class="n">max_year</span> <span class="o">+</span> <span class="n">min_year</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</code></pre></div></div>

<p>Again, we define the default layout.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">DEFAULT_CLASS</span> <span class="o">=</span> <span class="sh">'</span><span class="s">border border-primary rounded p-2 bg-light m-2</span><span class="sh">'</span>
</code></pre></div></div>

<h3 id="defining-the-layout"><strong>Defining the Layout</strong></h3>

<p>As we have seen above, Dash uses a declarative layout structure and here, we organize components using Bootstrap’s <code class="language-plaintext highlighter-rouge">Container</code> and <code class="language-plaintext highlighter-rouge">Row</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">app</span><span class="p">.</span><span class="n">layout</span> <span class="o">=</span> <span class="n">dbc</span><span class="p">.</span><span class="nc">Container</span><span class="p">([</span>
    <span class="n">html</span><span class="p">.</span><span class="nc">H1</span><span class="p">(</span><span class="sh">'</span><span class="s">Dash App with Bootstrap Components - CO₂ Emissions</span><span class="sh">'</span><span class="p">,</span> 
             <span class="n">className</span><span class="o">=</span><span class="sh">"</span><span class="s">{DEFAULT_CLASS} text-center text-dark bg-dark-subtle</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">dbc</span><span class="p">.</span><span class="nc">Row</span><span class="p">([</span>
        <span class="n">html</span><span class="p">.</span><span class="nc">Div</span><span class="p">(</span><span class="sh">'</span><span class="s">Global CO₂ Emissions</span><span class="sh">'</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="sh">'</span><span class="s">h3 text-danger</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">html</span><span class="p">.</span><span class="nc">Div</span><span class="p">(</span><span class="sh">"</span><span class="s">Move the slider to display CO₂ emissions by country for a specific year</span><span class="sh">"</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="sh">'</span><span class="s">text-secondary</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">dcc</span><span class="p">.</span><span class="nc">Slider</span><span class="p">(</span><span class="nb">min</span><span class="o">=</span><span class="n">min_year</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="n">max_year</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">mid_year</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">marks</span><span class="o">=</span><span class="n">marks</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">slider-value</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">dcc</span><span class="p">.</span><span class="nc">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">graph2-content</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">dcc</span><span class="p">.</span><span class="nc">Markdown</span><span class="p">(</span><span class="sh">"""</span><span class="s">
            The data used in this article is derived from Our World in Data.
            OWD publishes articles and data about the most pressing problems that the world faces.
            All its content is open source and its data is downloadable.
            See [Our World in Data](https://ourworldindata.org/) for details.
        </span><span class="sh">"""</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="sh">'</span><span class="s">text-secondary</span><span class="sh">'</span><span class="p">)</span>
    <span class="p">],</span> <span class="n">className</span><span class="o">=</span><span class="sh">'</span><span class="s">border border-primary rounded p-2 bg-light m-2</span><span class="sh">'</span><span class="p">)</span>
<span class="p">],</span> <span class="n">className</span><span class="o">=</span><span class="sh">"</span><span class="s">container-fluid</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="here-are-the-components-in-detail">Here are the components in detail:</h4>

<ul>
  <li>
    <p><strong>Container</strong>: This is a a general purpose container for the whole app</p>
  </li>
  <li>
    <p><strong>Title (H1)</strong>: The main heading is styled with Bootstrap classes - the text and background style from the default style are overridden.</p>
  </li>
  <li>
    <p><strong>Row</strong>: by itself, a row doesn’t do anything except act as another container. The reason for using a row here is because the final app will create two columns in the row for the two graphs</p>
  </li>
  <li>
    <p><strong>Divs</strong>: These are text containers that provide user guidance and context - the first is an <em>H3</em> header that is coloured red (the ‘text-danger’ class).</p>
  </li>
  <li>
    <p><strong>Slider</strong>: Allows users to select a year to update the map.</p>
  </li>
  <li>
    <p><strong>Graph</strong>: Displays CO₂ emissions using a choropleth map.</p>
  </li>
  <li>
    <p><strong>Markdown</strong>: A markdown container can contain any valid markdown text and here provides data attribution..</p>
  </li>
</ul>

<h2 id="creating-the-callback-for-interactivity"><strong>Creating the Callback for Interactivity</strong></h2>

<p>Dash uses a <strong>callback function</strong> to update the map when the slider value changes. A callback function is preceded by the <code class="language-plaintext highlighter-rouge">@callback</code> decorator, which defines the input and output for the function. The input and output consist of two parts: the ID of a UI element and a value type. In this case, the input comes from the slider, and it is a ‘value’ (the year), while the output goes to the graph container and is a ‘figure’.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@callback</span><span class="p">(</span>
    <span class="nc">Output</span><span class="p">(</span><span class="sh">'</span><span class="s">graph2-content</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">figure</span><span class="sh">'</span><span class="p">),</span>
    <span class="nc">Input</span><span class="p">(</span><span class="sh">'</span><span class="s">slider-value</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">update_graph</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="n">col</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Annual CO₂ emissions</span><span class="sh">'</span>
    <span class="n">max_val</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span>
    <span class="n">min_val</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">min</span><span class="p">()</span>

    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">choropleth</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">value</span><span class="p">],</span>
        <span class="n">locations</span><span class="o">=</span><span class="sh">"</span><span class="s">Code</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># Country ISO codes
</span>        <span class="n">color</span><span class="o">=</span><span class="n">col</span><span class="p">,</span>  <span class="c1"># CO₂ emissions data
</span>        <span class="n">hover_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Entity</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># Country name
</span>        <span class="n">range_color</span><span class="o">=</span><span class="p">(</span><span class="n">min_val</span><span class="p">,</span> <span class="n">max_val</span><span class="p">),</span>
        <span class="n">scope</span><span class="o">=</span><span class="sh">'</span><span class="s">world</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">projection</span><span class="o">=</span><span class="sh">'</span><span class="s">equirectangular</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">CO₂ Emissions by Country in </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">sequential</span><span class="p">.</span><span class="n">Reds</span>
    <span class="p">)</span>

    <span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
        <span class="n">margin</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span>
        <span class="n">coloraxis_colorbar</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Tonnes</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="n">fig</span>
</code></pre></div></div>

<p>The function is quite simple: it listens for changes in the slider value and draws a Plotly choropleth with the dataframe filtered by <code class="language-plaintext highlighter-rouge">value</code> which is the year selected by the slider. The updated figure is returned to the graph component.</p>

<p>Finally, we start the Dash server to launch the app.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>The result can be seen in the screenshot below.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dash-bootstrap/images/choropleth-app.png?raw=true" alt="app layout" /></p>

<p>That is all you need to know to create the complete app, so I won’t go into great detail more here (the complete code is in my <a href="[public_code/dash-bootstrap at main · DataVizandAI/public_code · GitHub](https://github.com/DataVizandAI/public_code/tree/main/dash-bootstrap)">GitHub</a> repo and the README file will give you details of which file is which, so please visit that).</p>

<p>Below is the code that changes in the UI. You can see that we add two columns to the original row, and the second column contains code very similar to the first. In this column, a bar chart will be drawn, and the input is from a drop-down menu that contains a list of countries.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="n">dbc</span><span class="p">.</span><span class="nc">Row</span><span class="p">([</span>
            <span class="n">dbc</span><span class="p">.</span><span class="nc">Col</span><span class="p">(</span> <span class="c1"># ...the original row content
</span>            <span class="p">),</span>
            <span class="n">dbc</span><span class="p">.</span><span class="nc">Col</span><span class="p">([</span>
                <span class="n">html</span><span class="p">.</span><span class="nc">Div</span><span class="p">(</span><span class="sh">'</span><span class="s">Total CO₂ Emissions</span><span class="sh">'</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="sh">'</span><span class="s">h3 text-danger</span><span class="sh">'</span><span class="p">),</span>
                <span class="n">html</span><span class="p">.</span><span class="nc">Div</span><span class="p">(</span><span class="sh">"</span><span class="s">Choose a country to display the CO₂ emissions over time</span><span class="sh">"</span><span class="p">,</span> <span class="n">className</span><span class="o">=</span><span class="sh">'</span><span class="s">text-secondary</span><span class="sh">'</span><span class="p">),</span>
                <span class="n">dcc</span><span class="p">.</span><span class="nc">Dropdown</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">Entity</span><span class="p">.</span><span class="nf">unique</span><span class="p">(),</span> <span class="sh">'</span><span class="s">Canada</span><span class="sh">'</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">dropdown-selection</span><span class="sh">'</span><span class="p">),</span>
                <span class="n">dcc</span><span class="p">.</span><span class="nc">Graph</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="sh">'</span><span class="s">graph-content</span><span class="sh">'</span><span class="p">),</span>
                <span class="p">],</span>
                <span class="n">className</span><span class="o">=</span> <span class="n">DEFAULT_CLASS</span>
            <span class="p">),</span>
        <span class="p">]),</span>
</code></pre></div></div>

<p>To cater for this new chart, we need another callback function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@callback</span><span class="p">(</span>
    <span class="nc">Output</span><span class="p">(</span><span class="sh">'</span><span class="s">graph-content</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">figure</span><span class="sh">'</span><span class="p">),</span>
    <span class="nc">Input</span><span class="p">(</span><span class="sh">'</span><span class="s">dropdown-selection</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">)</span>
<span class="p">)</span>
<span class="k">def</span> <span class="nf">update_graph</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="n">dff</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">Entity</span><span class="o">==</span><span class="n">value</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">px</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">dff</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">Annual CO₂ emissions</span><span class="sh">'</span><span class="p">,</span> 
                  <span class="n">template</span><span class="o">=</span><span class="sh">'</span><span class="s">plotly_white</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>This simple function takes the value from the drop-down menu (the country) and plots a bar chart of emissions over time and returns the updated figure to the graph container with the ID ‘graph-content’.</p>

<h2 id="conclusion"><strong>Conclusion</strong></h2>

<p>In this tutorial, we built a Dash web application that visualizes CO₂ emissions using a choropleth map. We integrated Bootstrap components to enhance the layout.</p>

<p>Is this easier than Streamlit? You’ll probably think it is more in line with the way that Taipy or Mesop work, but which is the easiest method? This, at least to some extent, is down to personal preference.</p>

<p>I’ve used the open-source version of Dash here - there is an Enterprise version which provides you with tools to make developing and deploying sophisticated apps easier. I’ve no idea how much it costs.</p>

<p>This was, in the main, an exercise to help me make my mind up which data visualisation framework I prefer, and I have to report that I still don’t think I am any the wiser. Perhaps you are. I’d very much like to hear what you think.</p>

<hr />

<p>Thanks for reading, and I hope this was useful. If you would like to read more of my stuff, most of it is on <a href="https://medium.com/@alan-jones">Medium</a> and also on my <a href="https://datavizandai.github.io/">website</a> (if you aren’t a Medium member). I also maintain a <a href="technofle.substack.com">Substack</a> where I post when I publish something new.</p>

<p>Here are some useful links:</p>

<ul>
  <li>
    <p><a href="https://dash.plotly.com/">Dash (open source docs)</a></p>
  </li>
  <li>
    <p><a href="https://dash-bootstrap-components.opensource.faculty.ai/">Dash Bootstrap Components</a></p>
  </li>
  <li>
    <p><a href="https://ourworldindata.org/">Our World in Data</a></p>
  </li>
  <li>
    <p><a href="[public_code/dash-bootstrap at main · DataVizandAI/public_code · GitHub](https://github.com/DataVizandAI/public_code/tree/main/dash-bootstrap)">The repo for this code</a>.</p>
  </li>
</ul>

<hr />

<p><em>All images are by me, the author, unless otherwise indicated</em></p>

<p><em>I am not connected with any of the companies mentioned in this article except as a user of their products</em></p>]]></content><author><name></name></author><summary type="html"><![CDATA[A simple data dashboard in pure Python]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/DataVizandAI/public_code/blob/main/dash-bootstrap/images/app-screenshot.png?raw=true" /><media:content medium="image" url="https://github.com/DataVizandAI/public_code/blob/main/dash-bootstrap/images/app-screenshot.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Create Your Own House Style for Matplotlib Plots and Charts</title><link href="http://localhost:4000/2025/02/23/matplotlib-styles.html" rel="alternate" type="text/html" title="Create Your Own House Style for Matplotlib Plots and Charts" /><published>2025-02-23T00:00:00+01:00</published><updated>2025-02-23T00:00:00+01:00</updated><id>http://localhost:4000/2025/02/23/matplotlib-styles</id><content type="html" xml:base="http://localhost:4000/2025/02/23/matplotlib-styles.html"><![CDATA[<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/poster.png?raw=true" alt="" /></p>

<p>Websites, publications and news sources all have their own styles. Take a look at the financial data published by, say, the BBC or The New York Times. Or polling data on Nate Silver’s FiveThirtyEight website. They each have a clear and consistent look.</p>

<p>We are going to look at how we can achieve something similar with our Pandas charts and plots. First, by using the built-in styles that are available to us and then by looking at how we can create our own customizations.</p>

<p>The default style renders a line graph like the image, below. It’s a clean-looking image but there are several more built-in styles if you prefer something different.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/default.png?raw=true" alt="" /></p>

<p>The  availablestyles are stored in a list in the <em>Matplotlib</em> library. First, we need to import the library and, we’ll import <em>numpy</em> at the same time as we will use this shortly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<p>The styles are in <code class="language-plaintext highlighter-rouge">plt.style.available</code> - the code below prints a neat list of the styles.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">styles</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">available</span>
<span class="k">for</span> <span class="n">style</span> <span class="ow">in</span> <span class="n">styles</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">style</span><span class="p">)</span>
</code></pre></div></div>
<p>Here is the list.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Solarize_Light2
    _classic_test_patch
    _mpl-gallery
    _mpl-gallery-nogrid
    bmh
    classic
    dark_background
    fast
    fivethirtyeight
    ggplot
    grayscale
    petroff10
    seaborn-v0_8
    seaborn-v0_8-bright
    seaborn-v0_8-colorblind
    seaborn-v0_8-dark
    seaborn-v0_8-dark-palette
    seaborn-v0_8-darkgrid
    seaborn-v0_8-deep
    seaborn-v0_8-muted
    seaborn-v0_8-notebook
    seaborn-v0_8-paper
    seaborn-v0_8-pastel
    seaborn-v0_8-poster
    seaborn-v0_8-talk
    seaborn-v0_8-ticks
    seaborn-v0_8-white
    seaborn-v0_8-whitegrid
    tableau-colorblind10
</code></pre></div></div>

<p>The list from my installation which is version 3.10.0 of Matplotlib. If you have a different version you may have a different list.</p>

<p>Many of the styles have been created for the plotting package Seaborn but you can use any style with any plotting library that is based on Matplotlib.</p>

<p>Other styles are emulations of other plotting systems or websites. The <code class="language-plaintext highlighter-rouge">ggplot</code> style is based on the <em>ggplot2</em> library that is commonly used in the R language.</p>

<p>Below is a function that can be used to explore the different styles. It generates some pseudo-random data and then plots a line graph in Matplotlib. We can pass a style as a parameter to it.</p>

<p>In the code, two Numpy sequences are created for the two axes <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>. <code class="language-plaintext highlighter-rouge">x</code> is created using <code class="language-plaintext highlighter-rouge">np.linspace(0, 10, 100)</code>, which generates 100 evenly spaced values between 0 and 10.</p>

<p><code class="language-plaintext highlighter-rouge">y</code> is created by taking the sine of <code class="language-plaintext highlighter-rouge">x</code> values and adding some random noise to it using <code class="language-plaintext highlighter-rouge">np.random.normal(0, 0.1, 100)</code>, which generates 100 random values from a normal distribution with a mean of 0 and a standard deviation of 0.1.</p>

<p>The code below displays a plot with the <code class="language-plaintext highlighter-rouge">seaborn-v0_8</code> style.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_with_style</span><span class="p">(</span><span class="n">style</span><span class="p">):</span>
    <span class="c1"># Create random data
</span>    <span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>

    <span class="c1"># Set the style
</span>    <span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="n">style</span><span class="p">)</span>

    <span class="c1"># Plot the data
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">X-axis</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Y-axis</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Random Data Line Graph - </span><span class="si">{</span><span class="n">style</span><span class="si">}</span><span class="s"> style</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="c1"># Example usage
</span><span class="nf">plot_with_style</span><span class="p">(</span><span class="sh">'</span><span class="s">seaborn-v0_8</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/styles_9_0.png?raw=true" alt="png" /></p>

<p>This is what the <code class="language-plaintext highlighter-rouge">ggplot</code> style looks like.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plot_with_style</span><span class="p">(</span><span class="sh">'</span><span class="s">ggplot</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/styles_11_0.png?raw=true" alt="png" /></p>

<p>How about a spooky dark background?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plot_with_style</span><span class="p">(</span><span class="sh">'</span><span class="s">dark_background</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/styles_13_0.png?raw=true" alt="png" /></p>

<p>So that’s how we change to one of the built-in styles and one of these might be suitable for your purposes. Or maybe you want to be a little more adventurous.</p>

<h3 id="changing-individual-attributes">Changing individual attributes</h3>

<p>The attributes for Matplotlib graphs are stored in a dictionary called <em>rcParams</em>. You can change individual attributes by setting values in that dictionary. So, if you wanted to change the font size from its default value of 10 to something smaller, you could do this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">font.size</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">8</span>
</code></pre></div></div>

<p>Any subsequent plot that you make will now have a font size of 8.
You can easily find all of the rcParams simply by printing them.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">plt</span><span class="p">.</span><span class="n">rcParams</span><span class="p">)</span>
</code></pre></div></div>

<p>There are an awful lot of parameters so I won’t list them here. The purpose of some parameters is a little obscure and you would need to study the Matplotlib documentation to understand theier use. Others are fairly clear and below is some code that uses a few of these.</p>

<p>The resulting plot is a little garish. The aim is not to be aesthetically pleasing but to make it plain how the parameters map onto the various parts of the plot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="kn">from</span> <span class="n">cycler</span> <span class="kn">import</span> <span class="n">cycler</span>

<span class="c1"># Reset everything to the default style
</span><span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="sh">'</span><span class="s">default</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Set custom rcParams for the plot
</span><span class="n">mpl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">lines.linewidth</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>         <span class="c1"># Set line width to 4
</span><span class="n">mpl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">lines.linestyle</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">--</span><span class="sh">'</span>      <span class="c1"># Set line style to dashed
</span> <span class="c1"># Set color cycle for lines, the first is red and that is what will be used
</span><span class="n">mpl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">axes.prop_cycle</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">cycler</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">g</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">])</span> 
<span class="n">mpl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">figure.facecolor</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">yellow</span><span class="sh">'</span> <span class="c1"># Set figure background color to yellow
</span><span class="n">mpl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">axes.facecolor</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">lightblue</span><span class="sh">'</span><span class="c1"># Set axes background color to light blue
</span><span class="n">mpl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">font.size</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">14</span>              <span class="c1"># Set font size to 14
</span><span class="n">mpl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="sh">'</span><span class="s">text.color</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">red</span><span class="sh">'</span>          <span class="c1"># Set text color to red
</span>
<span class="c1"># Generate random data
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>

<span class="c1"># Plot the data with custom style
</span><span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">X-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Y-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Random Data Line Graph - custom style</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/styles_21_0.png?raw=true" alt="png" /></p>

<p>You can see what changing each of the parameters has done in the resulting chart - the meaning of these parameters is fairly clear but the comments tell you exactly what they are doing. The colour cycle is slightly more complicated - you don’t just set a single colour but a sequence of them that will be cycled through. In this case, of course, there is only one plot so only one colour is used. (I am not, by the way suggesting that you adopt this particular colour scheme!)</p>

<h3 id="create-your-own-stylesheet">Create your own stylesheet</h3>

<p>You don’t have to specify the parameters you want in every program you write. You can create your own stylesheet and use that instead of one of the built-in ones.
All you have to do is create a text file with the rcParams set the way you want them and then use that as your stylesheet in a similar way to the built-in ones, for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mpl.style.use('path-to-my-style-sheet')
</code></pre></div></div>

<p>And you don’t have to specify all of the rcParams only the ones that you want to change.</p>

<p>Here is an example of a simple style sheet that I have saved in the file <em>example.mlpstyle</em>. It sets the colours to various shades of blue.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lines.linewidth: 2          # Set line width to 2
figure.facecolor: eff3ff    # Set figure background color
axes.facecolor: bdd7e7      # Set axes background color
font.size: 14               # Set font size to 14
text.color: 08519c          # Set text color
axes.labelcolor: 08519c     # set the axes labels
</code></pre></div></div>

<p>The code below uses this style but it first sets the <em>default</em> style. This has the effect that the new style sheet changes the values specified in that sheet but leaves all the others as they are.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Reset everything to the default style
</span><span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="sh">'</span><span class="s">default</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Now apply the new stylesheet
</span><span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="sh">'</span><span class="s">example.mplstyle</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># Generate random data
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>

<span class="c1"># Plot the data with custom style
</span><span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">X-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Y-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Random Data Line Graph - custom style</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/styles_24_0.png?raw=true" alt="png" /></p>

<p>As you can see, Matplotlib <code class="language-plaintext highlighter-rouge">rcParams</code> lets you create your own unique, and reusable, style for your Pandas plots.</p>

<p>The examples here are, of course, deliberately simple, but you can explore how the parameters are used in the built-in styles by looking at their source code.</p>

<h3 id="stylelib">Stylelib</h3>

<p>You can find the code for all the different styles in the Matplotlib Github repository in the <a href="https://github.com/matplotlib/matplotlib/tree/main/lib/matplotlib/mpl-data/stylelib">Stylelib</a> folder. Try looking at the <em><a href="https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/mpl-data/stylelib/classic.mplstyle">Classic</a></em> style — this demonstrates setting pretty much all the possible parameters. Or, for a much simpler stylesheet, look at <em><a href="https://github.com/matplotlib/matplotlib/blob/main/lib/matplotlib/mpl-data/stylelib/grayscale.mplstyle">greyscale</a></em> where, as you might imagine, the colours are set to black, white and varying shades of grey.</p>

<h3 id="third-party-styles">Third-party styles</h3>
<p>You can also find third-party libraries on GitHub (and elsewhere, no doubt), for example in the <a href="https://github.com/nschloe/matplotx">matplotx package</a>. Below is an example of the ‘Dracula’ style for that package.</p>

<p>You will need to install the matplotx package and use the following code in front of your plots.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import matplotx
plt.style.use(matplotx.styles.dracula)
</code></pre></div></div>

<p>Here is the code that uses it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotx</span>
<span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="n">matplotx</span><span class="p">.</span><span class="n">styles</span><span class="p">.</span><span class="n">dracula</span><span class="p">)</span>

<span class="c1"># Generate random data
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>

<span class="c1"># Plot the data with custom style
#with plt.style.context(matplotx.styles.dracula):
</span><span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">X-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Y-axis</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Random Data Line Graph - custom style</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/styles_27_0.png?raw=true" alt="png" /></p>

<p>There are several other repos that include style libraries that you can explore and that are available on PyPi.</p>

<h3 id="conclusion">Conclusion</h3>

<p>As we have seen, Matplotlib provides a lot of scope for customising your plots. You can use one of the variety of built-in styles, you can modify the styles by changing the <code class="language-plaintext highlighter-rouge">rcParams</code>, make your own stylesheet to replace or modify existing ones, or you can find and install style packages from PyPi.</p>

<p>Matplotlib is a very flexible and powerful plotting library and the ability to change styles means you can create your own brand or house style. Also because many other plotting libraries are based on Matplotlib, these techniques can be used with those libraries, too.</p>

<hr />
<p>As always, thanks for reading and I hope you found this useful. If you’d like to know when I publish other articles, please follow me on <a href="https://medium.com/@alan-jones/subscribe">Medium</a> or <a href="linkedin.com/in/alan-jones-032699100">LinkedIn</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Customise your Matplotlib plots with off-the-shelf style sheets - or design your own]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/poster.png?raw=true" /><media:content medium="image" url="https://github.com/DataVizandAI/public_code/blob/main/matplotlibstyle/styles_files/poster.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">UK in Shock AI Revelation</title><link href="http://localhost:4000/2025/02/15/UK-in-Shock-AI-Revelation.html" rel="alternate" type="text/html" title="UK in Shock AI Revelation" /><published>2025-02-15T00:00:00+01:00</published><updated>2025-02-15T00:00:00+01:00</updated><id>http://localhost:4000/2025/02/15/UK%20in%20Shock%20AI%20Revelation</id><content type="html" xml:base="http://localhost:4000/2025/02/15/UK-in-Shock-AI-Revelation.html"><![CDATA[<p><img src="https://miro.medium.com/v2/resize:fit:1000/1*LTDw4Fxml87xLW4XYGEn-Q.jpeg" alt="" /></p>

<p><em>UK Houses of Parliament. Image by Diliff, <a href="https://creativecommons.org/licenses/by-sa/2.5">CC BY-SA 2.5</a>, via Wikimedia Commons</em></p>

<p>Anyone would think that the UK House of Commons was going to be replaced with a bunch of AI robots (hang on… is that an idea?).</p>

<p>The reaction to an <a href="https://www.thetimes.com/article/43cb9e75-8924-4a76-b6cf-1a380db9b613">article in the Times newspaper</a> (paywall) about the Keir Starmer government’s proposed use of AI was startling. On Bluesky, a Guardian journalist thought it sounded like a joke. Some critics appeared to think that AI wasn’t intelligent enough to be trusted with the complexity of government and others that it was too clever by half, and it was irresponsible to let it have the reins of power (spoiler alert: it won’t).</p>

<p>All of these reactions display a lack of familiarity with AI which should not come at any great surprise, I suppose, given the hype that surrounds it. The term AI has travelled far from its origins as a discipline in Computer Science and has arrived as a vague notion in marketing.</p>

<p>There is no proper definition of intelligence so the argument about whether machines can or cannot be regarded as intelligent is not very meaningful. All we can really say is that a software system that can take the place of a human in a particular role and perform that role in a reasonably competent way could be regarded as an instance of AI.</p>

<p>Those who still argue that an AI translator, say, is not intelligent so cannot be regarded as AI might consider that Elon Musk’s network of communications satellites called Starlink doesn’t actually link any stars, Cillit Bang doesn’t explode when used and a Ford Mustang is not a horse. AI is clever software that is marketed as intelligent— maybe it is, but, then again, maybe it isn’t; it’s not important.</p>

<p>What is without doubt is that while AI is not about to take over the world, it is useful.</p>

<p>Most of the UK government proposals are entirely modest. Use text analysis to summarise large documents, making searching easier, and introduce an AI-based customer service system.</p>

<p>To AI developers these sorts of applications will seem run-of-the-mill. To people in large companies who have already invested in and are successfully using this technology, it will not sound ambitious.</p>

<p>But it’s a start.</p>

<p>The UK government like any other generates many documents, reports and memos, one is Hansard. This is a verbatim record of the debates in the House of Commons, the UK’s main legislative chamber. It records everything that it said and by whom in every Commons debate. It is the official document of record.</p>

<p>Currently, you can search an online version of Hansard for particular debates, parliamentary sessions or references to members. But it is tedious wading through such an inevitably large document and it is easy to miss something.</p>

<p>One of the tasks that the government expects AI to help with is to look at MPs’ contributions to debates to judge their views on proposed legislation and glean information about how that legislation might be adapted to be more acceptable or effective.</p>

<p>Getting an AI system to do this analysis is always going to be much quicker than employing a team of special advisors to do it by hand. The chances are that it will be more accurate, too. Yes, AI makes mistakes, it sometimes invents things — so-called hallucinations — but when it is given the information that it has to use and all the answers are somewhere in that information, then the chances of these errors are much reduced.</p>

<p>And, we shouldn’t forget, people make mistakes, too.</p>

<p>There are several projects mentioned on the <a href="http://ai.gov.uk/"><strong>Incubator for Artificial Intelligence (i.AI)</strong></a> website that the government is developing.</p>

<p><em>Redbox</em> is intended to empower civil servants saving them time and increasing their efficiency. Redbox can summarize lengthy documents in minutes, a task that previously took hours.</p>

<p><em>Caddy</em> is essentially an AI-powered customer service system. It will act as a ‘co-pilot’ for customer service advisors in the public sector by providing expert advice. The aim is to improve the accuracy and consistency of information given to the public.</p>

<p><em>Lex</em> and <em>Parlex</em> are tools that simplify research by allowing users to ask questions in plain language. They process large amounts of information to provide summaries and analyses of that information to make it easier for users to find the information they need. Lex deals with the vast amount of legislative information the government holds, while Parlex deals with Parliamentary information such as Hansard.</p>

<p><em>Consult</em> is designed to automate and improve the analysis of public feedback following government consultation. It is expected to save around £80 million a year</p>

<p>These are not rocket science. AI is good at these sorts of tasks where they are provided with a corpus of documents and, following natural language instructions can search, analyse and summerise those documents to produce a result. And they can achieve good results in a tiny fraction of the time it would take a human to do the same job. So, why wouldn’t you do it?</p>

<p>These projects directly impact government, but i.AI are working on other projects that are less clear in their aims. i.AI is working with the NHS to increase efficiency, they say, but there are no details about what it is they intend to do. The likes of Lex and the other applications I have mentioned are dealing, in the main, with information that is in the public domain. The NHS is obviously a different matter as it holds a great deal of private information which must be kept that way. The benefits of more rapid diagnosis and personalised treatments need to be balanced with the need for privacy. The scale of this type of project is very different, too, and big software projects, AI-based or not, are always tricky.</p>

<p>The government’s plans for AI in government are not scary. The technologies are already available, in use in business and industry and, used well, should lead to efficiency and cost savings.</p>

<p>It seems clear that the UK government’s AI initiatives represent a pragmatic step toward modernizing day-to-day government operations. While initial reactions may have been marked by scepticism and misconceptions, the proposed applications demonstrate practical uses of AI to enhance efficiency, accuracy, and service delivery.</p>

<p>The government needs to address those misconceptions and scepticism by being transparent about their aims and making a proper effort to inform the public and build trust that these new tools will serve the public good.</p>

<p>The potential cost savings, improved productivity, and better-informed policymaking surely make the effort worthwhile. The future of AI in government has the potential to reshape and improve how services are delivered and so we should applaud their efforts, not treat them as a joke.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Instead of just talking about AI, the UK government intends to use it! And the reaction is disappointing.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://miro.medium.com/v2/resize:fit:1000/1*LTDw4Fxml87xLW4XYGEn-Q.jpeg" /><media:content medium="image" url="https://miro.medium.com/v2/resize:fit:1000/1*LTDw4Fxml87xLW4XYGEn-Q.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Instant RAG Applications with Pinecone Assistant</title><link href="http://localhost:4000/2025/02/08/instant-RAG-with-Pinecone.html" rel="alternate" type="text/html" title="Instant RAG Applications with Pinecone Assistant" /><published>2025-02-08T00:00:00+01:00</published><updated>2025-02-08T00:00:00+01:00</updated><id>http://localhost:4000/2025/02/08/instant-RAG-with-Pinecone</id><content type="html" xml:base="http://localhost:4000/2025/02/08/instant-RAG-with-Pinecone.html"><![CDATA[<p><img src="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/george-robot.png?raw=true" alt="" />
<em>George Robotington - image made with DALL-E</em></p>

<p>How easy is it to create a Retrieval Augmented Generation (RAG) application? By using the recently released Pinecone Assistant you can start interrogating your documents in minutes.</p>

<p>And with a bit more effort you can have a fully functional Streamlit app.</p>

<p>We are going to use a Streamlit chat UI to develop an app that answers queries or generates documents about the US Constitution. It will mimic online course notes that a student would have access to and consists of the Constitution, itself, and a Wikipedia article about it.</p>

<h3 id="rag-and-vector-databases-a-very-quick-overview">RAG and Vector Databases: a very quick overview</h3>

<p>Retrieval-Augmented Generation (RAG) is a powerful technique that enhances Large Language Models (LLMs) by grounding their knowledge in external sources. Instead of relying solely on their training data, RAG models can access and process information from a corpus of documents, enabling them to provide more accurate and relevant responses.</p>

<p>Vector databases play a fundamental role in RAG by efficiently storing and retrieving information from your documents. They can identify the most relevant information required to answer a query, allowing a RAG app to access precisely the data it needs.</p>

<p>Pinecone is well-known as a provider of vector databases that have been used in RAG applications for some time. Their products include a vector database service that is aimed at RAG developers. However, recently they have released <strong>Pinecone Assistant</strong>, an out-of-the-box RAG solution which makes it easy to create apps by simply uploading documents and querying with plain English prompts.</p>

<p>Even better, they provide a free tier that can be used for small apps or experimentation.</p>

<p>To give you an idea of how Pinecone Assistant simplifies RAG solutions, below is a diagram from their <a href="https://docs.pinecone.io/reference/architecture/assistant-architecture">documentation</a> (reproduced with permission).</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/assistant-architecture_light.png?raw=true" alt="Diagram" />
<em>Image courtesy of Pinecone</em></p>

<p>The Assistant does three things:</p>

<p><strong>Data ingestion</strong>
A RAG system needs to be provided with documents to work with. The ingestion process splits a document into smaller parts and generates vector embeddings for each part. The embeddings are stored in the vector database and indexed.</p>

<p><strong>Data retrieval</strong>
When the assistant receives a query, it is processed and relevant chunks from the uploaded content are retrieved from the database.</p>

<p><strong>Response generation</strong>
The assistant ranks the chunks for relevance and this, the chat history and assistant instructions are then used by a large language model (LLM) to generate appropriate responses.</p>

<p>Basically, all you need to do to create an app is to upload documents and provide a user interface - Pinecone Assistant takes care of the rest.</p>

<h3 id="getting-started---the-assistant-console">Getting started - the assistant console</h3>

<p>The are two ways of interacting with an agent: through the API or via the Assistant Console. We will look at both.</p>

<p>First, thought you need to get on board with Pinecone. Go to the the <a href="https://www.pinecone.io/pricing/">pricing page</a> and sign up for the free <em>Starter</em> plan. You can then get an API key, and, of course, to use the API, you will need to install the Python library. When you get you API key, you are given one chance to copy it and keep it somewhere safe - <em>don’t lose it!</em></p>

<p>The quick <a href="https://docs.pinecone.io/guides/get-started/assistant-quickstart">start documentation</a> is a good guide to get you started with the Python library but we are going to start with the console and move on to the API when we look at the Streamlit app.</p>

<p>The Assistant console lets us create an assistant, upload documents and write queries in a web interface. Below is a screenshot of my console with a single assistant called <em>demo1</em>.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/console.png?raw=true" alt="Console screenshot" /></p>

<p>Selecting that <em>demo1</em> will take you to the assistant where you can upload documents and query them. Below is a screenshot of <em>demo1</em>. You can see that I have uploaded two PDF documents one is the US Constitution document from the US Senate and the other is a PDF version of the Wikipedia entry for the US Constitution. (You can find lots of versions of the constitution document on the web - some are more attractive than others but they all contain the same information, of course).</p>

<p>In this screenshot you will also see that I have made a query “<em>List the articles</em>” and that <em>demo1</em> has responded accordingly. It is good to see that the assistant gives references in its response. If you hover over the ‘[1]’ in the response it will tell you which document it found the information in and where.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/assistant-screenshot-with-query.png?raw=true" alt="assistant with query screenshot" /></p>

<p>Not all of the functions of the API are available in the console. One of those that we will explore shortly is the ability to specify a JSON format for the response.</p>

<h3 id="the-api-and-a-streamlit-app">The API and a Streamlit app</h3>

<p>In the app, I build on the <em>demo1</em> agent and the documents that I have uploaded. You can find the code and the PDFs in the <a href="https://github.com/DataVizandAI/public_code/tree/main/instant-RAG">GitHub repo for this project</a>.</p>

<p>The Streamlit code is quite short: three functions and a bit of <em>main</em> code. I’ll go through how it works first and then we’l see how it can be used.</p>

<p>Streamlit interface components create a nice UI: here is a screenshot of the app in action.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/app-screenshot.png?raw=true" alt="" /></p>

<p>The main panel contains the chat interface and you can see that I have submitted a query and the assistant has answered.</p>

<p>On the left is a sidebar that contains two UI elements: a pair of radio buttons that allow you to select the format of the response and an expander panel that contains the full response from the agent. There is more to the full response that you can see in the screenshot; the <em>content</em> of the response is what is displayed in the main panel but there are other fields that may be populated by the assistant that are not relevant here but can be seen in the full response panel.</p>

<p>I’ll go through the code showing how the Pinecone API is used but first, we need to import the libraries.</p>

<pre><code class="language-Python">import streamlit as st
from pinecone import Pinecone
from pinecone_plugins.assistant.models.chat import Message
</code></pre>

<p>The first two are obvious and the second is, as we shall see, necessary in order to construct a prompt for the assistant.</p>

<p>The remainder of the code consists of three functions <code class="language-plaintext highlighter-rouge">initialize_pinecone</code>, <code class="language-plaintext highlighter-rouge">retrieve_answer</code>, and <code class="language-plaintext highlighter-rouge">main</code>.</p>

<p>The first is called once to get the assistant and requires the API key which should be stored in a Streamlit secret in the file <em>.streamlit/secrets.toml</em> (see <a href="https://docs.streamlit.io/develop/api-reference/connections/st.secrets"><em>here</em></a> if you are unfamiliar with Streamlit secrets).</p>

<p>The function <code class="language-plaintext highlighter-rouge">retrieve_answer</code> queries the assistant and <code class="language-plaintext highlighter-rouge">main</code> contains the UI.</p>

<p>Before looking at these in more detail we should see the <em>main</em> code which is run first.</p>

<pre><code class="language-Python">if __name__ == "__main__":

    pa = initialize_pinecone()

    st.sidebar.markdown("# :blue[Options]")

    json_mode = st.sidebar.radio("Select Answer Format", 
                                 ("Normal text", "JSON"),
                                 horizontal=True) == "JSON"

    full_response = st.sidebar.expander("Full response",
                                        expanded=False)

    main(pa)
</code></pre>

<p>We first initialise the assistant, then create a sidebar that contains the radio buttons and the expandable panel for the full response. Note that the variables that are set by these UI elements, <code class="language-plaintext highlighter-rouge">json_mode</code> and <code class="language-plaintext highlighter-rouge">full_response</code>, are globally available.</p>

<p>Lastly, we call the <code class="language-plaintext highlighter-rouge">main</code> function and pass the assistant to it.</p>

<p>Here’s the code that initialises the assistant:</p>

<pre><code class="language-Python">def initialize_pinecone():
        api_key = st.secrets["PINECONE_API_KEY"]
        pc = Pinecone(api_key=api_key)
        assistant = pc.assistant.Assistant(
            assistant_name="demo1", 
        )
        return assistant
</code></pre>

<p>It reads the key from a secret, creates a Pinecone instance, retrieves the assistant <em>demo1</em> and returns it.</p>

<p>Next, we’ll look at the <code class="language-plaintext highlighter-rouge">main</code> function.</p>

<pre><code class="language-Python">def main(assistant):
    st.markdown("# :blue[Pinecone Assistant]: US Constitution")

    # User query input
    user_query = st.text_input("Enter your query:")
    if st.button("Submit"):
        if user_query:
            answer = retrieve_answer(assistant, user_query, json_mode)
            if json_mode:
                st.json(answer.content)
            else:
                st.write(answer.content)
            full_response.write(answer)
        else:
            st.warning("Please enter a query.")
</code></pre>

<p>This prompts the user for a query and when the <em>Submit</em> button is pressed it retrieves an answer from the assistant, passing the assistant instance, the actual query and the output mode.</p>

<p>Having retrieved the response it writes the content either as JSON or plain text. The full response is written to the panel in the sidebar.</p>

<p>That leaves the function <code class="language-plaintext highlighter-rouge">retrieve_answer</code> which makes the actual query.</p>

<pre><code class="language-Python">def retrieve_answer(assistant, query, json_mode):
    msg = Message(role="user", content=query)

    resp = assistant.chat(messages=[msg],
                          json_response=json_mode)
    return resp.message
</code></pre>

<p>This is quite straightforward. First, we create a Pinecone <code class="language-plaintext highlighter-rouge">Message</code> with the query, we then call the <code class="language-plaintext highlighter-rouge">chat</code> methods from the <code class="language-plaintext highlighter-rouge">assistant</code> and this returns a response. The part of the response we want is called <code class="language-plaintext highlighter-rouge">message</code> and this is what is returned for display by the <code class="language-plaintext highlighter-rouge">main</code> function.</p>

<p>So, that is how it works; now, how I used it.</p>

<h3 id="usage">Usage</h3>

<p>I’m imagining a hypothetical high school class that is studying the US Constitution. This app can be used by students to easily find answers to questions about the subject as we have already seen. For example, you could ask for a list of the articles, or amendments, in the document and then drill down to a particular item by asking more about that.</p>

<p>But it can do much more.</p>

<p>I asked the assistant to “<em>Write a brief study guide</em>” and it responded with a comprehensive overview that included the structure of the constitution, key concepts, historical context and so on. This sort of thing could be an invaluable guide that could be created by the teacher and circulated to students. Here is a snippet of what I generated:</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/study-guide-screenshot.png?raw=true" alt="" /></p>

<p>Another neat use was to ask “<em>Write a list of 5 multiple choice questions</em>” and set the output mode to JSON. Here is part of the response:</p>

<pre><code class="language-JSON">{
    "questions":[
        {
        "question":
            "What does the Thirteenth Amendment of the U.S. Constitution address?",
        "choices":[
            "Abolition of slavery",
            "Women's suffrage",
            "Prohibition of alcohol",
            "Income tax"
            ],
        "answer":"Abolition of slavery"
        },
        {
        "question":
            "Which amendment granted women the right to vote?",
        "choices":[
            "Fifteenth Amendment",
            "Nineteenth Amendment",
            "Twenty-First Amendment",
            "Twenty-Sixth Amendment"
            ],
        "answer":"Nineteenth Amendment"
        },
</code></pre>

<p>This output could be easily processed into an online test for the students and the Streamlit <code class="language-plaintext highlighter-rouge">st.json</code> function that is used to display the response incorporates a widget for easily copying the JSON code.</p>

<p>These examples will also be in the <a href="https://github.com/DataVizandAI/public_code/tree/main/instant-RAG">GitHub repo</a>.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Pinecone Assistant makes writing RAG apps a breeze. The free tier allows you up to three assistants and each assistant has its own documents. So you could have different assistants for different purposes each with their own set of documents. (The paid plan gives you an unlimited number of assistants).</p>

<p>A good thing is that you don’t need your own subscription to an LLM service. You can choose between OpenAI and Anthropic models and the associated costs are included in your Pinecone plan (even the free one).</p>

<p>There are limitations on the resources that you can use in the free plan, see the <a href="https://docs.pinecone.io/guides/assistant/understanding-assistant#pricing">docs</a> for details.</p>

<p>You will also notice from the console image, above, that, while I have used next to no storage, I’m nearly up to my limit of input tokens. Input tokens are generated in response to a query and are presumably partly a function of the data that is retrieved from the database. That query saw the input tokens rise from 1.3 M to 1.4 M. That’s quite a lot for a simple query but it’s probably because just about the whole of each document needs to be used to answer it.</p>

<p>When I asked “<em>What is the fifth amendment?</em>” there was no noticeable change in the number of input tokens used and I imagine this must be because only a small part of one document was needed to answer the question.</p>

<p>My usage may not be typical, I’ve uploaded very little but made quite a lot of queries most of which required fairly short answers. A real application may have quite a different usage profile.</p>

<p>So, whether the quota in the free tier is enough to support serious work is an open question. If you are using Pinecone commercially then the Standard plan might be an option - it is probably not going to break the finances of your company. If you want to use it for personal use and don’t want to pay, you will need to keep an eye on your usage.</p>

<p>Personally, I am definitely thinking about how I can use Pinecone Assistant… i just need a project.</p>

<hr />

<p>Thanks for reading and, if you haven’t tried Pinecone Assistant yet, maybe this will encourage you to give it a try.</p>

<p>To read more of my articles and tutorials please see my <a href="https://datavizandai.github.io/">website</a> and consider subscribing to my occasional <a href="technofile.substack.com">newsletter</a> where I link to new articles. You can also follow me on Medium.</p>

<p><strong>Notes</strong></p>

<ul>
  <li>The code and data for this project can be found <a href="https://github.com/DataVizandAI/public_code/tree/main/instant-RAG">here</a></li>
  <li>The US Constitution is a public domain document and the Wikipedia article has a Creative Commons license.</li>
  <li>All images and screenshots are by the author unless otherwise noted.</li>
  <li><em>Disclaimer: I have no commercial interest in Pinecone</em></li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Pinecone Assistant is an online RAG/Vector database solution with a free tier]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/george-robot.png?raw=true" /><media:content medium="image" url="https://github.com/DataVizandAI/public_code/blob/main/instant-RAG/images/george-robot.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Rapid Data Visualization with Copilot and Plotly</title><link href="http://localhost:4000/2025/01/29/plotly_weather2.html" rel="alternate" type="text/html" title="Rapid Data Visualization with Copilot and Plotly" /><published>2025-01-29T00:00:00+01:00</published><updated>2025-01-29T00:00:00+01:00</updated><id>http://localhost:4000/2025/01/29/plotly_weather2</id><content type="html" xml:base="http://localhost:4000/2025/01/29/plotly_weather2.html"><![CDATA[<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/Untitled.png?raw=true" alt="" /></p>

<p>GitHub has recently introduced a free tier for Copilot, so there now is absolutely no reason not to try it out. I decided to give it a go on some day-to-day coding to see how much more productive it is than coding by hand.</p>

<p>To be honest, I rather like coding by hand so I haven’t used AI to generate code to any great extent. I think this is going to change.</p>

<p>Initially, I only used Copilot for simple coding tasks and I was pleasantly surprised how quick and easy it was - considerably quicker than coding by hand. Next, I created a Streamlit app that involved a bit of data analysis, and then I let Copilot make it more interactive by adding user interface controls. <em>All this without me writing a single line of code!</em></p>

<p>I used Microsoft VSCode and added the <em>GitHub Copilot</em> extension, so, if you want to follow along you need to install the extension and read the instructions on how to get started with it. Copilot supports other editors as well but VSCode is currently my editor of choice.</p>

<p>I’ll get to the visualization and Streamlit code shortly, but first, we need to look at the ways we can use Copilot.</p>

<h3 id="copilot-modes">Copilot modes</h3>

<p>There are three main modes of use: <strong>code completion</strong>, <strong>chat</strong> and <strong>inline chat</strong>.</p>

<p>Chat opens a new window that you can use in much the same way as ChatGPT. Inline chat lets you write shorter prompts that can add to or replace existing code. Code completion does exactly what it says but as well as completing code that you write, it can be started from a plain English comment, and will begin adding code for you.</p>

<p>I used all three modes to create the data visualization and Streamlit code but, first, let’s look at some simple illustrations.</p>

<h3 id="code-completion">Code completion</h3>

<p>As you might expect, to use code completion you start typing and Copilot suggests what it thinks you want to do. Below you can see an example where I began to write a function definition. I got as far as <code class="language-plaintext highlighter-rouge">def bub</code> and Copilot suggested that I wanted to write a bubble sort function and suggested the code that you can see that is italic and greyed out.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/bubble-sort.png?raw=true" alt="" /></p>

<p>To accept the code you just hit &lt;tab&gt;.</p>

<p>But you don’t have to write any code. If you write a comment that describes the code that you want, Copilot will suggest the code. Just hit &lt;tab&gt; to accept the first line of code and then &lt;return&gt; whereupon, if it thinks it is necessary, Copilot will suggest another line, so keep hitting &lt;tab&gt; and &lt;return&gt; until it runs out of ideas.</p>

<p>In the screenshot below I wrote the comment and hit &lt;return&gt;.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/copilotpreviewtext.png?raw=true" alt="" /></p>

<p>That is really quite a useful thing to be able to do. It’s a good idea to document your code with comments, so if you do that anyway, then it’s great that Copilot can write the code that should follow.</p>

<h3 id="inline-chat">Inline chat</h3>

<p>Inline chat is a sort of mini-chat interface and is good for modifying code.</p>

<p>Below is some simple plotting code (most of which is the result of code completion). I’ve selected the plotting code and hit &lt;ctrl-i&gt; which invokes the inline chat function. In the dialog box, I’ve asked Copilot to “<em>use the ploty_white template, size the figure 800x600 and make the line red</em>”.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/inline-chat-plotting.png?raw=true" alt="" /></p>

<p>The response to executing this request is as follows:</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/inline-chat-plotting-result.png?raw=true" alt="" /></p>

<p>Copilot has suggested the three lines of code that are highlighted. I now have the choice to <em>Accept</em>, <em>Discard</em>, or retry. The code looks functional, so I accept it and, of course, it works fine.</p>

<p>You can modify your code in other ways, too. Select a chunk of code and simply tell Copilot to “<em>refactor</em>” and it will, among other things, substitute functions for inline code, where appropriate. You could ask it to comment the code, too.</p>

<p>You can use inline chat to create new code, as well. But if you need a lot of code creation, you might prefer the full chat interface.</p>

<h3 id="chat-interface">Chat interface</h3>

<p>This is fairly similar to a ChatGPT interface but it is incorporated into the editor environment so you can ask Copilot to create code and have it automatically inserted into a file.</p>

<p>You bring up the chat interface from the view menu, enter a request and Copilot will respond with an answer. Below, I have asked it to “<em>Create a program to illustrate the use of matplotlib to create a scatter chart with a linear regression line.</em>”.</p>

<p>It responds with the correct code in the same window.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/copilot-chat-matplotlib.png?raw=true" alt="" /></p>

<p>If I am satisfied with the code I can transfer it to the editor with a single click - see the screenshot below.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/copilot-chat-matplotlib-result.png?raw=true" alt="" /></p>

<p>Here is the result in the editor window. The button indicated is the one I clicked and is labelled “<em>Apply in editor</em>”. The code is now in the editor and I am being prompted to accept it (or not) as with inline chat.</p>

<p>The chat interface is best for creating large blocks of code and, as well as creating a complete program, you can create a chunk of code that can be inserted at the cursor position in the editor.</p>

<h3 id="copilot-knows-plotly">Copilot knows Plotly</h3>

<p>Copilot relies on ChatGPT and that cannot keep up with all the new Python libraries published on PyPi. However, Plotly has been around and stable for a long time, so Copilot can create Plotly code easily.</p>

<p>I’m going to create some graphs with Plotly by writing a comment from which Copilot will create code.
But we’ll start with something necessary though trivial in terms of coding. I’ll limit myself to a couple of examples but there are more in a Jupyter Notebook in the repo.</p>

<p>We need the following libraries.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import plotly express, plotly graphic objects and pandas
</span><span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="kn">import</span> <span class="n">plotly.graph_objects</span> <span class="k">as</span> <span class="n">go</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
</code></pre></div></div>

<p>And we need some data to plot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># read the columns 'Year', 'Month', 'Tmax', 'Tmean', 'Tmin', 'Rain'
#  and 'Sun' from 'Heathrow.csv' into the dataframe df0
</span><span class="n">df0</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">Heathrow.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">usecols</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Tmax</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Tmean</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Tmin</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Rain</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Sun</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># New dataframe df2023
</span><span class="n">df2023</span> <span class="o">=</span> <span class="n">df0</span><span class="p">[</span><span class="n">df0</span><span class="p">[</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2023</span><span class="p">]</span>
</code></pre></div></div>

<p>By looking at the comment, you might think that I let Copilot write this code - and you’d be right. Now, of course, it would be fair comment to point out that it would have been as easy to write the code as it was to write the comment. And that is true, but it’s not in the spirit of this exercise and, also, if you are unfamiliar with the syntax, or are not a very good typist, it’s a time saver.</p>

<p>The data is a record of weather data for Heathrow, London’s main airport and nearest major weather station. The data comes from my own <a href="https://github.com/alanjones2/uk-historical-weather">GitHub repo</a> and is derived from the UK Met Office’s raw data. Both sources are freely usable (see the license information in the repo).</p>

<p>The second dataframe is a subset of that data from 2023. It looks like this:</p>

<p><img src="https://github.com/alanjones2/dataviz-copilot/blob/master/images/weather-2023-table.png?raw=true" alt="" /></p>

<p>I wanted to set some defaults for the plots I was going to create and, to be honest, I couldn’t remember exactly how to do it, so I used code completion from the comment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># set plotly defaults: template - plotly_white, height - 600, width - 800
</span><span class="n">px</span><span class="p">.</span><span class="n">defaults</span><span class="p">.</span><span class="n">template</span> <span class="o">=</span> <span class="sh">'</span><span class="s">plotly_white</span><span class="sh">'</span>
<span class="n">px</span><span class="p">.</span><span class="n">defaults</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">600</span>
<span class="n">px</span><span class="p">.</span><span class="n">defaults</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">800</span>
</code></pre></div></div>

<p>I don’t why I forgot that, it’s pretty simple, but I remember now!</p>

<p>So, let’s draw some charts - or rather let’s let Copilot draw some charts for us.</p>

<p>In each case, I wrote the comment; Copilot suggested the code and I accepted it. In some cases the comment was fairly precise, others were less so.</p>

<p>Here’s a scatter chart with a trendline.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot a scatter diagram of Rain and Sun for the year 2023 with a trendline
</span><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">df2023</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Rain</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">Sun</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Rain vs Sun for 2023</span><span class="sh">'</span><span class="p">,</span> <span class="n">trendline</span><span class="o">=</span><span class="sh">'</span><span class="s">ols</span><span class="sh">'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://github.com/alanjones2/dataviz-copilot/blob/master/images/scatter-rain-sun.png?raw=true" alt="" />
 </p>

<p>Yep, that’s what I wanted.</p>

<p>In the repo Notebook you’ll find examples of a line chart and a bar chart but I don’t want this to get too boring so here is something a little bit more ambitious.</p>

<p>I want to draw a line chart over the top of a bar chart. The line will plot the mean temperature for each month and the bars will represent the rainfall.</p>

<p>The values for the two charts are quite different and one is in degrees C and the other in millimetres. This means we need two y-axes.  I wasn’t entirely certain how to do this; I know that Plotly Express doesn’t support this combining of charts and so I would have to use the Graphic Object library, instead.</p>

<p>I’m not that familiar with Plotly GO, I knew that I would have to use two plots and then use <code class="language-plaintext highlighter-rouge">add_traces</code> to combine them into a single figure but I wasn’t sure of the syntax. Also because I had little idea about how to draw the two y-axes so I was quite explicit with the prompt.</p>

<p>Copilot performed two tasks here, first, it wrote the code and second, it taught me how to do it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># using plotly graphic object create a plot with two y-axes, one on the left of the 
# figure and the other on the right add a traces for a bar plot of Rainfall and line 
# plot of Tmax in the year 2023
</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">go</span><span class="p">.</span><span class="nc">Figure</span><span class="p">()</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="nc">Bar</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df2023</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">df2023</span><span class="p">[</span><span class="sh">'</span><span class="s">Rain</span><span class="sh">'</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">Rain</span><span class="sh">'</span><span class="p">,</span> <span class="n">yaxis</span><span class="o">=</span><span class="sh">'</span><span class="s">y1</span><span class="sh">'</span><span class="p">))</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">add_trace</span><span class="p">(</span><span class="n">go</span><span class="p">.</span><span class="nc">Scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df2023</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">df2023</span><span class="p">[</span><span class="sh">'</span><span class="s">Tmax</span><span class="sh">'</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">Tmax</span><span class="sh">'</span><span class="p">,</span> <span class="n">yaxis</span><span class="o">=</span><span class="sh">'</span><span class="s">y2</span><span class="sh">'</span><span class="p">))</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Rainfall and Tmax for 2023</span><span class="sh">'</span><span class="p">,</span> <span class="n">yaxis</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Rain</span><span class="sh">'</span><span class="p">,</span> <span class="n">side</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">),</span> 
                  <span class="n">yaxis2</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Tmax</span><span class="sh">'</span><span class="p">,</span> <span class="n">side</span><span class="o">=</span><span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">,</span> <span class="n">overlaying</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">showgrid</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span> 
                  <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://github.com/alanjones2/dataviz-copilot/blob/master/images/tmax-rainfall2.png?raw=true" alt="" /></p>

<p>Copilot has done more than I asked. It seems to have assumed that I would want to keep the same figure size and knows that the defaults I set earlier would have no effect on Plotly GO figures, so it has set the same height and width, explicitly, as well as adding a suitable title.</p>

<p>While simple plots are quite trivial, this one would have taken me much longer to code if I were not using Copilot.</p>

<h3 id="a-streamlit-app">A Streamlit app</h3>

<p>So far, so good. The completion function works nicely for writing new code, let’s see if we can be slightly more ambitious and write a Streamlit app and use the other Copilot modes.</p>

<p>The first thing to say is that, for this experiment, Copilot still produces pretty good code but on occasion, it needs adjusting. And that is where we will use the in-line chat facility.</p>

<p>The app that we will develop uses the same data as before but does some analysis and attempts to show if we can detect the effect of Global Warming on summer temperatures in London. The app looks like the screenshot below and was written pretty much entirely by Copilot - even the textual descriptions and headers.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/st-app-screenshot.png?raw=true" alt="" /></p>

<p>The data is the same as we saw above but, not just for 2023 - it starts in 1949.</p>

<p>I’ll go through the code bit by bit and you can see the complete app in the <a href="https://github.com/DataVizandAI/public_code/tree/main/dataviz-copilot">Github repo for this article</a>.</p>

<p>We start off with the preamble code and by reading the data. Again, I wrote the comments and Copilot wrote the code - except where noted in the comments.</p>

<pre><code class="language-Python"># import libraries streamlit, pandas and plotly express
import streamlit as st
import pandas as pd
import plotly.express as px

# Set display to wide
st.set_page_config(layout='wide')

# A function to read a csv file and return a dataframe
# The function takes a file path as an argument and the result is cached
# Only the columns 'Year', 'Month' and 'Tmean' are required
@st.cache_data
def read_csv(file_path):
    return pd.read_csv(file_path, usecols=['Year', 'Month', 'Tmean'])

# Copilot wanted to use the decorator @cache - this is deprecated, it should use @cache_data
# A manual edit was required

# Read 'Heathrow.csv' as a dataframe
df = read_csv('Heathrow.csv')

</code></pre>

<p>Copilot is not completely up-to-date as can be seen by the use of the <code class="language-plaintext highlighter-rouge">@cache</code> decorator. Streamlit deprecated this some time ago and <code class="language-plaintext highlighter-rouge">@cache_data</code> should now be used. This is not a big deal as Streamlit reminds us that we should do this when we run the app but it is as well to bear in mind that Copilot might be a little old-fashioned. Apart from this, the code was properly constructed.</p>

<p>The comments are quite verbose and, again, you might think that you could have written the code as easily as writing the comments. My response to this criticism would be that I feel that I ought to write the comments anyway and this is for two reasons: first, well-commented code is more easily understood, and second, writing the comments clarifies my intentions - I am thinking about the problem that I am trying to solve rather than the Python code.</p>

<p>Next, we do a bit of analysis. My intention is to track summer temperatures across time but the data doesn’t have that information - we need to create it from the monthly figures.</p>

<p>Notice that the only observation that I have included in the dataframe is the mean temperature for each month. So, the first thing is to re-jig the dataframe so that we have columns for each month and rows that represent years. The cell contents will be <code class="language-plaintext highlighter-rouge">Tmean</code>.</p>

<p>That doesn’t give me the summer temperatures. I need to add the means for June, July and August and put the result in a new column. But if you look at the screenshot above you’ll see that the temperatures are shown as positive and negative changes from the average summer temperature. This gives us a better representation of the changes than the actual temperatures. So, I want another column with these values - the change from the average.</p>

<p>The resulting dataframe should look like the image below.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/summer-table.png?raw=true" alt="" /></p>

<p>The description that I just gave boils down to just three lines of code.</p>

<p>The Pandas method <code class="language-plaintext highlighter-rouge">pivot</code> is used to re-shape the dataframe; the column <code class="language-plaintext highlighter-rouge">Summer</code> is the mean of columns 6,7, and 8; and the change column is the difference between the value for <code class="language-plaintext highlighter-rouge">Summer</code> and the mean of the entire <code class="language-plaintext highlighter-rouge">Summer</code> column.</p>

<pre><code class="language-Python"># Create a new dataframe from df where the columns are months and the year are the rows
df = df.pivot(index='Year', columns='Month', values='Tmean')

# add a column to df that it the average temperature of month columns labelled 6, 7, and 8. 
# Label it 'Summer'.
df['Summer'] = df[[6, 7, 8]].mean(axis=1)
# add a column to df that is the dfference between the average summer temperature over all 
# years and the actual summer temparature. Label it 'dSummer'.
df['dSummer'] = df['Summer'] - df['Summer'].mean()
</code></pre>

<p>The code is not difficult but I would have written these comments to make sure that anyone reading the code would know what my intentions were. Copilot did that and produced code that was both correct and neat.</p>

<p>Below is the initial code for the bar chart that was generated with code completion from the comment.</p>

<pre><code class="language-Python"># plot a bar chart of the dSummer temperature over all years
summer_fig = px.bar(df, x=df.index, y='dSummer', title='Summer Temperature Anomaly')
summer_fig.update_layout(yaxis_title='Temperature Anomaly (°C)')
</code></pre>

<p>I wanted to change the colour of the bars: positive values should be red and negative ones blue. And this is where inline chat comes in. I selected the two lines of code hit &lt;ctrl-i&gt; and in the dialog box asked it to update the layout and change the colours of the bars. It added this line:</p>

<pre><code class="language-Python">summer_fig.update_traces(marker_color=df['dSummer'].apply(lambda x: 'red' if x &gt; 0 else 'blue'))
</code></pre>

<p>This did the job.</p>

<p>Similarly, the original code that was produced for the scatter chart made the scatter dots and the trendline the same colour. For clarity, I wanted the trendline to be a different colour. So, again, I highlighted the chart code and in an inline chat window asked it to change the colour of the line. Here is the resulting code.</p>

<pre><code class="language-Python"># plot a scatter chart with trendline of the dSummer temperature over all years.
scatter_fig = px.scatter(df, x=df.index, y='dSummer', trendline='ols', title='Summer Temperature Anomaly')
scatter_fig.update_layout(xaxis_title='Summer Temperature (°C)', yaxis_title='Temperature Anomaly (°C)')
scatter_fig.update_traces(marker_color='red')
scatter_fig.data[1].line.color = 'blue'  # Change the trendline color to blue
</code></pre>

<p>The rest of the code is fairly trivial Streamlit layout and all produced by Copilot. See the repo for the complete code - the program is well-commented and shows how it was produced.</p>

<p>And, as a matter of interest, it shows that there is a detectable rise in summer temperatures for the period 1949 to 2024.</p>

<h3 id="add-functionality-with-copilot">Add functionality with Copilot</h3>

<p>The app works perfectly well but is rather static. What if we were to add a slider to select the beginning and end years to be plotted?</p>

<p>I used the inline chat interface to make that exact request and Copilot responded perfectly. Again you can see the full code in the repo. Below you can see a close-up screenshot of the slider in action.</p>

<p><img src="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/app-with-slider-detail.png?raw=truee" alt="" /></p>

<h3 id="conclusion">Conclusion</h3>

<p>In this exercise, I have used Copilot to produce code that I could have written myself. But, on occasions, I forget the exact syntax or form of what it is I want to do but, helpfully, Copilot does not. I also make the occasional typo, Copilot doesn’t, and it types much faster than I can. All of this makes writing the code quicker and easier - considerably so.</p>

<p>I’m not sure that I would be entirely happy relying on it to produce code that I didn’t understand myself. But sometimes, it comes up with something that I hadn’t thought of and that is helpful as it increases my knowledge as well as producing a result.</p>

<p>Frankly, Copilot is a boon and I’ll carry on using it, or something like it. And if I run out of the free quota, I would definitely consider forking out the (fairly modest) monthly subscription.</p>

<hr />

<p>Thanks for reading and, if you haven’t tried Copilot yet, I hope this encourages you to give it a try. To read more of my articles and tutorials please see my <a href="DataVizandAI.github.io">website</a> and consider subscribing to my occasional newsletter where I link to new articles. You can also follow me on <a href="https://medium.com/@alan-jones">Medium</a>.</p>

<p><strong>Notes</strong></p>

<ol>
  <li>The complete source code can be found in the <a href="https://github.com/DataVizandAI/public_code/tree/main/dataviz-copilot">Github repo for this article</a>.</li>
  <li>Here is the weather data <a href="https://github.com/alanjones2/uk-historical-weather">GitHub repo</a>.</li>
  <li>All Images and screenshots are by the author unless otherwise noted.</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Code visualizations quickly and efficiently with Copilot, Plotly and Streamlit]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/Untitled.png?raw=true" /><media:content medium="image" url="https://github.com/DataVizandAI/public_code/blob/main/dataviz-copilot/images/Untitled.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AI for BI: Transform Customer Feedback into Actionable Insights with CrewAI and Streamlit</title><link href="http://localhost:4000/2024/12/18/custfb-to-streamlit.html" rel="alternate" type="text/html" title="AI for BI: Transform Customer Feedback into Actionable Insights with CrewAI and Streamlit" /><published>2024-12-18T00:00:00+01:00</published><updated>2024-12-18T00:00:00+01:00</updated><id>http://localhost:4000/2024/12/18/-custfb-to-streamlit</id><content type="html" xml:base="http://localhost:4000/2024/12/18/custfb-to-streamlit.html"><![CDATA[<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/chartblue.png?raw=true" alt="" /></p>

<p><em>Based on Image by <a href="https://pixabay.com/users/colibrie-15745216/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=9126721">Temel</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=9126721">Pixabay</a></em></p>

<p>New AI agent tools have made automating data analysis remarkably simple. When combined with a visualisation platform like Streamlit, it is a simple task to create a visually compelling business reporting app.</p>

<p>In this tutorial, we will focus on analysing customer feedback. This analysis and a good understanding of customer sentiment are essential to ensure products meet expectations and that quality concerns are addressed. Products perceived as poor quality simply won’t sell.</p>

<p>However, analysing customer feedback can involve processing a large volume of unstructured data—a task that can be daunting. This is where large language models excel, making it possible to extract meaningful insights from this data.</p>

<p>Our first step is to clarify the objective.</p>

<p>Imagine we have a list of customer feedback messages about products from an online retailer. Our goal is to generate an executive report that highlights top-performing products, identifies issues with underperforming ones, and includes compelling visualizations of customer sentiment.</p>

<p>We are going to use CrewAI to orchestrate a handful of AI agents that will structure the data, analyse it, create an insightful report and finally, build a Streamlit app to present the results.</p>

<p>It will look like the screenshot, below.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/Screenshot-fb-reporter-app.png?raw=true" alt="" /></p>

<p>First, we need to define precisely what we want to do.</p>

<p>I have a list of fictional customer feedback messages about products from an online retailer. The messages are in Markdown format. I want to generate an executive report that highlights products that perform well, identifies issues with those that perform badly and includes some interactive charts on customer sentiment. And I want all of this to be in an interactive web app.</p>

<p>So, let’s define the steps we need to take.</p>

<h3 id="defining-the-process">Defining the process</h3>

<p>Here is the list of steps:</p>

<ol>
  <li>
    <p>Convert the raw customer data and create a structured version - probably CSV. This should make further analysis easier and it is something I can use directly in the resulting app.</p>
  </li>
  <li>
    <p>Calculate the sentiment of each customer message and add this to the structured data.</p>
  </li>
  <li>
    <p>Write a report that summarises the data in a table and includes sections that identify the best-performing products, those with quality problems and general issues that need to be addressed. The report should be formatted as Markdown.</p>
  </li>
  <li>
    <p>Create a Streamlit app that displays the report in one column and some interactive charts that show customer satisfaction in a second column.</p>
  </li>
  <li>
    <p>Make the structured customer feedback data available as a table in the app.</p>
  </li>
</ol>

<p>As with my previous article, <a href="https://datavizandai.github.io/2024/11/16/AI4BI-2.html"><em>AI for BI: Building a Business Information Report with CrewAI and OpenAI</em></a>, I used CrewAI and OpenAI to build this software. The reasons are the same, it’s not because they are necessarily the best technical solutions for this problem but they are convenient, easy to use and they do the job.</p>

<p>I used a Jupyter Notebook to write the analysis code, so most of the code you see below can be written directly into a notebook cell in the order it is presented. (To create a standalone app, simply concatenate  the cells.)</p>

<p>The reporter program in Streamlit is separate and is created by the AI. You will find all of the code and data in my GitHub repo.</p>

<p>As we will use the OpenAI API, you need an API key which should be accessible as an environment variable. If it is not yet stored as an environment variable, you can run the following code block first to ensure it is.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Omit this if your API key is already set as an environment variable

import os
os.environ["OPENAI_API_KEY"] = "your api key"
</code></pre></div></div>

<p>OpenAI will charge you for using their LLM. However, running the code below should cost no more than a few cents (but you <strong>MUST</strong> keep an eye on your usage in the OpenAI dashboard — things go wrong sometimes! It is also a good idea to set a monthly limit on your spending.)). The CrewAI software that we use is open source and costs nothing.</p>

<p>Let’s get on with the coding.</p>

<h3 id="writing-the-code">Writing the code</h3>

<p>I’ve outlined the steps that we will go through, above. These can be grouped into three stages: convert the raw data to CSV, write a report and create a Streamlit app. We will define agents and tasks for each stage and save the results. So we’ll end up with three files, the structured data in a CSV file, the report in a Markdown file and the Streamlit app.</p>

<p>There are two advantages to saving the intermediate files. The first is that, if we wish, we can run each of the three stages independently of the others. If we want to tweak the report’s structure, for example, there is no need to re-create the CSV file, we can use one we prepared earlier. And if the Streamlit app needs work it can be done independently of the rest of the coding. The second advantage is that the resulting app can use these files.</p>

<p>This is how we shall proceed but, before we get to the main code, a bit of setting up is required.</p>

<p>We need to import stuff from CrewAI and set the LLM model. As I said before, CrewAI defaults to using the OpenAI API so, as long as we have an API key, all we need to do is set the model we want to use in the variable <code class="language-plaintext highlighter-rouge">llm</code>. I have also set the <em>temperature</em> to zero. This reduces the randomness for a more consistent response.</p>

<p>I’ve also set a flag, <code class="language-plaintext highlighter-rouge">DEBUG</code>. This is used to control the verbosity of the agent response. For debugging purposes, it’s a good idea to have a full response to see how the agents process requests. Set <code class="language-plaintext highlighter-rouge">DEBUG</code> to <code class="language-plaintext highlighter-rouge">True</code> for this.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai</span> <span class="kn">import</span> <span class="n">Agent</span><span class="p">,</span> <span class="n">Task</span><span class="p">,</span> <span class="n">Crew</span><span class="p">,</span> <span class="n">LLM</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">LLM</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">temperature</span><span class="o">=</span><span class="mf">0.0</span>
<span class="p">)</span>

<span class="n">DEBUG</span> <span class="o">=</span> <span class="bp">False</span>
</code></pre></div></div>

<p>The next part of the code defines some file names. The first is the raw customer data file. The next two files will store intermediate data for the Streamlit app and the last one is the app itself.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># files
</span>
<span class="n">fb_raw</span> <span class="o">=</span>    <span class="sh">"</span><span class="s">./data/clothes.md</span><span class="sh">"</span>

<span class="n">fb_csv</span> <span class="o">=</span>    <span class="sh">"</span><span class="s">./data/fb.csv</span><span class="sh">"</span>
<span class="n">report_md</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./data/report.md</span><span class="sh">"</span>
<span class="n">st_app</span> <span class="o">=</span>    <span class="sh">"</span><span class="s">./data/report.py</span><span class="sh">"</span>
</code></pre></div></div>

<p>Now we import the CrewAI tools required to read and write files and assign them to variables.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai_tools</span> <span class="kn">import</span> <span class="n">FileReadTool</span><span class="p">,</span> <span class="n">FileWriterTool</span>

<span class="n">file_read_tool</span> <span class="o">=</span> <span class="nc">FileReadTool</span><span class="p">()</span>
<span class="n">file_writer_tool</span> <span class="o">=</span> <span class="nc">FileWriterTool</span><span class="p">()</span>
</code></pre></div></div>

<p>That’s all the preamble code out of the way and we can start on the main program.</p>

<p>CrewAI apps have three essential components: agents, tasks and crews. An agent is the interface to the LLM; it has a particular purpose and can be provided with functions (tools) to help it. A task details something that needs to be done by an agent. Finally, a crew executes a list of tasks and agents and returns a result.</p>

<p>We will define three agents that map onto the stages outlined above. One to create and modify a CSV file, another to write a report in Markdown and a third to build the Streamlit app.</p>

<p>Each agent is provided with one or more tasks and these agent/task combinations will be managed by a <em>crew</em>.</p>

<h3 id="csv-agent">CSV agent</h3>

<p>The first agent’s task is to construct a data structure from the raw Markdown file of customer feedback, then calculate customer sentiment and add that to the data structure.</p>

<p>There is no strict distinction between the attributes of the agent and the task. The task has a <code class="language-plaintext highlighter-rouge">description</code> and the agent has three descriptive attributes <code class="language-plaintext highlighter-rouge">role</code>, <code class="language-plaintext highlighter-rouge">goal</code> and <code class="language-plaintext highlighter-rouge">backstory</code>.  Each contributes towards a meaningful prompt that will be generated by CrewAI but it is ultimately up to us how we use them.</p>

<p>My approach here is to be concise in the agent definition and leave a detailed description of what the agent has to do for the task.</p>

<p>Using this approach, I can use the same agent for more than one task, as we shall see.</p>

<p>Here’s my definition of the CSV agent.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">csv_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Extract, process data and record data</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"""</span><span class="s">Extract data and organise as instructed. 
                The result MUST be valid CSV.</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are a data processing agent</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>And here is the first task.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_CSV</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s"> 
                Analyse </span><span class="sh">'</span><span class="s">{input_file}</span><span class="sh">'</span><span class="s"> the data provided - it is in 
                Markdown format. 
                Your output should be in CSV format. Respond without 
                using Markdown code fences.

                The data is about the range of items in an online shop.
                Following this is a set of messages from customers giving 
                feedback about the products that they have purchased.

                Your task is to:
                   Create a structured file in CSV format that records a 
                   list of all customer feedback messages.
                   Each item in the list should have its columns 
                   populated as follows.

                        </span><span class="sh">"</span><span class="s">Product</span><span class="sh">"</span><span class="s">: insert the name of the item, 
                        </span><span class="sh">"</span><span class="s">Overall_Rating</span><span class="sh">"</span><span class="s">: insert the rating as given by customer, 
                        </span><span class="sh">"</span><span class="s">Issue</span><span class="sh">"</span><span class="s">: insert any issues identified - if no issue can be identified write </span><span class="sh">'</span><span class="s">None</span><span class="sh">'</span><span class="s">, 
                        </span><span class="sh">"</span><span class="s">Review</span><span class="sh">"</span><span class="s">: insert the customer message 
                </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"</span><span class="s">A correctly formatted CSV data structure</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">csv_agent</span><span class="p">,</span>   
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<p>The task is much more explicit and tells the agent exactly what to do. The result should be a CSV structure with four columns.</p>

<p>We also want a fifth column that holds the sentiment of each message. So as not to overcomplicate the prompts, I assign this to a second task.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_sentiment</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s"> 
                Analyse CSV data and calculate the sentiment of each 
                message in the </span><span class="sh">'</span><span class="s">Review</span><span class="sh">'</span><span class="s"> column. Add a new column to the 
                CSV that records that sentiment.
                Your output should be in CSV format. Respond without 
                using Markdown code fences.              
                </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"</span><span class="s">A correctly formatted CSV data file</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">csv_agent</span><span class="p">,</span>   
    <span class="n">output_file</span><span class="o">=</span><span class="n">fb_csv</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Notice that in this task there is an extra attribute <code class="language-plaintext highlighter-rouge">output_file</code>which is set to the file name for the CSV file.  This tells the task to automatically place the result in that file.</p>

<p>Having defined the tasks, we execute them.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">csv_agent</span><span class="p">,</span> <span class="n">csv_agent</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">create_CSV</span><span class="p">,</span> <span class="n">add_sentiment</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="n">DEBUG</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">result1</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">input_file</span><span class="sh">'</span><span class="p">:</span> <span class="n">fb_raw</span><span class="p">})</span>
</code></pre></div></div>

<p>In the crew, there is a list of agents and tasks that will be executed sequentially and when the crew is run, the input file name is set as a parameter. Notice that we have two tasks that use the same agent.</p>

<p>Once complete we will have a CSV file with a structure something like this:</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/customer-feedback-df.png?raw=true" alt="" /></p>

<p>Our next job is to write a report.</p>

<h3 id="report-writing-agent">Report writing agent</h3>

<p>We now have some nicely formatted data that has been enhanced with a customer sentiment assessment and saved in a file for later use.</p>

<p>Our next job is to attempt a deeper analysis of the data with a new agent.</p>

<p>Once again, the agent definition is short and the detail of the work to be done is in the task.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define agent
</span><span class="n">report_generator</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Compile and present results</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"""</span><span class="s">Deliver a polished, structured report on customer 
                satisfaction.
             </span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are an agent, that generates clear, 
                     well-designed and professional reports</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>The task defines precisely what the report should look like and what it should contain.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_report</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s">
            Read the CSV data in </span><span class="sh">'</span><span class="s">{csv_file}</span><span class="sh">'</span><span class="s">, create a summary report.
            The report must consolidate and summarize the customer 
            feedback, it should be in Markdown file format 
            (without ``` fences). 

            The report should be structured as follows:

                # Product review report

                ### Summary

                Insert a Markdown table with a row for every product.
                The table header should look like this:

                | Product | Average Rating | Number of reviews | Positive | Neutral | Negative |

                The should be a row for every product like this:

                | insert the product name here 
                | insert the average of all the rating for this product 
                | insert total number of reviews
                | insert number of positive reviews 
                | insert number of neutral reviews 
                | insert number of negative reviews |

                ### Insights

                #### Best performers

                insert a short report on the products with the best reviews

                #### Underperformers

                insert a short report on the products that are underperforming

                #### Issues

                insert a short report on what steps need to be taken to improve products and sales
    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"""</span><span class="s">A Markdown report file</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">report_generator</span><span class="p">,</span>
    <span class="n">output_file</span> <span class="o">=</span> <span class="n">report_md</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<p>CrewAI does a good job of producing a report and the result is saved in <code class="language-plaintext highlighter-rouge">report_md</code>by executing the following crew.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">report_generator</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">create_report</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="n">DEBUG</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">result2</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">input_file</span><span class="sh">'</span><span class="p">:</span><span class="n">fb_raw</span><span class="p">,</span> <span class="sh">'</span><span class="s">csv_file</span><span class="sh">'</span><span class="p">:</span> <span class="n">fb_csv</span><span class="p">})</span>
</code></pre></div></div>

<p>You can see the full report in my GitHub repo but below is a screenshot of the report part of the app so you can see the sort of thing that is produced.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/report_screen_shot.png?raw=true" alt="" /></p>

<p>Next, we want to generate the app.</p>

<h3 id="streamlit-app">Streamlit app</h3>

<p>I’ve tried to make the app as general as possible so that it will cope with different sets of feedback messages about different products.</p>

<p>Consequently, you only need to run this part of the code once. You’ll then have a Streamlit app that will read the CSV files and Markdown report that we generated earlier or, indeed, ones we create later.</p>

<p>I tackle the app generation in two parts using two tasks but with the same Streamlit generating agent.</p>

<p>Here is the agent definition.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define agent
</span><span class="n">app_generator</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Create or modify a Streamlit program</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"""</span><span class="s">To deliver a valid, Streamlit program  in Python, with 
                meaningful variable and function names.
                Ensure that the output strictly conforms to Python syntax.
                Do not include ``` fencing.
           </span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are an agent that generates clear, well-designed
                     Streamlit programs</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_writer_tool</span><span class="p">,</span> <span class="n">file_read_tool</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Now for the first task. It sets up the basic app and loads the CSV data as a Pandas dataframe. I had to tell it about a (now fairly old) update to the Streamlit API. An earlier version used the decorator <code class="language-plaintext highlighter-rouge">st.cache</code>, this is deprecated and we should use <code class="language-plaintext highlighter-rouge">st.cache_data</code> to cache the CSV data instead. I was quite surprised at this as the new decorator has been around for a while now. However, the problem was easily solved as you can see.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_app</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s">
            Create a Streamlit app as follows:
            - set the display to wide format
            - include the pandas and ploty express libraries
            - create a pandas dataframe called </span><span class="sh">"</span><span class="s">df</span><span class="sh">"</span><span class="s"> from the csv file 
              {csv_file} include all fields
            Note that st.cache is deprecated, use st.cache_data instead.

            Don</span><span class="sh">'</span><span class="s">t save the program to a file.

    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"""</span><span class="s">A valid and syntactically correct Python program</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">app_generator</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Now we have a basic program. In the next task, I give explicit instructions on how to add to this program to display the data and construct the charts.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">add_content</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s">
            Modify the Streamlit code as follows:
            - create two tabs, the first named </span><span class="sh">"</span><span class="s">report_tab</span><span class="sh">"</span><span class="s"> the second 
              named </span><span class="sh">"</span><span class="s">messages_tab</span><span class="sh">"</span><span class="s">
            - in </span><span class="sh">"</span><span class="s">messages_tab</span><span class="sh">"</span><span class="s"> load the dataframe, </span><span class="sh">"</span><span class="s">df</span><span class="sh">"</span><span class="s">, in a st.table 
            - in report_tab create two columns of equal width called 
              </span><span class="sh">"</span><span class="s">report_column</span><span class="sh">"</span><span class="s"> and </span><span class="sh">"</span><span class="s">chart_column</span><span class="sh">"</span><span class="s">
            - in the column </span><span class="sh">"</span><span class="s">report_column</span><span class="sh">"</span><span class="s"> read the report from 
              {report_file} and display it in st.markdown
            - in the </span><span class="sh">"</span><span class="s">chart_column</span><span class="sh">"</span><span class="s"> draw a bar chart of </span><span class="sh">'</span><span class="s">Product</span><span class="sh">'</span><span class="s"> over 
              </span><span class="sh">'</span><span class="s">Overall_Rating</span><span class="sh">'</span><span class="s">
            - in the column </span><span class="sh">"</span><span class="s">chart_column</span><span class="sh">"</span><span class="s"> draw a histogram of </span><span class="sh">'</span><span class="s">Sentiment</span><span class="sh">'</span><span class="s"> 
              with the bars colored by </span><span class="sh">'</span><span class="s">Product</span><span class="sh">'</span><span class="s">

    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"</span><span class="s">A valid and syntactically correct Python program</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">output_file</span> <span class="o">=</span> <span class="n">st_app</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">app_generator</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">]</span>   
<span class="p">)</span>         
</code></pre></div></div>

<p>As before, we run both tasks with a single agent.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">app_generator</span><span class="p">,</span> <span class="n">app_generator</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">create_app</span><span class="p">,</span> <span class="n">add_content</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="n">DEBUG</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">result3</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">csv_file</span><span class="sh">'</span><span class="p">:</span> <span class="n">fb_csv</span> <span class="p">,</span>
                               <span class="sh">'</span><span class="s">report_file</span><span class="sh">'</span><span class="p">:</span> <span class="n">report_md</span><span class="p">})</span>
</code></pre></div></div>

<p>That’s the final stage done. Run the Streamlit app; the result will be the screenshot we saw earlier. Note that with the way I have organised the folders you will need to run Streamlit from the parent folder thus:</p>

<p>` streamlit run data/report.py`</p>

<h3 id="final-thoughts-on-crewai">Final thoughts on CrewAI</h3>

<p>On the whole, I was quite happy with the result. CrewAI is an easy framework to get to grips with although it has a few foibles. There are a lot of descriptive strings that don’t feature in rival products and, while I’m sure that they make sense to the good folk at CrewAI, I’m not entirely convinced that they are all necessary.</p>

<p>However, having said that, I do like the way we can separate a task from an agent, giving the agent a broad description of its capabilities and providing the details of what needs to be done in the task. The other framework I’ve been looking at recently (<a href="https://datavizandai.github.io/2024/11/02/hands-on-swarm.html">Swarm</a>) doesn’t allow that.</p>

<p>I encountered a problem with CrewAI that I may have solved with this feature.</p>

<p>I was getting the following error when running one of the crews:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tool Output:

Error: the Action Input is not a valid key, value dictionary.
 Error parsing LLM output, agent will retry: I did it wrong. 
Invalid Format: I missed the <span class="s1">'Action:'</span> after <span class="s1">'Thought:'</span><span class="nb">.</span> 
I will <span class="k">do </span>right next, and don<span class="s1">'t use a tool I have already used.
</span></code></pre></div></div>

<p>Which is a little difficult to interpret.</p>

<p>This seemed something to do with the complexity of the task because when I split the tasks the problem disappeared.</p>

<p>However, I’m not entirely convinced that my complexity diagnosis was correct as I have been in touch with other developers who have found different solutions to what appears to be the same problem (lowering the temperature, for example - that didn’t work for me). At the time of writing, this is a live issue on the CrewAI GitHub repo.</p>

<p><strong><em>Update: that bug was intermittent and has happened again with the code, above You should keep an eye on the output when running this code. It could loop infinitely and if not stopped you might end up with a large bill.</em></strong></p>

<h3 id="final-thoughts-on-the-app">Final thoughts on the app</h3>

<p>I was very explicit in defining the Streamlit app. You could argue that I was so explicit that I might as well have written the app myself. It’s a simple program, so there is some merit in that.</p>

<p>But I wanted to produce an end-to-end program that produced the final product from the raw data. Perhaps, I could have been a little vaguer with the program definition. Perhaps, that would have resulted in a better program! But apart from the cache decorator problem, the AI produced no errors (and it types much quicker than me!) so I’m not complaining.</p>

<p>The final question is why Streamlit? While it is a perfectly good framework for this sort of app, the real answer is, because ChatGPT-4o mini has the programming knowledge to use it!</p>

<p>Asking ChatGPT to use a newer, or less well-known, framework such as Mesop or Taipy would have produced poorer results. The LLM ‘knows’ less about these products and is more likely to make mistakes and hallucinate.</p>

<hr />

<p>The code and data for this article can be found in this <a href="https://github.com/alanjones2/CrewAIapps">GitHub repo</a> in the <em>AI4BI-fb</em> folder. The resulting charts and report are in the same folder.</p>

<p>All illustrations are by me, the author, unless otherwise stated.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Build an AI-powered app to analyze unstructured feedback, generate insightful reports, and create interactive visualizations]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/chartblue.png?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/chartblue.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AI for BI: Building a Business Information Report with CrewAI and OpenAI</title><link href="http://localhost:4000/2024/11/16/AI4BI-2.html" rel="alternate" type="text/html" title="AI for BI: Building a Business Information Report with CrewAI and OpenAI" /><published>2024-11-16T00:00:00+01:00</published><updated>2024-11-16T00:00:00+01:00</updated><id>http://localhost:4000/2024/11/16/AI4BI-2</id><content type="html" xml:base="http://localhost:4000/2024/11/16/AI4BI-2.html"><![CDATA[<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/AIB!.png?raw=true" alt="" />
<em>Image drawn with ChatGPT by author</em></p>

<p>Business Information applications help businesses use their data as a resource to make critical decisions and we are going to build one with AI.</p>

<p>AI will inevitably play an ever-increasing role in BI tools; more specifically, LLM-based applications will allow BI apps to create visualizations, provide insights through data analysis, and automate business reporting.</p>

<p>So, in this article, we will explore how an  LLM application can help create business information. It won’t be a full-blown BI application, it will, however, automatically create charts and a textual report directly from data.</p>

<p>We will use the OpenAI API via CrewAI to build a program that will show the potential of AI in this field and will result in a simple AI-driven BI application.</p>

<p>I should point out that I am using these particular components as they are convenient - I used CrewAI in a recent <a href="https://datavizandai.github.io/2024/09/28/AI_Agents_vs._AI_Pipelines-3A_a_Practical_Guide_to_Coding_Your_LLM_Application.html">tutorial</a> (if you are new to CrewAI, I would encourage you to read it) and am getting comfortable with it CrewAI uses OpenAI by default, so I’ve gone with that, too.</p>

<p>Another LLM, such as Anthropic’s Claude, Google’s Gemini, etc. would be as effective and, equally, while CrewAI is easy to use, another AI agent framework such as Autogen, or a similar, that supports code execution would be suitable, too.</p>

<p>Here, I am using the open-source offering from CrewAI which is, of course, free to use; OpenAI requires an API key and so you have to sign up and will be charged for use[1].</p>

<h3 id="the-bi-apps-and-data">The BI apps and data</h3>

<p>There are two types of functionality that we are going to explore: creating charts and reporting in text. Both of these require an LLM that can analyse and make sense of data - that shouldn’t be difficult for most modern LLMs.</p>

<p>We’ll create two agents: one that creates charts and one that analyses the data and creates a report.</p>

<p>The data we will use is in CSV format and is entirely fictional. It was created with a ChatGPT and concerns and a company that sells an unlikely range of products (from smart TVs to bed frames) in various regions across the world.</p>

<p>There are three tables. The first records the monthly sales.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/monthly_sales_data.png?raw=true" alt="" /></p>

<p>The second shows the sales of the top-selling products in each region.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_by_region_data.png?raw=true" alt="" /></p>

<p>And the third details the sales of each item.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_product_summary_data.png?raw=true" alt="" /></p>

<p>Is this a realistic set of data that a sales director might find useful? I will freely admit that I don’t have a clue. I don’t own a company and I don’t sell anything, so I cannot claim any expertise in this area.</p>

<p>However, I’m not sure that it matters that much. We can use the data that ChatGPT has given me, create charts, and do some analysis and reporting, whether or not this data is precisely (or even vaguely) typical.</p>

<p>So let’s get started. I’m using Jupyter Lab to code these examples and you can find all the notebooks in my <a href="https://github.com/alanjones2/CrewAIapps">GitHub repo</a> in the <strong>AIBI-3</strong> folder.</p>

<p>Charts are always a feature of BI reporting so let’s start with them.</p>

<h3 id="chart-maker">Chart Maker</h3>

<p>First, we’ll take the CSV files and get the LLM to create charts from it. Below is an example - it was generated with Matplotlib.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/monthly_sales.png?raw=true" alt="" /></p>

<p>We’ll be using the LLM to generate code and CrewAI to run it.</p>

<p>Running LLM-generated code is potentially unsafe because an LLM can produce arbitrary code that is not necessarily what we want (it may hallucinate something that when run could cause damage in the local file system).</p>

<p>For this reason, it either needs to be checked by a human first or run in some sort of sandbox. There are different approaches to this, Autogen, for example, gives you a choice of how you run code but CrewAI opts for safety first and all code is run in a Docker container which is isolated from the the local file system.</p>

<p>So that means you need to have Docker running on your local machine. This is straightforward - just go to the <a href="https://www.docker.com/products/docker-desktop/">Docker website</a>, download the desktop app for your operating system, install it, and run it. You don’t need to create an account or sign in - you don’t even need to know anything about Docker, just let it run and CrewAI will use it.</p>

<p>We will let the LLM decide what charts it would like to create and we’ll see how that goes. I’ve coded each of the code blocks below in a separate Jupyter code cell; together they will build up the complete program.</p>

<p>We will be using the default OpenAI API[1] and that means that your API key should be accessible as an environment variable. If it is stored as an environment variable, you will need to run the following code block first.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your api key</span><span class="sh">"</span>
</code></pre></div></div>

<p>To get started you first import the necessary libraries and set the LLM model.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai</span> <span class="kn">import</span> <span class="n">Agent</span><span class="p">,</span> <span class="n">Task</span><span class="p">,</span> <span class="n">Crew</span>
<span class="n">llm</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span>
</code></pre></div></div>

<p>A CrewAI app consists of a few elements: agents, tasks and a crew that runs the tasks and agents. We’ll see how they are used as we go. (For a more detailed introduction to CrewAI, see my article, <a href="https://alanjones2.github.io/articles/agentpipeline/text/article.html">AI Agents vs. AI Pipelines: a Practical Guide to Coding Your LLM Application</a> which introduces CrewAI.)</p>

<p>In order to do stuff that the LLM is not capable of, we also need to provide the agents with tools - again we’ll see them at work, shortly.</p>

<p>The tools that we need here allow the LLM to read the data files as well as write charts and reports to the local file system. So, next, we import the CrewAI tools required to read and write files.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai_tools</span> <span class="kn">import</span> <span class="n">FileReadTool</span><span class="p">,</span> <span class="n">FileWriterTool</span>

<span class="n">file_read_tool</span> <span class="o">=</span> <span class="nc">FileReadTool</span><span class="p">()</span>
<span class="n">file_writer_tool</span> <span class="o">=</span> <span class="nc">FileWriterTool</span><span class="p">()</span>
</code></pre></div></div>

<p>Much of the work in a CrewAI app is done by one or more agents. Below, we set up <code class="language-plaintext highlighter-rouge">chart_agent</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define agent
</span>
<span class="n">chart_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Chart creator</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"""</span><span class="s">Read the data provided and create a matplotlib chart from 
                that data.
                If you are given specific instructions on how to draw the 
                chart then follow them, if not then create a chart that 
                best represents the data</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"""</span><span class="s">You aim is to read and analyse sales data and create 
                     a mathplotlib chart</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
        <span class="n">allow_code_execution</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>You can see that this is an object instantiated from the CrewAI <a href="https://docs.crewai.com/concepts/agents">Agent</a> class. The first three parameters are used to create a system prompt - what we expect the agent to do is defined in the <code class="language-plaintext highlighter-rouge">goal</code> and <code class="language-plaintext highlighter-rouge">backstory</code> parameters. And you can also see that we have declared the tools that the LLM can use as well as referring to the LLM that we will be using.</p>

<p>We’ve given the agent instructions that will give it autonomy in what it creates unless it is given specific instructions.</p>

<p>Significantly, we set <code class="language-plaintext highlighter-rouge">allow_code_execution</code> to <code class="language-plaintext highlighter-rouge">True</code>. This implicitly allows the LLM to use its code execution tool and run code in Docker.</p>

<p>I’ve defined the files that we are going to use in a Python <code class="language-plaintext highlighter-rouge">dict</code> - the data files exist already, of course, and the image file is where we want the charts to be saved.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">files</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">data_file_name</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">sales_product_cat.csv</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">chart_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sales_product_summary.png</span><span class="sh">'</span><span class="p">,</span>

    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">data_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">monthly_sales.csv</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">chart_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">monthly_sales.png</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">data_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sales_by_region.csv</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">chart_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sales_by_region.png</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>The next thing to data is to create a Task which further defines what we want to do. It tells the agent to create a chart for a data file and save it in a local file. We also need to specify the appropriate agent (there could be more than one) and the tools that will be necessary.</p>

<p>Lastly, we set up a Crew. This defines the list of agents and the lists of tasks that we want to run (in this case the lists only have one element). The <code class="language-plaintext highlighter-rouge">verbose</code> parameter does what you would expect; when set <code class="language-plaintext highlighter-rouge">True</code> the agent will write all of its thinking to the console. If you don’t want to be inundated with a large amount of text then set this to <code class="language-plaintext highlighter-rouge">False</code>.</p>

<p>Well, almost lastly. We need to set off the crew and collect the result, of course. Often we will use the method <code class="language-plaintext highlighter-rouge">crew.kickoff()</code> but in this case, we have a list of files that we want processed and CrewAI gives us a useful method that will iterate through a list in <code class="language-plaintext highlighter-rouge">crew.kickoff_for_each()</code> and as we see below this takes a list as a parameter.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_chart</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s">Create a chart for {data_file_name} and save it in {chart_file_name}.</span><span class="sh">'</span><span class="s">
                    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"""</span><span class="s">A matplotlib chart</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">chart_agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">]</span>
<span class="p">)</span>

<span class="c1"># Define the crew
</span><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">chart_agent</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">create_chart</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff_for_each</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="n">files</span><span class="p">)</span>
</code></pre></div></div>

<p>Running the crew like this produces an awful lot of text which I am not going to reproduce here but which details the steps that the agent is going through. The sequence of events is this:</p>

<ul>
  <li>
    <p>use the <code class="language-plaintext highlighter-rouge">files_read_tool</code> to read the data file</p>
  </li>
  <li>
    <p>send the data to the LLM to analyse the data and produce the code that creates a Matplotlib chart</p>
  </li>
  <li>
    <p>run the LLM-generated code in Docker</p>
  </li>
  <li>
    <p>use the <code class="language-plaintext highlighter-rouge">file_writer_tool</code> to write the chart to a PNG file in the local file system.</p>
  </li>
</ul>

<p>It will do this for each data file and if you have the Docker window open you will see that it runs the code interpreter image as necessary.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/Screenshot-docker.png?raw=true" alt="" /></p>

<p>As the code is generated by an LLM, we cannot guarantee that it will produce the same result each time. However, it seems fairly consistent. An image is produced for each data file; the Monthly Sales Data can be seen at the beginning of this section and the other two are reproduced below.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_by_region.png?raw=true" alt="" /></p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_product_summary.png?raw=true" alt="" /></p>

<h2 id="an-agent-generated-report">An agent-generated report</h2>

<p>Now we have the charts, let’s move on to generating a report that will be the result of some simple analysis and question-answering by the LLM. This and  links to the previously generated images will then be combined into a Markdown file and this will be the final report.</p>

<p>We need a new agent for this; we’ll call it <code class="language-plaintext highlighter-rouge">data_analysis_agent</code>.</p>

<p>We set up the agent much in the same format as before but, of course, the role, goal and backstory are different. Also, this time, we disable code execution as we do not need it to create a report.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_analysis_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Data Analyser</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"""</span><span class="s">You aim is to read and analyse sales data. You should
                then write a report on sales performance 
                that includes an executive summary.
                </span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are assigned to perform sales analysis for a company</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
        <span class="n">allow_code_execution</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>The task that the agent will be assigned is different this time, of course. The description tells the agent what to do: the first couple of sentences give the agent the files that it will need (the data and the charts) and then there is a list of questions that the LLM should attempt to answer. It is also told where to save the report and that it should be in Markdown format.</p>

<p>Note that the files are also included after the question; the reason for this is that, in an earlier version of the program, the LLM seemed to forget about the chart files and including them again fixes the problem.</p>

<p>Following the task definition we set up the crew and execute it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">write_report</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sa">f</span><span class="sh">"""</span><span class="s">The following contains a set of data files and
                    corresponding charts:
                        </span><span class="si">{</span><span class="n">files</span><span class="si">}</span><span class="s">
                    Write report in Markdown that includes and overview of all
                    of the sales data and incorporate the corresponding charts.

                    If the information is available, or you can calculate it,
                    try and answer the following questions: 
                    1. What has been the overall revenue for the latest month?
                    2. What are the top selling 5 items during the reporting 
                    period?
                    3. In which regions have there been the most sales and 
                    what items are popular those regions?
                    4. What sort of growth has there been over the reporting 
                    period?
                    5. Are there any trends that you can detect?

                    The overview of the data and the corresponding charts from </span><span class="si">{</span><span class="n">files</span><span class="si">}</span><span class="s"> should be included in an appendix.

                    Save the result in the file </span><span class="sh">'</span><span class="s">./report.md</span><span class="sh">'</span><span class="s">.
                    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"""</span><span class="s">A markdown file</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">data_analysis_agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">]</span>
<span class="p">)</span>

<span class="c1"># Define the crew
</span><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">data_analysis_agent</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">write_report</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">()</span>
</code></pre></div></div>

<p>The resulting report is too long to include in the text, so I’ve appended it to the end of the article. However, the program makes a reasonable attempt to answer the questions and faithfully includes the charts.</p>

<p>The report is short and a more sophisticated prompt might well result in something more comprehensive. However, when designing the prompt, one has to be careful not to provide inappropriate hints to the LLM. For example, I cut and pasted some suggestions from a ChatGPT session which included questions about supply chain problems. Of course, there is no way that you could deduce such a problem from the data given but the LLM hallucinated a fictitious supply chain problem to explain a downturn in sales!</p>

<h3 id="conclusion-and-towards-a-more-useful-program">Conclusion and towards a more useful program</h3>

<p>It’s remarkably simple to create a very basic BI report writer like this but many improvements could be made to both the chart creation and the report writing.</p>

<p>This program is pretty generic, it will take any set of CSV files and do its best to interpret them and construct suitable charts. We could tailor it better to a particular application by including a description of the data file in the  <code class="language-plaintext highlighter-rouge">files</code> data structure and we could also add a specification of the chart that we wanted to create - the agent is already primed to expect this but we would need to make some minor changes to incorporate the data description. Both of these measures would help to make sure that the output is more consistent and better meets our needs.</p>

<p>The report writing prompt could also be made more specific to a particular application and expanded to give a longer report. </p>

<p>If we were to take both that prompt and the files data structure out into a separate file, this would allow the program to be tuned for different applications.</p>

<p>This has been a basic foray into using AI to produce a BI report but there is significant room for improvement. Using an external file to specify more detailed data file descriptions and explicit chart specifications would allow non-programmers to tailor the program to their specific needs while maintaining the program’s generic nature. And of course, a Jupyter Notebook is not necessarily the best vehicle for an application that is to be used by non-programmers. But I hope that this has been food for thought.</p>

<hr />

<p>As ever, thanks for reading - I hope that it has been useful. You can see more articles on my <a href="alanjones2.github.io">website</a> and subscribe to my occasional newsletter <a href="technofile.substack.com">here</a>. Most of my stuff is also on <a href="https://medium.com/@alan-jones">Medium</a> (paywalled).</p>

<p>The code and data for this article can be found in this <a href="https://github.com/alanjones2/CrewAIapps">GitHub repo</a> in the AIBI-3 folder. The resulting charts and report are in the same folder.</p>

<h3 id="notes-and-references">Notes and references</h3>

<ol>
  <li>
    <p>If you run the code here you will need an OpenAI account and an API key. Using this means you will be charged. Running the code here should not cost you more than a few 10s on cents but you should always check your expenditure on the OpenAI dashboard.</p>
  </li>
  <li>
    <p>All images and screenshots are by me, the author, unless otherwise stated.</p>
  </li>
  <li>
    <p>Disclaimer: I have no commercial connection with any company mentioned in this article.</p>
  </li>
</ol>

<h3 id="appendix---the-report">Appendix - the report</h3>

<h1 id="sales-performance-report">Sales Performance Report</h1>

<h2 id="executive-summary">Executive Summary</h2>

<p>This report analyzes the sales performance of the company over the reporting period, highlighting overall revenue, top-selling items, regional performance, growth trends, and notable observations. The analysis is based on sales data for various product categories, monthly sales figures, and regional performance metrics.</p>

<h2 id="sales-overview">Sales Overview</h2>

<ol>
  <li>
    <p><strong>Overall Revenue for Latest Month:</strong></p>

    <ul>
      <li><strong>August Total Revenue:</strong> $4,000,000</li>
    </ul>
  </li>
  <li>
    <p><strong>Top Selling 5 Items:</strong></p>

    <ul>
      <li>
        <ol>
          <li>Smartphone - $1,200,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Laptop - $850,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Smart TV - $450,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Refrigerator - $400,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Washing Machine - $200,000</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Regions with Most Sales:</strong></p>

    <ul>
      <li><strong>North America:</strong>
        <ul>
          <li>Total Revenue: $1,500,000</li>
          <li>Top-Selling Product: Smartphone (800 units)</li>
        </ul>
      </li>
      <li><strong>Europe:</strong>
        <ul>
          <li>Total Revenue: $1,200,000</li>
          <li>Top-Selling Product: Laptop (600 units)</li>
        </ul>
      </li>
      <li><strong>Asia-Pacific:</strong>
        <ul>
          <li>Total Revenue: $800,000</li>
          <li>Top-Selling Product: Smart TV (900 units)</li>
        </ul>
      </li>
      <li><strong>South America:</strong>
        <ul>
          <li>Total Revenue: $350,000</li>
          <li>Top-Selling Product: Refrigerator (300 units)</li>
        </ul>
      </li>
      <li><strong>Africa:</strong>
        <ul>
          <li>Total Revenue: $250,000</li>
          <li>Top-Selling Product: Sofa (150 units)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Growth Over the Reporting Period:</strong></p>

    <ul>
      <li>The overall trend shows a consistent increase in sales. For instance, revenue grew from $3,500,000 in January to $4,000,000 in August, indicating a gradual upward trajectory in sales performance.</li>
    </ul>
  </li>
  <li>
    <p><strong>Trends Detected:</strong></p>

    <ul>
      <li>There has been a steady growth in sales of electronics, particularly smartphones and laptops.</li>
      <li>Seasonality might affect sales, as evidenced by fluctuating monthly performance.</li>
      <li>New product categories, particularly in home appliances and furniture, show promising growth potential.</li>
    </ul>
  </li>
</ol>

<h2 id="appendix">Appendix</h2>

<ul>
  <li>
    <p><strong>Sales by Product Category Chart:</strong></p>

    <p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/AI4BI-3/chart_maker/sales_product_summary.png?raw=true" alt="Product Category Sales" /></p>
  </li>
  <li>
    <p><strong>Monthly Sales Chart:</strong></p>

    <p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/AI4BI-3/chart_maker/monthly_sales.png?raw=true" alt="Monthly Sales" /></p>
  </li>
  <li>
    <p><strong>Sales by Region Chart:</strong></p>

    <p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/AI4BI-3/chart_maker/sales_by_region.png?raw=true" alt="Sales by Region" /></p>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[How to create a simple BI report directly from data]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/CrewAIapps/blob/main/images/digital%20workspace%20for%20an%20AI%20and%20Business%20Intelligence%20(BI)%20tutorial.png?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/CrewAIapps/blob/main/images/digital%20workspace%20for%20an%20AI%20and%20Business%20Intelligence%20(BI)%20tutorial.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AI Agent Orchestration: Hands on with OpenAI Swarm</title><link href="http://localhost:4000/2024/11/02/hands-on-swarm.html" rel="alternate" type="text/html" title="AI Agent Orchestration: Hands on with OpenAI Swarm" /><published>2024-11-02T00:00:00+01:00</published><updated>2024-11-02T00:00:00+01:00</updated><id>http://localhost:4000/2024/11/02/hands-on-swarm</id><content type="html" xml:base="http://localhost:4000/2024/11/02/hands-on-swarm.html"><![CDATA[<p><img src="https://github.com/alanjones2/swarmapps/blob/main/images/swarmtext.png?raw=true" alt="" /></p>

<p>There’s a joke about London buses: you wait for ages for one to come along and suddenly three arrive together. (It is supposed to be a joke but it’s also <a href="[Bus bunching - Wikipedia](https://en.wikipedia.org/wiki/Bus_bunching)">true</a>.)</p>

<p>It’s beginning to feel like that with agent orchestration frameworks. We have solutions from the usual suspects, of course, like LangChain and LlamaIndex, but new products are coming on the market with alarming frequency: CrewAI, MotleyCrew, Autogen, and Atomic Agents are some that I’ve encountered recently but there are more frameworks for which I haven’t even found time to look at the README on GitHub.</p>

<p>Now, from one of the biggest players, OpenAI, comes <strong>Swarm</strong>. And because it’s from OpenAI, I thought I should take a closer look at it. Swarm takes a step back from the sophistication of other products. Rather than present itself as an all-singing, all-dancing solution, it is an experimental, educational framework developed by OpenAI for exploring lightweight multi-agent orchestration. The aim, it seems, is for you to learn how tool-using multi-agent systems work rather than provide a production-ready solution like the products mentioned above.</p>

<p>Its main purpose is to demonstrate the notions of <em>handoffs</em> and <em>routines</em> that are detailed in OpenAI’s <a href="https://cookbook.openai.com/examples/orchestrating_agents">“Orchestrating Agents: Handoffs &amp; Routines”</a> cookbook. These ideas are fundamental to the construction of multi-agent solutions:</p>

<ul>
  <li>
    <p><strong>Routines</strong> can be thought of as a set of instructions (which in the context of AI agents, can be represented by a system prompt), the agent that encompasses it, and the <em>tools</em>  available to the agent. That may sound like quite a lot of stuff but, in Swarm, these are easily coded.</p>
  </li>
  <li>
    <p><strong>Handoffs</strong> are the transfer of control from one agent to another - just like when you phone the bank, the person answering the phone may pass you on to someone more expert in your particular interests. In Swarm different agents will perform different tasks, but, unlike the real world, with Swarm, the new agent has a record of your previous conversations. Handoffs are key to multi-agent systems.</p>
  </li>
</ul>

<p>If you master these concepts you are well on the way to developing multi-agent solutions to complex problems.</p>

<p>Shortly, we will explore the construction of tool-using multi-agent apps in Swarm. But first, maybe we should ask the question, why would you want a multi-agent system, anyway?</p>

<h3 id="why-multi-agent-systems">Why multi-agent systems?</h3>

<p>We all know LLMs hallucinate. They are, after all, just systems that work out the next probable token and, while we hope those tokens are generated from relevant material, we can’t guarantee that. We could, and sometimes do, end up with an entirely fictional response to an LLM query.</p>

<p>It seems clear that the more complex the task you set an LLM, the more likely it is to hallucinate, so breaking down that complexity into smaller tasks and assigning them to different agents may result in a more resilient system.</p>

<p>Furthermore, with a multi-agent system, we can assign different LLMs to different agents and assign different tools to different agents. So, if we have an LLM that is particularly good at code generation, we can create one agent that uses that, while another agent might be better at, say, interpreting the natural language of the user. Working together the agents could provide a better application-generating solution than a single agent that was more general-purpose.</p>

<p>Another consideration is that smaller, more specialist LLMs, might run on smaller less specialist hardware thus allowing local processing for free rather than forking out loads of dosh to large industrial mega-companies (just a thought).</p>

<p>But let’s assume that we do want to create a multi-agent system with Swarm. We’ll start with the basics.</p>

<h3 id="installation">Installation</h3>

<p>I generally start any new project by creating a virtual environment. I use Conda, so for this project, from a command prompt, I opened a new directory and created and activated  a virtual environment called <em>swarm</em>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>swarmapps
<span class="nb">cd </span>swarmapps
conda create <span class="nt">-n</span> swarm <span class="nv">python</span><span class="o">=</span>3.12
conda activate swarm
</code></pre></div></div>

<p>Swarm requires Python 3.10+ (here I’m using 3.12) and can be installed from GitHub using pip:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install git+ssh://git@github.com/openai/swarm.git
</code></pre></div></div>

<p>or</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install git+https://github.com/openai/swarm.git
</code></pre></div></div>

<p>If you want to reproduce my code yourself,  you’ll also have to install <em>wikipedia</em> as this is used in a Python tool and you will also need to install <em>jupyter</em> to run the code.</p>

<p>I use VSCode for my programming[1] and use the command <code class="language-plaintext highlighter-rouge">code .</code> to invoke the editor in the current directory. If you prefer to use Juypter , run <code class="language-plaintext highlighter-rouge">jupyter notebook</code> or <code class="language-plaintext highlighter-rouge">jupyter lab</code> instead. OK, now we’re up and running.</p>

<p>As I used a Jupyter Notebook to write the program code, to follow along you can just pop each piece of code into a new notebook cell (the complete Notebook will also be available on GitHub).</p>

<h3 id="a-first-swarm-program">A first Swarm program</h3>

<p>Bear in mind that to run standard Swarm code you need an OpenAI account and API key. The key should be set as an environment variable and will be picked up by Swarm. This means that you will be charged if you run the code below. You shouldn’t rack up much of a bill with this project - I’ve spent less than a dollar on it, so far,  but you should always make sure that you monitor your expenditure in the OpenAI dashboard.</p>

<p>Before we get to any working code we will need to import Swarm and create a client (as we would with an OpenAI app).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">swarm</span> <span class="kn">import</span> <span class="n">Swarm</span><span class="p">,</span> <span class="n">Agent</span>
<span class="n">client</span> <span class="o">=</span> <span class="nc">Swarm</span><span class="p">()</span>
</code></pre></div></div>

<p>The next thing is to create a basic agent. We’ll give it a name: ‘Agent’ and it will be in the variable <code class="language-plaintext highlighter-rouge">agent </code>(and, yes, you’re right, not a lot of effort went into coming up with those names, and not much for the instructions, either - I wonder if anyone has tried “You are an unhelpful agent”).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">You are a helpful agent.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<p>That is pretty easy. The instructions that we give it will become the system prompt.</p>

<p>Now we can use it.</p>

<p>First, we need to create a message list that we can pass to the agent, which contains the user’s initial message and to which the agent will add its response.</p>

<p>We then invoke the function,<code class="language-plaintext highlighter-rouge">client.run()</code>, passing in the message list and the agent. We record the response is the variable <code class="language-plaintext highlighter-rouge">response</code>.</p>

<p>Here’s the code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is the capital of Portugal</span><span class="sh">"</span><span class="p">}]</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>This is a simple call to the agent, asking a simple question and, as you would expect, getting a simple answer.</p>

<p>The first message is coded as a dictionary with the <code class="language-plaintext highlighter-rouge">"role"</code> set to <code class="language-plaintext highlighter-rouge">"user"</code> and the<code class="language-plaintext highlighter-rouge"> "content"</code> set to the question that we want to ask - in this case, we want to know the capital of Portugal. This message is the only item in the list, <code class="language-plaintext highlighter-rouge">messages</code>. When we pass the message and the agent to the <code class="language-plaintext highlighter-rouge">client.run()</code> function the LLM will append a new message to the list and return a response that includes those messages.</p>

<p>In the last line of the code, we print the content of the last message which is:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The capital of Portugal is Lisbon.
</code></pre></div></div>

<p>So, no problems there but there is one thing that we notice. Swarm is not as sophisticated as other frameworks. We have to hardcode the messages in a list: there are no helper functions as you might find in other frameworks. This, I think, that this is deliberate. The aim of Swarm is for you to understand what you are doing and not hide the functionality behind too many abstractions.</p>

<p>So, that is the basic stuff done. Now we will explore the more interesting aspects of Swarm.</p>

<p>(As a matter of interest did I try changing the prompt to “You are an unhelpful agent” and it responded with “I cannot assist with that” - fair enough! )</p>

<h3 id="handoffs">Handoffs</h3>

<p>Here is an example of a simple handoff from the Swarm docs[2]. We define two agents one speaks English and the other speaks Spanish. Additionally, we define a tool function (that returns the Spanish agent) which we append to the English agent.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">english_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">English Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">You only speak English.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">spanish_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Spanish Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">You only speak Spanish.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">transfer_to_spanish_agent</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Transfer spanish speaking users immediately.</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">spanish_agent</span>

<span class="n">english_agent</span><span class="p">.</span><span class="n">functions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">transfer_to_spanish_agent</span><span class="p">)</span>
</code></pre></div></div>

<p>Below is an example of talking to the English agent in English.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hi. How are you?</span><span class="sh">"</span><span class="p">}]</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">english_agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content
</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>And here is the response that is logical and shows no handoff.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Hello</span><span class="err">!</span> <span class="n">I</span><span class="sh">'</span><span class="s">m just a computer program, so I don</span><span class="sh">'</span><span class="n">t</span> <span class="n">have</span> <span class="n">feelings</span><span class="p">,</span> 
<span class="n">but</span> <span class="n">I</span><span class="sh">'</span><span class="s">m here to help you. How can I assist you today?
</span></code></pre></div></div>

<p>But if you talk to the English agent in Spanish.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hola. ¿Como estás?</span><span class="sh">"</span><span class="p">}]</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">english_agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>The response shows a handoff to the Spanish agent and the response is, of course, in Spanish.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"assistant": "Spanish Agent"}
¡Hola! Estoy bien, gracias. ¿Y tú, cómo estás?
</code></pre></div></div>

<p>This is a simple example and the response shows that handoffs work. However, it has to be said that this is not particularly useful as the agent will normally respond in the same language as the query without the need to handoff to a specialised agent. We’ll see a more useful example later.</p>

<h3 id="tools">Tools</h3>

<p>We’ve seen a simple tool in the handoff above but let’s define a couple more functions that will be used as tools that perform tasks that the agent cannot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">wikipedia</span>

<span class="k">def</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Look up a query in Wikipedia and return the result</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span> <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="n">q</span><span class="p">).</span><span class="n">summary</span>
    <span class="k">except</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">wikipedia_search</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Search for a topic in Wikipedia and return the result</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</code></pre></div></div>

<p>Above there are two functions:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wikipedia_lookup </code>returns a summary of a Wikipedia page</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wikipedia_search </code>returns the result of (of course) a Wikipedia search.</p>
  </li>
</ul>

<p>Both take strings as input parameters and both return strings. The docstring for each gives a brief description of the function. The type hints and the docstrings are useful for the agent to know how to use the tools.</p>

<p>Here are a couple of examples of how the functions can be used. First, the search function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">topics</span> <span class="o">=</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">EU capitals</span><span class="sh">'</span><span class="p">)</span>
<span class="n">topics</span>
</code></pre></div></div>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['European Capital of Culture',
 'List of national capitals',
 'Religion in the European Union',
 'European Union',
 'Vienna Capitals',
 'European Council on Foreign Relations',
 'Crime in London',
 'Crime in Bucharest',
 'Flag of Europe',
 'Ramona Strugariu']
</code></pre></div></div>

<p>It returns a list of results. Now let’s look up the Wikipedia page for one of the results with the lookup function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">entry</span> <span class="o">=</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">topics</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The European Union (EU) is a supranational political and 
economic union of 27 member states that are located... 

etc.
</code></pre></div></div>

<p>The response is only a summary of a Wikipedia page but far too long to include here, so I’ve truncated it but you get the idea.</p>

<p>Now let’s see how we use the tools with an agent.</p>

<h3 id="a-tool-using-agent">A tool-using agent</h3>

<p>Here we define a new agent that incorporates the tools that we used above.</p>

<p>The agent responds to a query by searching for keywords and looking up a suitable entry in Wikipedia. You can see the detailed instructions in the code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wikiagent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are a helpful agent that answers user queries by 
                    finding and analysing information from Wikipedia.
                    You should follow the following sequence:
                      1. Work out what the user is interested in.
                      2. Pick keywords
                      3. Use the lookup tool with the most relevant 
                         keyword
                      4. From the resulting list of results pick the most 
                         relevant to the user query and search for it 
                         using the search tool 
                      5. If you are able provide an answer from that 
                         information, stop and answer, otherwise, start 
                         again from step 2 but with different keywords. 
                  </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">functions</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">,</span> <span class="n">wikipedia_search</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Notice that we have added the functions directly to the agent definition rather than appending them as before.</p>

<p>The agent should use lookup and search to answer the query and then present an answer. The aim of the next prompt is to get the agent thinking. It needs to find the largest city in Scotland and then what the population of that city is.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is the population of the largest city in Scotland</span><span class="sh">"</span><span class="p">}]</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">wikiagent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>The response is less than perfect but, as we shall see, it is still a good demonstration of how the tools are used.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Glasgow is the largest city in Scotland by population, but the specific 
population number isn't provided in the summary. 
You might need to check the most recent data from official sources such 
as the National Records of Scotland for the exact number.
</code></pre></div></div>

<p>We could probably do a little better by adjusting the user and system prompts. But the interesting thing is the process. Here are all the messages:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tool call: [{'id': 'call_DkOUR7CXi3Zr3nLvEESaG96N', 
             'function': {'arguments': '{"q":"Largest city in Scotland"}',
             'name': 'wikipedia_lookup'}, 'type': 'function'}]
Content: None
Content: This list of towns and cities in Scotland with a population of more than 15,000 is ordered by population, as defined and compiled by the National Records of Scotland organisation. Glasgow is the largest city in Scotland by population, whilst the capital city, Edinburgh, is the second largest by population and largest by area (although the Aberdeen and Edinburgh local authority areas contain far more undeveloped land and have a lower population density than the council areas of Dundee and Glasgow; these are the only four city-districts in the country). The city of Stirling has the smallest population amongst Scotland's cities, with an estimated population of just over 37,000 inhabitants. In total, Scotland consists of eight cities, with multiple larger towns, the largest town being Paisley. 
The section "Localities" contains a list of basic populated areas ordered by population. The section "Settlements" is a list of populated urban areas, some of which are composed of more than one locality, and which may span across the boundaries of more than one council area.
All localities are either settlements themselves, or contained within larger settlements. As of 2020, there are 656 localities in Scotland, and 514 settlements (i.e. 142 of the localities combine as elements of larger settlements).
Tool call: [{'id': 'call_FQ5FjV3SvB8mShL56sn7fK35', 
             'function': {'arguments': '{"q":"Glasgow population"}', 
             'name': 'wikipedia_search'}, 
             'type': 'function'}]
Content: None
Content: Glasgow
Tool call: [{'id': 'call_dIrT5i9e9YeLK083yCoLPwe0', 
             'function': {'arguments': '{"q":"Glasgow demographics"}', 
             'name': 'wikipedia_search'}, 
             'type': 'function'}]
Content: Glasgow is the largest city in Scotland by population. To find the exact population size, I'll check the details for Glasgow.
Content: Demographics of Glasgow
Tool call: [{'id': 'call_h2i0ckryAaPW16vUnEpJQzW9', 
             'function': {'arguments': '{"q":"Demographics of Glasgow"}',
             'name': 'wikipedia_lookup'}, 
             'type': 'function'}]
Content: None
Content: Glasgow is the most populous city in Scotland and the fourth most populous city in the United Kingdom.
</code></pre></div></div>

<p>While we haven’t got the answer we were hoping for we can clearly see how the agent uses the different tools in its attempt to work its way to an answer.</p>

<p>Next, we will look at a workflow that demonstrates handoff between agents (and which is a little more successful).</p>

<h3 id="a-simple-workflow-with-one-agent-handing-off-to-another">A simple workflow with one agent handing off to another</h3>

<p>Now we will design a system that does work well. It looks up information about a location from Wikipedia and then passes this information on to a Public Relations agent whose job is to produce a short PR briefing on that location.</p>

<p>In addition, we ask the PR agent to explain how it constructed its response from the original Wikipedia material (this is to make sure that the PR agent really is using the data from the original lookup).</p>

<p>Below, we see the definition of two agents: the first looks up a location, and the second performs the PR task. So that the first agent can handoff to the PR agent, we have defined a tool <code class="language-plaintext highlighter-rouge">transfer_to_pr_agent</code> and included that in the first agent’s definition.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">transfer_to_pr_agent</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">pr_agent</span>

<span class="n">agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are a helpful agent that answers user queries by 
                    finding and analysing information from Wikipedia.
                    You will be given a city or other location and you 
                    must retrieve it</span><span class="sh">'</span><span class="s">s entry on Wikipedia and then hand 
                    over to the PR Agent.</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">functions</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">,</span> <span class="n">transfer_to_pr_agent</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">pr_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">PR Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are an experienced PR copywriter. 
                    Use only the information retrieved from Wikipedia to 
                    write an enthusiastic 100-word summary of the topic 
                    that would be suitable for a promotional campaign.
                    Explain how you used the original material to create 
                    the result</span><span class="sh">"""</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<p>We use it thus:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Paris</span><span class="sh">"</span><span class="p">}]</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>And the response is an upbeat puff piece for Paris. Following that we have the description of how the PR agent used the Wikipedia text to create its result.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Welcome to Paris, the breathtaking capital of France, 
where romance dances in the air and culture knows no 
bounds! As the heart of finance, fashion, and gastronomy 
since the 17th century, Paris shines as the iconic <span class="se">\"</span>City 
of Light,<span class="se">\"</span> home to 2.1 million welcoming residents and a
treasury of art and history. With world-renowned landmarks
like the Louvre, the majestic Seine, and a vibrant arts 
scene, Paris captivates 12 million visitors in its embrace. 
Experience seamless connections through thriving transport 
networks, indulge in epicurean delights, and feel the 
pulse of creativity and innovation in this unparalleled 
metropolis. Paris awaits your discovery!
<span class="p">
---
</span>
I crafted this exciting summary by highlighting key 
aspects from the Wikipedia entry on Paris. The content 
emphasized the city's historic importance as a cultural, 
financial, and gastronomical hub while accentuating its 
renowned symbols like the Louvre and the Seine. The 
population and importance of its transport system, 
alongside the notion of Paris being a vibrant visitor 
destination, were weaved into engaging phrases to capture 
the unique essence of Paris as a global icon.
</code></pre></div></div>

<p>If we look at the complete list of messages we can see the handoff (I’ve truncated some of the output for brevity).</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tool call: [{'id': 'call_5KAWDJeA6vDx0gwPPyFPM0et', 
             'function': {'arguments': '{"q":"Paris"}', 
             'name': 'wikipedia_lookup'}, 
             'type': 'function'}]
Content: None
Content: Paris (French pronunciation: [paʁi] ) is the capital and...

Tool call: [{'id': 'call_ahCllvYoiZR2RXCoTszlHlMO', 
             'function': {'arguments': '{}', 
             'name': 'transfer_to_pr_agent'}, 
             'type': 'function'}]
Content: None
Content: {"assistant": "PR Agent"}
Tool call: None
Content: Welcome to Paris, the breathtaking capital of France...
<span class="p">
---
</span>
I crafted this exciting summary by highlighting key aspects from...
</code></pre></div></div>

<p>You can see that this agent system works well. There is the original lookup from Wikipedia followed by a handoff to the PR agent which then produces the result required.</p>

<p>What more could you ask for? (I can see PR directors rubbing their hands with glee and considering replacing their expensive executives with simple LLM prompts!)</p>

<h3 id="conclusion">Conclusion</h3>

<p>In an attempt to keep things simple, we have used examples that are not particularly functional but demonstrate the processes involved in multi-agent systems. Leading on from that, we learn from this exercise that, unlike programming which is precise and deterministic, prompting an LLM is not and, as with the tool-using example,  we do not necessarily get the result that we want from the prompt that we design.</p>

<p>Nevertheless, I think that we can see how the fundamental elements of routines (agents, prompts and tools)  and handoffs work in Swarm to enable the construction of a useful multi-agent system.</p>

<p>I hope this has been a useful introduction to Swarm. There is much more to it than would fit into an article like this and I would encourage you to look at the docs on GitHub[2] for more details and examples.</p>

<hr />

<p>As ever, thanks for reading, I hope that this quick run through Swarm has been useful. You can see more of my articles on my <a href="alanjones2.github.io">website</a> and can find out when I publish new stuff by subscribing to my occasional <a href="technofile.substack.com">newsletter</a>. Most of my stuff is also on <a href="https://medium.com/@alan-jones">Medium</a> (paywalled).</p>

<p>The code for this article can be found in this <a href="https://github.com/alanjones2/swarmapps">GitHub repo</a>.</p>

<h3 id="notes-and-references">Notes and references</h3>

<ol>
  <li>My personal preference is to use VSCode because I can edit different types of file, Notebooks, Python programs and Markdown files, for example. VSCode also allows me to easily push my code to my GitHub repository. I’ve not kept my eye on Jupyter developments but I realise, now, that you can do all this with Juypter Lab, too, (with the right extensions) but I haven’t explored this as an option, yet.</li>
  <li>You can find the Swarm documentation on <a href="https://github.com/openai/swarm/blob/main/README.md">GitHub</a>. Swarm is MIT-licensed.</li>
  <li>Disclaimer: I have no commercial connection with any company mentioned in this article.</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Build multi-agent systems with Swarm, a back-to-basics framework]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/swarmapps/blob/main/images/swarmtext.png?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/swarmapps/blob/main/images/swarmtext.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>