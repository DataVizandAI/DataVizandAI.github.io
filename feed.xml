<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-13T18:15:46+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Data Visualization, Data Science and AI</title><subtitle>Data Visualization and AI apps for the web using Streamlit, Plotly, Python and Flask. See the articles/tutorials, below - many have the example code on Github.</subtitle><entry><title type="html">AI for BI: Building a Business Information Report with CrewAI and OpenAI</title><link href="http://localhost:4000/2024/11/16/AI4BI-2.html" rel="alternate" type="text/html" title="AI for BI: Building a Business Information Report with CrewAI and OpenAI" /><published>2024-11-16T00:00:00+01:00</published><updated>2024-11-16T00:00:00+01:00</updated><id>http://localhost:4000/2024/11/16/AI4BI-2</id><content type="html" xml:base="http://localhost:4000/2024/11/16/AI4BI-2.html"><![CDATA[<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/AIB!.png?raw=true" alt="" />
<em>Image drawn with ChatGPT by author</em></p>

<p>Business Information applications help businesses use their data as a resource to make critical decisions and we are going to build one with AI.</p>

<p>AI will inevitably play an ever-increasing role in BI tools; more specifically, LLM-based applications will allow BI apps to create visualizations, provide insights through data analysis, and automate business reporting.</p>

<p>So, in this article, we will explore how an  LLM application can help create business information. It won’t be a full-blown BI application, it will, however, automatically create charts and a textual report directly from data.</p>

<p>We will use the OpenAI API via CrewAI to build a program that will show the potential of AI in this field and will result in a simple AI-driven BI application.</p>

<p>I should point out that I am using these particular components as they are convenient - I used CrewAI in a recent <a href="https://datavizandai.github.io/2024/09/28/AI_Agents_vs._AI_Pipelines-3A_a_Practical_Guide_to_Coding_Your_LLM_Application.html">tutorial</a> (if you are new to CrewAI, I would encourage you to read it) and am getting comfortable with it CrewAI uses OpenAI by default, so I’ve gone with that, too.</p>

<p>Another LLM, such as Anthropic’s Claude, Google’s Gemini, etc. would be as effective and, equally, while CrewAI is easy to use, another AI agent framework such as Autogen, or a similar, that supports code execution would be suitable, too.</p>

<p>Here, I am using the open-source offering from CrewAI which is, of course, free to use; OpenAI requires an API key and so you have to sign up and will be charged for use[1].</p>

<h3 id="the-bi-apps-and-data">The BI apps and data</h3>

<p>There are two types of functionality that we are going to explore: creating charts and reporting in text. Both of these require an LLM that can analyse and make sense of data - that shouldn’t be difficult for most modern LLMs.</p>

<p>We’ll create two agents: one that creates charts and one that analyses the data and creates a report.</p>

<p>The data we will use is in CSV format and is entirely fictional. It was created with a ChatGPT and concerns and a company that sells an unlikely range of products (from smart TVs to bed frames) in various regions across the world.</p>

<p>There are three tables. The first records the monthly sales.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/monthly_sales_data.png?raw=true" alt="" /></p>

<p>The second shows the sales of the top-selling products in each region.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_by_region_data.png?raw=true" alt="" /></p>

<p>And the third details the sales of each item.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_product_summary_data.png?raw=true" alt="" /></p>

<p>Is this a realistic set of data that a sales director might find useful? I will freely admit that I don’t have a clue. I don’t own a company and I don’t sell anything, so I cannot claim any expertise in this area.</p>

<p>However, I’m not sure that it matters that much. We can use the data that ChatGPT has given me, create charts, and do some analysis and reporting, whether or not this data is precisely (or even vaguely) typical.</p>

<p>So let’s get started. I’m using Jupyter Lab to code these examples and you can find all the notebooks in my <a href="https://github.com/alanjones2/CrewAIapps">GitHub repo</a> in the <strong>AIBI-3</strong> folder.</p>

<p>Charts are always a feature of BI reporting so let’s start with them.</p>

<h3 id="chart-maker">Chart Maker</h3>

<p>First, we’ll take the CSV files and get the LLM to create charts from it. Below is an example - it was generated with Matplotlib.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/monthly_sales.png?raw=true" alt="" /></p>

<p>We’ll be using the LLM to generate code and CrewAI to run it.</p>

<p>Running LLM-generated code is potentially unsafe because an LLM can produce arbitrary code that is not necessarily what we want (it may hallucinate something that when run could cause damage in the local file system).</p>

<p>For this reason, it either needs to be checked by a human first or run in some sort of sandbox. There are different approaches to this, Autogen, for example, gives you a choice of how you run code but CrewAI opts for safety first and all code is run in a Docker container which is isolated from the the local file system.</p>

<p>So that means you need to have Docker running on your local machine. This is straightforward - just go to the <a href="https://www.docker.com/products/docker-desktop/">Docker website</a>, download the desktop app for your operating system, install it, and run it. You don’t need to create an account or sign in - you don’t even need to know anything about Docker, just let it run and CrewAI will use it.</p>

<p>We will let the LLM decide what charts it would like to create and we’ll see how that goes. I’ve coded each of the code blocks below in a separate Jupyter code cell; together they will build up the complete program.</p>

<p>We will be using the default OpenAI API[1] and that means that your API key should be accessible as an environment variable. If it is stored as an environment variable, you will need to run the following code block first.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your api key</span><span class="sh">"</span>
</code></pre></div></div>

<p>To get started you first import the necessary libraries and set the LLM model.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai</span> <span class="kn">import</span> <span class="n">Agent</span><span class="p">,</span> <span class="n">Task</span><span class="p">,</span> <span class="n">Crew</span>
<span class="n">llm</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span>
</code></pre></div></div>

<p>A CrewAI app consists of a few elements: agents, tasks and a crew that runs the tasks and agents. We’ll see how they are used as we go. (For a more detailed introduction to CrewAI, see my article, <a href="https://alanjones2.github.io/articles/agentpipeline/text/article.html">AI Agents vs. AI Pipelines: a Practical Guide to Coding Your LLM Application</a> which introduces CrewAI.)</p>

<p>In order to do stuff that the LLM is not capable of, we also need to provide the agents with tools - again we’ll see them at work, shortly.</p>

<p>The tools that we need here allow the LLM to read the data files as well as write charts and reports to the local file system. So, next, we import the CrewAI tools required to read and write files.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai_tools</span> <span class="kn">import</span> <span class="n">FileReadTool</span><span class="p">,</span> <span class="n">FileWriterTool</span>

<span class="n">file_read_tool</span> <span class="o">=</span> <span class="nc">FileReadTool</span><span class="p">()</span>
<span class="n">file_writer_tool</span> <span class="o">=</span> <span class="nc">FileWriterTool</span><span class="p">()</span>
</code></pre></div></div>

<p>Much of the work in a CrewAI app is done by one or more agents. Below, we set up <code class="language-plaintext highlighter-rouge">chart_agent</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define agent
</span>
<span class="n">chart_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Chart creator</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"""</span><span class="s">Read the data provided and create a matplotlib chart from 
                that data.
                If you are given specific instructions on how to draw the 
                chart then follow them, if not then create a chart that 
                best represents the data</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"""</span><span class="s">You aim is to read and analyse sales data and create 
                     a mathplotlib chart</span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
        <span class="n">allow_code_execution</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>You can see that this is an object instantiated from the CrewAI <a href="https://docs.crewai.com/concepts/agents">Agent</a> class. The first three parameters are used to create a system prompt - what we expect the agent to do is defined in the <code class="language-plaintext highlighter-rouge">goal</code> and <code class="language-plaintext highlighter-rouge">backstory</code> parameters. And you can also see that we have declared the tools that the LLM can use as well as referring to the LLM that we will be using.</p>

<p>We’ve given the agent instructions that will give it autonomy in what it creates unless it is given specific instructions.</p>

<p>Significantly, we set <code class="language-plaintext highlighter-rouge">allow_code_execution</code> to <code class="language-plaintext highlighter-rouge">True</code>. This implicitly allows the LLM to use its code execution tool and run code in Docker.</p>

<p>I’ve defined the files that we are going to use in a Python <code class="language-plaintext highlighter-rouge">dict</code> - the data files exist already, of course, and the image file is where we want the charts to be saved.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">files</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">data_file_name</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">sales_product_cat.csv</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">chart_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sales_product_summary.png</span><span class="sh">'</span><span class="p">,</span>

    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">data_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">monthly_sales.csv</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">chart_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">monthly_sales.png</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">data_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sales_by_region.csv</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">chart_file_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sales_by_region.png</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">]</span>
</code></pre></div></div>

<p>The next thing to data is to create a Task which further defines what we want to do. It tells the agent to create a chart for a data file and save it in a local file. We also need to specify the appropriate agent (there could be more than one) and the tools that will be necessary.</p>

<p>Lastly, we set up a Crew. This defines the list of agents and the lists of tasks that we want to run (in this case the lists only have one element). The <code class="language-plaintext highlighter-rouge">verbose</code> parameter does what you would expect; when set <code class="language-plaintext highlighter-rouge">True</code> the agent will write all of its thinking to the console. If you don’t want to be inundated with a large amount of text then set this to <code class="language-plaintext highlighter-rouge">False</code>.</p>

<p>Well, almost lastly. We need to set off the crew and collect the result, of course. Often we will use the method <code class="language-plaintext highlighter-rouge">crew.kickoff()</code> but in this case, we have a list of files that we want processed and CrewAI gives us a useful method that will iterate through a list in <code class="language-plaintext highlighter-rouge">crew.kickoff_for_each()</code> and as we see below this takes a list as a parameter.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">create_chart</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s">Create a chart for {data_file_name} and save it in {chart_file_name}.</span><span class="sh">'</span><span class="s">
                    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"""</span><span class="s">A matplotlib chart</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">chart_agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">]</span>
<span class="p">)</span>

<span class="c1"># Define the crew
</span><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">chart_agent</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">create_chart</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff_for_each</span><span class="p">(</span><span class="n">inputs</span><span class="o">=</span><span class="n">files</span><span class="p">)</span>
</code></pre></div></div>

<p>Running the crew like this produces an awful lot of text which I am not going to reproduce here but which details the steps that the agent is going through. The sequence of events is this:</p>

<ul>
  <li>
    <p>use the <code class="language-plaintext highlighter-rouge">files_read_tool</code> to read the data file</p>
  </li>
  <li>
    <p>send the data to the LLM to analyse the data and produce the code that creates a Matplotlib chart</p>
  </li>
  <li>
    <p>run the LLM-generated code in Docker</p>
  </li>
  <li>
    <p>use the <code class="language-plaintext highlighter-rouge">file_writer_tool</code> to write the chart to a PNG file in the local file system.</p>
  </li>
</ul>

<p>It will do this for each data file and if you have the Docker window open you will see that it runs the code interpreter image as necessary.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/Screenshot-docker.png?raw=true" alt="" /></p>

<p>As the code is generated by an LLM, we cannot guarantee that it will produce the same result each time. However, it seems fairly consistent. An image is produced for each data file; the Monthly Sales Data can be seen at the beginning of this section and the other two are reproduced below.</p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_by_region.png?raw=true" alt="" /></p>

<p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/images/AIBI/sales_product_summary.png?raw=true" alt="" /></p>

<h2 id="an-agent-generated-report">An agent-generated report</h2>

<p>Now we have the charts, let’s move on to generating a report that will be the result of some simple analysis and question-answering by the LLM. This and  links to the previously generated images will then be combined into a Markdown file and this will be the final report.</p>

<p>We need a new agent for this; we’ll call it <code class="language-plaintext highlighter-rouge">data_analysis_agent</code>.</p>

<p>We set up the agent much in the same format as before but, of course, the role, goal and backstory are different. Also, this time, we disable code execution as we do not need it to create a report.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_analysis_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Data Analyser</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"""</span><span class="s">You aim is to read and analyse sales data. You should
                then write a report on sales performance 
                that includes an executive summary.
                </span><span class="sh">"""</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are assigned to perform sales analysis for a company</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
        <span class="n">allow_code_execution</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>The task that the agent will be assigned is different this time, of course. The description tells the agent what to do: the first couple of sentences give the agent the files that it will need (the data and the charts) and then there is a list of questions that the LLM should attempt to answer. It is also told where to save the report and that it should be in Markdown format.</p>

<p>Note that the files are also included after the question; the reason for this is that, in an earlier version of the program, the LLM seemed to forget about the chart files and including them again fixes the problem.</p>

<p>Following the task definition we set up the crew and execute it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">write_report</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sa">f</span><span class="sh">"""</span><span class="s">The following contains a set of data files and
                    corresponding charts:
                        </span><span class="si">{</span><span class="n">files</span><span class="si">}</span><span class="s">
                    Write report in Markdown that includes and overview of all
                    of the sales data and incorporate the corresponding charts.

                    If the information is available, or you can calculate it,
                    try and answer the following questions: 
                    1. What has been the overall revenue for the latest month?
                    2. What are the top selling 5 items during the reporting 
                    period?
                    3. In which regions have there been the most sales and 
                    what items are popular those regions?
                    4. What sort of growth has there been over the reporting 
                    period?
                    5. Are there any trends that you can detect?

                    The overview of the data and the corresponding charts from </span><span class="si">{</span><span class="n">files</span><span class="si">}</span><span class="s"> should be included in an appendix.

                    Save the result in the file </span><span class="sh">'</span><span class="s">./report.md</span><span class="sh">'</span><span class="s">.
                    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">"""</span><span class="s">A markdown file</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">data_analysis_agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">file_read_tool</span><span class="p">,</span> <span class="n">file_writer_tool</span><span class="p">]</span>
<span class="p">)</span>

<span class="c1"># Define the crew
</span><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">data_analysis_agent</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">write_report</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">()</span>
</code></pre></div></div>

<p>The resulting report is too long to include in the text, so I’ve appended it to the end of the article. However, the program makes a reasonable attempt to answer the questions and faithfully includes the charts.</p>

<p>The report is short and a more sophisticated prompt might well result in something more comprehensive. However, when designing the prompt, one has to be careful not to provide inappropriate hints to the LLM. For example, I cut and pasted some suggestions from a ChatGPT session which included questions about supply chain problems. Of course, there is no way that you could deduce such a problem from the data given but the LLM hallucinated a fictitious supply chain problem to explain a downturn in sales!</p>

<h3 id="conclusion-and-towards-a-more-useful-program">Conclusion and towards a more useful program</h3>

<p>It’s remarkably simple to create a very basic BI report writer like this but many improvements could be made to both the chart creation and the report writing.</p>

<p>This program is pretty generic, it will take any set of CSV files and do its best to interpret them and construct suitable charts. We could tailor it better to a particular application by including a description of the data file in the  <code class="language-plaintext highlighter-rouge">files</code> data structure and we could also add a specification of the chart that we wanted to create - the agent is already primed to expect this but we would need to make some minor changes to incorporate the data description. Both of these measures would help to make sure that the output is more consistent and better meets our needs.</p>

<p>The report writing prompt could also be made more specific to a particular application and expanded to give a longer report. </p>

<p>If we were to take both that prompt and the files data structure out into a separate file, this would allow the program to be tuned for different applications.</p>

<p>This has been a basic foray into using AI to produce a BI report but there is significant room for improvement. Using an external file to specify more detailed data file descriptions and explicit chart specifications would allow non-programmers to tailor the program to their specific needs while maintaining the program’s generic nature. And of course, a Jupyter Notebook is not necessarily the best vehicle for an application that is to be used by non-programmers. But I hope that this has been food for thought.</p>

<hr />

<p>As ever, thanks for reading - I hope that it has been useful. You can see more articles on my <a href="alanjones2.github.io">website</a> and subscribe to my occasional newsletter <a href="technofile.substack.com">here</a>. Most of my stuff is also on <a href="https://medium.com/@alan-jones">Medium</a> (paywalled).</p>

<p>The code and data for this article can be found in this <a href="https://github.com/alanjones2/CrewAIapps">GitHub repo</a> in the AIBI-3 folder. The resulting charts and report are in the same folder.</p>

<h3 id="notes-and-references">Notes and references</h3>

<ol>
  <li>
    <p>If you run the code here you will need an OpenAI account and an API key. Using this means you will be charged. Running the code here should not cost you more than a few 10s on cents but you should always check your expenditure on the OpenAI dashboard.</p>
  </li>
  <li>
    <p>All images and screenshots are by me, the author, unless otherwise stated.</p>
  </li>
  <li>
    <p>Disclaimer: I have no commercial connection with any company mentioned in this article.</p>
  </li>
</ol>

<h3 id="appendix---the-report">Appendix - the report</h3>

<h1 id="sales-performance-report">Sales Performance Report</h1>

<h2 id="executive-summary">Executive Summary</h2>

<p>This report analyzes the sales performance of the company over the reporting period, highlighting overall revenue, top-selling items, regional performance, growth trends, and notable observations. The analysis is based on sales data for various product categories, monthly sales figures, and regional performance metrics.</p>

<h2 id="sales-overview">Sales Overview</h2>

<ol>
  <li>
    <p><strong>Overall Revenue for Latest Month:</strong></p>

    <ul>
      <li><strong>August Total Revenue:</strong> $4,000,000</li>
    </ul>
  </li>
  <li>
    <p><strong>Top Selling 5 Items:</strong></p>

    <ul>
      <li>
        <ol>
          <li>Smartphone - $1,200,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Laptop - $850,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Smart TV - $450,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Refrigerator - $400,000</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>Washing Machine - $200,000</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Regions with Most Sales:</strong></p>

    <ul>
      <li><strong>North America:</strong>
        <ul>
          <li>Total Revenue: $1,500,000</li>
          <li>Top-Selling Product: Smartphone (800 units)</li>
        </ul>
      </li>
      <li><strong>Europe:</strong>
        <ul>
          <li>Total Revenue: $1,200,000</li>
          <li>Top-Selling Product: Laptop (600 units)</li>
        </ul>
      </li>
      <li><strong>Asia-Pacific:</strong>
        <ul>
          <li>Total Revenue: $800,000</li>
          <li>Top-Selling Product: Smart TV (900 units)</li>
        </ul>
      </li>
      <li><strong>South America:</strong>
        <ul>
          <li>Total Revenue: $350,000</li>
          <li>Top-Selling Product: Refrigerator (300 units)</li>
        </ul>
      </li>
      <li><strong>Africa:</strong>
        <ul>
          <li>Total Revenue: $250,000</li>
          <li>Top-Selling Product: Sofa (150 units)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Growth Over the Reporting Period:</strong></p>

    <ul>
      <li>The overall trend shows a consistent increase in sales. For instance, revenue grew from $3,500,000 in January to $4,000,000 in August, indicating a gradual upward trajectory in sales performance.</li>
    </ul>
  </li>
  <li>
    <p><strong>Trends Detected:</strong></p>

    <ul>
      <li>There has been a steady growth in sales of electronics, particularly smartphones and laptops.</li>
      <li>Seasonality might affect sales, as evidenced by fluctuating monthly performance.</li>
      <li>New product categories, particularly in home appliances and furniture, show promising growth potential.</li>
    </ul>
  </li>
</ol>

<h2 id="appendix">Appendix</h2>

<ul>
  <li>
    <p><strong>Sales by Product Category Chart:</strong></p>

    <p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/AI4BI-3/chart_maker/sales_product_summary.png?raw=true" alt="Product Category Sales" /></p>
  </li>
  <li>
    <p><strong>Monthly Sales Chart:</strong></p>

    <p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/AI4BI-3/chart_maker/monthly_sales.png?raw=true" alt="Monthly Sales" /></p>
  </li>
  <li>
    <p><strong>Sales by Region Chart:</strong></p>

    <p><img src="https://github.com/alanjones2/CrewAIapps/blob/main/AI4BI-3/chart_maker/sales_by_region.png?raw=true" alt="Sales by Region" /></p>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[How to create a simple BI report directly from data]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/CrewAIapps/blob/main/images/digital%20workspace%20for%20an%20AI%20and%20Business%20Intelligence%20(BI)%20tutorial.png?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/CrewAIapps/blob/main/images/digital%20workspace%20for%20an%20AI%20and%20Business%20Intelligence%20(BI)%20tutorial.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AI Agent Orchestration: Hands on with OpenAI Swarm</title><link href="http://localhost:4000/2024/11/02/hands-on-swarm.html" rel="alternate" type="text/html" title="AI Agent Orchestration: Hands on with OpenAI Swarm" /><published>2024-11-02T00:00:00+01:00</published><updated>2024-11-02T00:00:00+01:00</updated><id>http://localhost:4000/2024/11/02/hands-on-swarm</id><content type="html" xml:base="http://localhost:4000/2024/11/02/hands-on-swarm.html"><![CDATA[<p><img src="https://github.com/alanjones2/swarmapps/blob/main/images/swarmtext.png?raw=true" alt="" /></p>

<p>There’s a joke about London buses: you wait for ages for one to come along and suddenly three arrive together. (It is supposed to be a joke but it’s also <a href="[Bus bunching - Wikipedia](https://en.wikipedia.org/wiki/Bus_bunching)">true</a>.)</p>

<p>It’s beginning to feel like that with agent orchestration frameworks. We have solutions from the usual suspects, of course, like LangChain and LlamaIndex, but new products are coming on the market with alarming frequency: CrewAI, MotleyCrew, Autogen, and Atomic Agents are some that I’ve encountered recently but there are more frameworks for which I haven’t even found time to look at the README on GitHub.</p>

<p>Now, from one of the biggest players, OpenAI, comes <strong>Swarm</strong>. And because it’s from OpenAI, I thought I should take a closer look at it. Swarm takes a step back from the sophistication of other products. Rather than present itself as an all-singing, all-dancing solution, it is an experimental, educational framework developed by OpenAI for exploring lightweight multi-agent orchestration. The aim, it seems, is for you to learn how tool-using multi-agent systems work rather than provide a production-ready solution like the products mentioned above.</p>

<p>Its main purpose is to demonstrate the notions of <em>handoffs</em> and <em>routines</em> that are detailed in OpenAI’s <a href="https://cookbook.openai.com/examples/orchestrating_agents">“Orchestrating Agents: Handoffs &amp; Routines”</a> cookbook. These ideas are fundamental to the construction of multi-agent solutions:</p>

<ul>
  <li>
    <p><strong>Routines</strong> can be thought of as a set of instructions (which in the context of AI agents, can be represented by a system prompt), the agent that encompasses it, and the <em>tools</em>  available to the agent. That may sound like quite a lot of stuff but, in Swarm, these are easily coded.</p>
  </li>
  <li>
    <p><strong>Handoffs</strong> are the transfer of control from one agent to another - just like when you phone the bank, the person answering the phone may pass you on to someone more expert in your particular interests. In Swarm different agents will perform different tasks, but, unlike the real world, with Swarm, the new agent has a record of your previous conversations. Handoffs are key to multi-agent systems.</p>
  </li>
</ul>

<p>If you master these concepts you are well on the way to developing multi-agent solutions to complex problems.</p>

<p>Shortly, we will explore the construction of tool-using multi-agent apps in Swarm. But first, maybe we should ask the question, why would you want a multi-agent system, anyway?</p>

<h3 id="why-multi-agent-systems">Why multi-agent systems?</h3>

<p>We all know LLMs hallucinate. They are, after all, just systems that work out the next probable token and, while we hope those tokens are generated from relevant material, we can’t guarantee that. We could, and sometimes do, end up with an entirely fictional response to an LLM query.</p>

<p>It seems clear that the more complex the task you set an LLM, the more likely it is to hallucinate, so breaking down that complexity into smaller tasks and assigning them to different agents may result in a more resilient system.</p>

<p>Furthermore, with a multi-agent system, we can assign different LLMs to different agents and assign different tools to different agents. So, if we have an LLM that is particularly good at code generation, we can create one agent that uses that, while another agent might be better at, say, interpreting the natural language of the user. Working together the agents could provide a better application-generating solution than a single agent that was more general-purpose.</p>

<p>Another consideration is that smaller, more specialist LLMs, might run on smaller less specialist hardware thus allowing local processing for free rather than forking out loads of dosh to large industrial mega-companies (just a thought).</p>

<p>But let’s assume that we do want to create a multi-agent system with Swarm. We’ll start with the basics.</p>

<h3 id="installation">Installation</h3>

<p>I generally start any new project by creating a virtual environment. I use Conda, so for this project, from a command prompt, I opened a new directory and created and activated  a virtual environment called <em>swarm</em>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>swarmapps
<span class="nb">cd </span>swarmapps
conda create <span class="nt">-n</span> swarm <span class="nv">python</span><span class="o">=</span>3.12
conda activate swarm
</code></pre></div></div>

<p>Swarm requires Python 3.10+ (here I’m using 3.12) and can be installed from GitHub using pip:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install git+ssh://git@github.com/openai/swarm.git
</code></pre></div></div>

<p>or</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install git+https://github.com/openai/swarm.git
</code></pre></div></div>

<p>If you want to reproduce my code yourself,  you’ll also have to install <em>wikipedia</em> as this is used in a Python tool and you will also need to install <em>jupyter</em> to run the code.</p>

<p>I use VSCode for my programming[1] and use the command <code class="language-plaintext highlighter-rouge">code .</code> to invoke the editor in the current directory. If you prefer to use Juypter , run <code class="language-plaintext highlighter-rouge">jupyter notebook</code> or <code class="language-plaintext highlighter-rouge">jupyter lab</code> instead. OK, now we’re up and running.</p>

<p>As I used a Jupyter Notebook to write the program code, to follow along you can just pop each piece of code into a new notebook cell (the complete Notebook will also be available on GitHub).</p>

<h3 id="a-first-swarm-program">A first Swarm program</h3>

<p>Bear in mind that to run standard Swarm code you need an OpenAI account and API key. The key should be set as an environment variable and will be picked up by Swarm. This means that you will be charged if you run the code below. You shouldn’t rack up much of a bill with this project - I’ve spent less than a dollar on it, so far,  but you should always make sure that you monitor your expenditure in the OpenAI dashboard.</p>

<p>Before we get to any working code we will need to import Swarm and create a client (as we would with an OpenAI app).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">swarm</span> <span class="kn">import</span> <span class="n">Swarm</span><span class="p">,</span> <span class="n">Agent</span>
<span class="n">client</span> <span class="o">=</span> <span class="nc">Swarm</span><span class="p">()</span>
</code></pre></div></div>

<p>The next thing is to create a basic agent. We’ll give it a name: ‘Agent’ and it will be in the variable <code class="language-plaintext highlighter-rouge">agent </code>(and, yes, you’re right, not a lot of effort went into coming up with those names, and not much for the instructions, either - I wonder if anyone has tried “You are an unhelpful agent”).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">You are a helpful agent.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<p>That is pretty easy. The instructions that we give it will become the system prompt.</p>

<p>Now we can use it.</p>

<p>First, we need to create a message list that we can pass to the agent, which contains the user’s initial message and to which the agent will add its response.</p>

<p>We then invoke the function,<code class="language-plaintext highlighter-rouge">client.run()</code>, passing in the message list and the agent. We record the response is the variable <code class="language-plaintext highlighter-rouge">response</code>.</p>

<p>Here’s the code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is the capital of Portugal</span><span class="sh">"</span><span class="p">}]</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>This is a simple call to the agent, asking a simple question and, as you would expect, getting a simple answer.</p>

<p>The first message is coded as a dictionary with the <code class="language-plaintext highlighter-rouge">"role"</code> set to <code class="language-plaintext highlighter-rouge">"user"</code> and the<code class="language-plaintext highlighter-rouge"> "content"</code> set to the question that we want to ask - in this case, we want to know the capital of Portugal. This message is the only item in the list, <code class="language-plaintext highlighter-rouge">messages</code>. When we pass the message and the agent to the <code class="language-plaintext highlighter-rouge">client.run()</code> function the LLM will append a new message to the list and return a response that includes those messages.</p>

<p>In the last line of the code, we print the content of the last message which is:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The capital of Portugal is Lisbon.
</code></pre></div></div>

<p>So, no problems there but there is one thing that we notice. Swarm is not as sophisticated as other frameworks. We have to hardcode the messages in a list: there are no helper functions as you might find in other frameworks. This, I think, that this is deliberate. The aim of Swarm is for you to understand what you are doing and not hide the functionality behind too many abstractions.</p>

<p>So, that is the basic stuff done. Now we will explore the more interesting aspects of Swarm.</p>

<p>(As a matter of interest did I try changing the prompt to “You are an unhelpful agent” and it responded with “I cannot assist with that” - fair enough! )</p>

<h3 id="handoffs">Handoffs</h3>

<p>Here is an example of a simple handoff from the Swarm docs[2]. We define two agents one speaks English and the other speaks Spanish. Additionally, we define a tool function (that returns the Spanish agent) which we append to the English agent.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">english_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">English Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">You only speak English.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">spanish_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Spanish Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">You only speak Spanish.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">transfer_to_spanish_agent</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">Transfer spanish speaking users immediately.</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">spanish_agent</span>

<span class="n">english_agent</span><span class="p">.</span><span class="n">functions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">transfer_to_spanish_agent</span><span class="p">)</span>
</code></pre></div></div>

<p>Below is an example of talking to the English agent in English.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hi. How are you?</span><span class="sh">"</span><span class="p">}]</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">english_agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content
</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>And here is the response that is logical and shows no handoff.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Hello</span><span class="err">!</span> <span class="n">I</span><span class="sh">'</span><span class="s">m just a computer program, so I don</span><span class="sh">'</span><span class="n">t</span> <span class="n">have</span> <span class="n">feelings</span><span class="p">,</span> 
<span class="n">but</span> <span class="n">I</span><span class="sh">'</span><span class="s">m here to help you. How can I assist you today?
</span></code></pre></div></div>

<p>But if you talk to the English agent in Spanish.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hola. ¿Como estás?</span><span class="sh">"</span><span class="p">}]</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">english_agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>The response shows a handoff to the Spanish agent and the response is, of course, in Spanish.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{"assistant": "Spanish Agent"}
¡Hola! Estoy bien, gracias. ¿Y tú, cómo estás?
</code></pre></div></div>

<p>This is a simple example and the response shows that handoffs work. However, it has to be said that this is not particularly useful as the agent will normally respond in the same language as the query without the need to handoff to a specialised agent. We’ll see a more useful example later.</p>

<h3 id="tools">Tools</h3>

<p>We’ve seen a simple tool in the handoff above but let’s define a couple more functions that will be used as tools that perform tasks that the agent cannot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">wikipedia</span>

<span class="k">def</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Look up a query in Wikipedia and return the result</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span> <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="n">q</span><span class="p">).</span><span class="n">summary</span>
    <span class="k">except</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">wikipedia_search</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Search for a topic in Wikipedia and return the result</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</code></pre></div></div>

<p>Above there are two functions:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wikipedia_lookup </code>returns a summary of a Wikipedia page</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wikipedia_search </code>returns the result of (of course) a Wikipedia search.</p>
  </li>
</ul>

<p>Both take strings as input parameters and both return strings. The docstring for each gives a brief description of the function. The type hints and the docstrings are useful for the agent to know how to use the tools.</p>

<p>Here are a couple of examples of how the functions can be used. First, the search function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">topics</span> <span class="o">=</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sh">'</span><span class="s">EU capitals</span><span class="sh">'</span><span class="p">)</span>
<span class="n">topics</span>
</code></pre></div></div>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['European Capital of Culture',
 'List of national capitals',
 'Religion in the European Union',
 'European Union',
 'Vienna Capitals',
 'European Council on Foreign Relations',
 'Crime in London',
 'Crime in Bucharest',
 'Flag of Europe',
 'Ramona Strugariu']
</code></pre></div></div>

<p>It returns a list of results. Now let’s look up the Wikipedia page for one of the results with the lookup function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">entry</span> <span class="o">=</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">topics</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The European Union (EU) is a supranational political and 
economic union of 27 member states that are located... 

etc.
</code></pre></div></div>

<p>The response is only a summary of a Wikipedia page but far too long to include here, so I’ve truncated it but you get the idea.</p>

<p>Now let’s see how we use the tools with an agent.</p>

<h3 id="a-tool-using-agent">A tool-using agent</h3>

<p>Here we define a new agent that incorporates the tools that we used above.</p>

<p>The agent responds to a query by searching for keywords and looking up a suitable entry in Wikipedia. You can see the detailed instructions in the code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wikiagent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are a helpful agent that answers user queries by 
                    finding and analysing information from Wikipedia.
                    You should follow the following sequence:
                      1. Work out what the user is interested in.
                      2. Pick keywords
                      3. Use the lookup tool with the most relevant 
                         keyword
                      4. From the resulting list of results pick the most 
                         relevant to the user query and search for it 
                         using the search tool 
                      5. If you are able provide an answer from that 
                         information, stop and answer, otherwise, start 
                         again from step 2 but with different keywords. 
                  </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">functions</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">,</span> <span class="n">wikipedia_search</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Notice that we have added the functions directly to the agent definition rather than appending them as before.</p>

<p>The agent should use lookup and search to answer the query and then present an answer. The aim of the next prompt is to get the agent thinking. It needs to find the largest city in Scotland and then what the population of that city is.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">What is the population of the largest city in Scotland</span><span class="sh">"</span><span class="p">}]</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">wikiagent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>The response is less than perfect but, as we shall see, it is still a good demonstration of how the tools are used.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Glasgow is the largest city in Scotland by population, but the specific 
population number isn't provided in the summary. 
You might need to check the most recent data from official sources such 
as the National Records of Scotland for the exact number.
</code></pre></div></div>

<p>We could probably do a little better by adjusting the user and system prompts. But the interesting thing is the process. Here are all the messages:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tool call: [{'id': 'call_DkOUR7CXi3Zr3nLvEESaG96N', 
             'function': {'arguments': '{"q":"Largest city in Scotland"}',
             'name': 'wikipedia_lookup'}, 'type': 'function'}]
Content: None
Content: This list of towns and cities in Scotland with a population of more than 15,000 is ordered by population, as defined and compiled by the National Records of Scotland organisation. Glasgow is the largest city in Scotland by population, whilst the capital city, Edinburgh, is the second largest by population and largest by area (although the Aberdeen and Edinburgh local authority areas contain far more undeveloped land and have a lower population density than the council areas of Dundee and Glasgow; these are the only four city-districts in the country). The city of Stirling has the smallest population amongst Scotland's cities, with an estimated population of just over 37,000 inhabitants. In total, Scotland consists of eight cities, with multiple larger towns, the largest town being Paisley. 
The section "Localities" contains a list of basic populated areas ordered by population. The section "Settlements" is a list of populated urban areas, some of which are composed of more than one locality, and which may span across the boundaries of more than one council area.
All localities are either settlements themselves, or contained within larger settlements. As of 2020, there are 656 localities in Scotland, and 514 settlements (i.e. 142 of the localities combine as elements of larger settlements).
Tool call: [{'id': 'call_FQ5FjV3SvB8mShL56sn7fK35', 
             'function': {'arguments': '{"q":"Glasgow population"}', 
             'name': 'wikipedia_search'}, 
             'type': 'function'}]
Content: None
Content: Glasgow
Tool call: [{'id': 'call_dIrT5i9e9YeLK083yCoLPwe0', 
             'function': {'arguments': '{"q":"Glasgow demographics"}', 
             'name': 'wikipedia_search'}, 
             'type': 'function'}]
Content: Glasgow is the largest city in Scotland by population. To find the exact population size, I'll check the details for Glasgow.
Content: Demographics of Glasgow
Tool call: [{'id': 'call_h2i0ckryAaPW16vUnEpJQzW9', 
             'function': {'arguments': '{"q":"Demographics of Glasgow"}',
             'name': 'wikipedia_lookup'}, 
             'type': 'function'}]
Content: None
Content: Glasgow is the most populous city in Scotland and the fourth most populous city in the United Kingdom.
</code></pre></div></div>

<p>While we haven’t got the answer we were hoping for we can clearly see how the agent uses the different tools in its attempt to work its way to an answer.</p>

<p>Next, we will look at a workflow that demonstrates handoff between agents (and which is a little more successful).</p>

<h3 id="a-simple-workflow-with-one-agent-handing-off-to-another">A simple workflow with one agent handing off to another</h3>

<p>Now we will design a system that does work well. It looks up information about a location from Wikipedia and then passes this information on to a Public Relations agent whose job is to produce a short PR briefing on that location.</p>

<p>In addition, we ask the PR agent to explain how it constructed its response from the original Wikipedia material (this is to make sure that the PR agent really is using the data from the original lookup).</p>

<p>Below, we see the definition of two agents: the first looks up a location, and the second performs the PR task. So that the first agent can handoff to the PR agent, we have defined a tool <code class="language-plaintext highlighter-rouge">transfer_to_pr_agent</code> and included that in the first agent’s definition.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">transfer_to_pr_agent</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">pr_agent</span>

<span class="n">agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are a helpful agent that answers user queries by 
                    finding and analysing information from Wikipedia.
                    You will be given a city or other location and you 
                    must retrieve it</span><span class="sh">'</span><span class="s">s entry on Wikipedia and then hand 
                    over to the PR Agent.</span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">functions</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">,</span> <span class="n">transfer_to_pr_agent</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">pr_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">PR Agent</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"""</span><span class="s">You are an experienced PR copywriter. 
                    Use only the information retrieved from Wikipedia to 
                    write an enthusiastic 100-word summary of the topic 
                    that would be suitable for a promotional campaign.
                    Explain how you used the original material to create 
                    the result</span><span class="sh">"""</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<p>We use it thus:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Paris</span><span class="sh">"</span><span class="p">}]</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">agent</span><span class="o">=</span><span class="n">agent</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">messages</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
</code></pre></div></div>

<p>And the response is an upbeat puff piece for Paris. Following that we have the description of how the PR agent used the Wikipedia text to create its result.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Welcome to Paris, the breathtaking capital of France, 
where romance dances in the air and culture knows no 
bounds! As the heart of finance, fashion, and gastronomy 
since the 17th century, Paris shines as the iconic <span class="se">\"</span>City 
of Light,<span class="se">\"</span> home to 2.1 million welcoming residents and a
treasury of art and history. With world-renowned landmarks
like the Louvre, the majestic Seine, and a vibrant arts 
scene, Paris captivates 12 million visitors in its embrace. 
Experience seamless connections through thriving transport 
networks, indulge in epicurean delights, and feel the 
pulse of creativity and innovation in this unparalleled 
metropolis. Paris awaits your discovery!
<span class="p">
---
</span>
I crafted this exciting summary by highlighting key 
aspects from the Wikipedia entry on Paris. The content 
emphasized the city's historic importance as a cultural, 
financial, and gastronomical hub while accentuating its 
renowned symbols like the Louvre and the Seine. The 
population and importance of its transport system, 
alongside the notion of Paris being a vibrant visitor 
destination, were weaved into engaging phrases to capture 
the unique essence of Paris as a global icon.
</code></pre></div></div>

<p>If we look at the complete list of messages we can see the handoff (I’ve truncated some of the output for brevity).</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tool call: [{'id': 'call_5KAWDJeA6vDx0gwPPyFPM0et', 
             'function': {'arguments': '{"q":"Paris"}', 
             'name': 'wikipedia_lookup'}, 
             'type': 'function'}]
Content: None
Content: Paris (French pronunciation: [paʁi] ) is the capital and...

Tool call: [{'id': 'call_ahCllvYoiZR2RXCoTszlHlMO', 
             'function': {'arguments': '{}', 
             'name': 'transfer_to_pr_agent'}, 
             'type': 'function'}]
Content: None
Content: {"assistant": "PR Agent"}
Tool call: None
Content: Welcome to Paris, the breathtaking capital of France...
<span class="p">
---
</span>
I crafted this exciting summary by highlighting key aspects from...
</code></pre></div></div>

<p>You can see that this agent system works well. There is the original lookup from Wikipedia followed by a handoff to the PR agent which then produces the result required.</p>

<p>What more could you ask for? (I can see PR directors rubbing their hands with glee and considering replacing their expensive executives with simple LLM prompts!)</p>

<h3 id="conclusion">Conclusion</h3>

<p>In an attempt to keep things simple, we have used examples that are not particularly functional but demonstrate the processes involved in multi-agent systems. Leading on from that, we learn from this exercise that, unlike programming which is precise and deterministic, prompting an LLM is not and, as with the tool-using example,  we do not necessarily get the result that we want from the prompt that we design.</p>

<p>Nevertheless, I think that we can see how the fundamental elements of routines (agents, prompts and tools)  and handoffs work in Swarm to enable the construction of a useful multi-agent system.</p>

<p>I hope this has been a useful introduction to Swarm. There is much more to it than would fit into an article like this and I would encourage you to look at the docs on GitHub[2] for more details and examples.</p>

<hr />

<p>As ever, thanks for reading, I hope that this quick run through Swarm has been useful. You can see more of my articles on my <a href="alanjones2.github.io">website</a> and can find out when I publish new stuff by subscribing to my occasional <a href="technofile.substack.com">newsletter</a>. Most of my stuff is also on <a href="https://medium.com/@alan-jones">Medium</a> (paywalled).</p>

<p>The code for this article can be found in this <a href="https://github.com/alanjones2/swarmapps">GitHub repo</a>.</p>

<h3 id="notes-and-references">Notes and references</h3>

<ol>
  <li>My personal preference is to use VSCode because I can edit different types of file, Notebooks, Python programs and Markdown files, for example. VSCode also allows me to easily push my code to my GitHub repository. I’ve not kept my eye on Jupyter developments but I realise, now, that you can do all this with Juypter Lab, too, (with the right extensions) but I haven’t explored this as an option, yet.</li>
  <li>You can find the Swarm documentation on <a href="https://github.com/openai/swarm/blob/main/README.md">GitHub</a>. Swarm is MIT-licensed.</li>
  <li>Disclaimer: I have no commercial connection with any company mentioned in this article.</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Build multi-agent systems with Swarm, a back-to-basics framework]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/swarmapps/blob/main/images/swarmtext.png?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/swarmapps/blob/main/images/swarmtext.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hands on Data Visualization with Google Mesop</title><link href="http://localhost:4000/2024/10/26/atavizmesop.html" rel="alternate" type="text/html" title="Hands on Data Visualization with Google Mesop" /><published>2024-10-26T00:00:00+02:00</published><updated>2024-10-26T00:00:00+02:00</updated><id>http://localhost:4000/2024/10/26/atavizmesop</id><content type="html" xml:base="http://localhost:4000/2024/10/26/atavizmesop.html"><![CDATA[<p><img src="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/front.png?raw=true" alt="" /></p>

<p>By combining Mesop’s simple yet powerful UI components with Plotly’s comprehensive charting capabilities, you can build a dynamic, interactive app to showcase data visualizations in Python.</p>

<p>Mesop is a Python-native framework developed for rapid AI and web app development that allows you to build sophisticated interfaces without the need for traditional frontend skills; Plotly is, of course, a well-known and well-used graphing library.</p>

<p>We’ll take these components and build a data visualization app.</p>

<h2 id="mesop">Mesop</h2>

<p>Mesop is not an officially supported Google product but it is well-documented, used internally within Google and is receiving a fair amount of publicity, so I think we can take it seriously. Mesop is an open-source project licensed under the <a href="https://github.com/google/mesop#Apache-2.0-1-ov-file">Apache-2.0 license</a> [1].</p>

<p>Here is a ‘Hello World’ app in Mesop.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">mesop</span> <span class="k">as</span> <span class="n">me</span>

<span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">app</span><span class="p">():</span>
  <span class="n">me</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello World</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><em>Hello World with Mesop</em></p>

<p>As you can see it has a structure with a route defined as a function with a decorator that specifies the endpoint. If you are familiar with Flask, you’ll be at home with Mesop - indeed Mesop is based upon Flask. Look at the Flask equivalent of the code above and you can see the similarities.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">app</span><span class="p">():</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">Hello World</span><span class="sh">"</span>
</code></pre></div></div>

<p><em>Hello World with Flask</em></p>

<p>Unlike Flask, however, Mesop does not use HTML templates. Instead, Mesop provides ready-to-use  UI components, including buttons, menus, tables and other useful components including AI-specific features like a chat interface.</p>

<h2 id="developing-with-mesop">Developing with Mesop</h2>

<p>We are going to develop a multi-page, interactive data visualization application and on the way we’ll introduce various aspects of Mesop that are valuable for developing data visualization apps.</p>

<p>The final app with be an exploration of global CO2 emissions that will use buttons, a drop-down menu, a slider and interactive Plotly charts.  You can see the main page below. There will be two more pages which will look like the thumbnails on the home page and they will contain a bar chart that shows the CO2 emissions by source and a choropleth that shows emissions by country. (The data used in this app is derived from Our World in Data[2] and included in the project repository).</p>

<p><img title="" src="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/appscreenshot.png?raw=true" alt="" data-align="left" /></p>

<p>First, we need to set up the environment.</p>

<p>It’s good practice to use a virtual environment when starting a new project. I use Conda for this so my first step is to go to a command prompt, create a new project directory and create the environment.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> mesop <span class="nv">python</span><span class="o">=</span>3.12
</code></pre></div></div>

<p>That will create a new environment for me that uses Python 3.12 called <em>mesop</em>.</p>

<p>I then activate it, install <em>mesop</em> and run VScode (where I do my programming) from the current directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate mesop
pip <span class="nb">install </span>mesop
code <span class="nb">.</span>
</code></pre></div></div>

<p>If you want to run the code here, you also need to install <em>plotly</em> and <em>pandas</em>.</p>

<p>Mesop apps are web apps. You start them with the command <code class="language-plaintext highlighter-rouge">mesop</code>, e.g.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mesop app1.py
</code></pre></div></div>

<p>After running the code you will see this message:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Running server on: http://localhost:32123
 <span class="k">*</span> Serving Flask app <span class="s1">'mesop.server.server'</span>
 <span class="k">*</span> Debug mode: off
</code></pre></div></div>

<p>Your application is now running on the <code class="language-plaintext highlighter-rouge">localhost </code>port <code class="language-plaintext highlighter-rouge">32123</code>. Open that in your browser and you will see the result - if you run the ‘Hello World example’ above, you’ll see that message on a webpage.</p>

<h3 id="using-mesop-components">Using Mesop components</h3>

<p>We need to know a little more about Mesop to use it effectively. We need to be able to use its UI components, how to process user input and also how to use state variables (something that will be familiar to Taipy or Streamlit users).</p>

<p>So, to get started, let’s look at an app that uses all of these things but is still very simple. Below is a screenshot of a click-counter app that displays the number of times that a button is clicked. Following that is the code.</p>

<p><img src="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/clickcounter.png?raw=true" alt="" /></p>

<p>In this app we have some simple UI components - a header, some text and a button - code that captures clicks on the button, and updates the text, and a class that records the state of the app. Let’s see the code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">mesop</span> <span class="k">as</span> <span class="n">me</span>

<span class="nd">@me.stateclass</span>
<span class="k">class</span> <span class="nc">State</span><span class="p">:</span>
  <span class="n">clicks</span><span class="p">:</span> <span class="nb">int</span>

<span class="k">def</span> <span class="nf">button_click</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">me</span><span class="p">.</span><span class="n">ClickEvent</span><span class="p">):</span>
  <span class="n">state</span> <span class="o">=</span> <span class="n">me</span><span class="p">.</span><span class="nf">state</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
  <span class="n">state</span><span class="p">.</span><span class="n">clicks</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/counter</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">state</span> <span class="o">=</span> <span class="n">me</span><span class="p">.</span><span class="nf">state</span><span class="p">(</span><span class="n">State</span><span class="p">)</span>
  <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sh">"</span><span class="s"># Click counter</span><span class="sh">"</span><span class="p">)</span>
  <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Clicks: </span><span class="si">{</span><span class="n">state</span><span class="p">.</span><span class="n">clicks</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
  <span class="n">me</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">Increment counter</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">,</span> 
            <span class="n">on_click</span><span class="o">=</span><span class="n">button_click</span><span class="p">)</span>
</code></pre></div></div>

<p>This app has three parts and illustrates the main aspects of a Mesop app.  We need somewhere to record the number of clicks and this is done by using a class called <code class="language-plaintext highlighter-rouge">State</code>. That is the first thing that we create and it contains a single integer variable, <code class="language-plaintext highlighter-rouge">clicks</code>.</p>

<p>The second part of the app is a function that updates the record of clicks. This is invoked when the button is pressed and increments the clicks attribute in <code class="language-plaintext highlighter-rouge">state</code> which is an instance of the class <code class="language-plaintext highlighter-rouge">State</code>.</p>

<p>The final part of the app defines the endpoint and the user interface at that endpoint. First, we create a local version of the state object, then we go on to code the UI.</p>

<p>We can see three statements that build the UI. Two markdown strings and a button. The UI components are within the Mesop library and so are preceded with the prefix <code class="language-plaintext highlighter-rouge">me.</code> . <code class="language-plaintext highlighter-rouge">me.markdown()</code> takes a markdown string and renders it on the screen. The first of these is a simple header. The second displays a Python f-string, which allows us to embed the value of <code class="language-plaintext highlighter-rouge">state.clicks</code>. Finally, the button component: it takes three parameters, a label, a type and a reference to an event handler - when the <code class="language-plaintext highlighter-rouge">on_click</code> event occurs, the function <code class="language-plaintext highlighter-rouge">button_click</code> is invoked.</p>

<p>All Mesop components are prefixed with me. and we can just call them in the right order to create our UI. We’ll see more examples of components, later.</p>

<p>But to design a good app we need to think about layout.</p>

<h3 id="mesop-layout">Mesop layout</h3>

<p>The fundamental layout component in a Mesop app is the <em>box</em>. By combining boxes with the appropriate styling, we can create rich layouts using rows and columns, grids, or any arbitrary layout that we want.</p>

<p>Let’s say that, in the Click Counter, we want to put the text and the button in the same row. We can just put them into a box and set its layout to <em>flex</em>, (this is a CSS  attribute that means that the components will be placed on a single line, if possible). We do this by setting the style parameter as below, with the <code class="language-plaintext highlighter-rouge">me.Style()</code> function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sh">"</span><span class="s"># Click counter</span><span class="sh">"</span><span class="p">)</span>
  <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">display</span><span class="o">=</span><span class="sh">"</span><span class="s">flex</span><span class="sh">"</span><span class="p">,</span> <span class="n">gap</span><span class="o">=</span><span class="mi">20</span><span class="p">)):</span>
    <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Clicks: </span><span class="si">{</span><span class="n">state</span><span class="p">.</span><span class="n">clicks</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">me</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">Increment counter</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">,</span> 
            <span class="n">on_click</span><span class="o">=</span><span class="n">button_click</span><span class="p">)</span>
</code></pre></div></div>

<p>This will put the components on the same line (note we set a gap of 20 so there is some space between them.) Alternatively, we could lay the components out as a grid.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">display</span><span class="o">=</span><span class="sh">"</span><span class="s">grid</span><span class="sh">"</span><span class="p">,</span> 
                             <span class="n">grid_template_columns</span><span class="o">=</span><span class="sh">"</span><span class="s">1fr 1fr</span><span class="sh">"</span><span class="p">)):</span>
    <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Clicks: </span><span class="si">{</span><span class="n">state</span><span class="p">.</span><span class="n">clicks</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">me</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">Increment counter</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">,</span> 
            <span class="n">on_click</span><span class="o">=</span><span class="n">button_click</span><span class="p">)</span>  
</code></pre></div></div>

<p>In this code, the number of columns is defined by the number of items in the <code class="language-plaintext highlighter-rouge">grid_template_column</code> string. And the values define the relative widths of the columns. So, “1 fr 1fr” means two columns of equal width, whereas “2fr 1fr 1fr” would mean that there are three columns with the first one being twice the width of the other two.</p>

<p>Writing lots of style parameters for each box that you use can get quite tedious and, since It’s quite a good idea to limit the number of styles that you use, defining them once and then reusing them is a good idea. Below I have defined a style that I will use as the default for future layouts.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define a style
</span><span class="n">BLOCK_STYLE</span> <span class="o">=</span> <span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span>
              <span class="n">padding</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="n">Padding</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span>
              <span class="n">background</span><span class="o">=</span><span class="sh">"</span><span class="s">white</span><span class="sh">"</span><span class="p">,</span>
              <span class="n">width</span><span class="o">=</span><span class="sh">"</span><span class="s">100%</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">)</span>

 <span class="c1"># and use it
</span> <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="n">BLOCK_STYLE</span><span class="p">):</span>
   <span class="c1"># components here
</span></code></pre></div></div>

<p>This ensures that the width of the box fills the width of the window but that there is a 12-pixel padding around it and that the background is white. Now everything inside that box will use that style unless the style parameters are overridden and we can reuse the style as I do on the three pages that will make up our app.</p>

<p>There is a lot more to styling than this. The parameters that are set in <code class="language-plaintext highlighter-rouge">me.Style()</code> are equivalent to CSS styles and there are lots of them, so I’ve limited what I shall cover here to what we will need for this little project.</p>

<h2 id="data-visualization-app">Data Visualization App</h2>

<p>We could talk about Mesop components and layouts for a very long time but that is not why we are here. Our aim is to create a data visualization app and we have covered enough of the basics of Mesop to let us get on with it.</p>

<p>The first thing to admit is that Mesop does not natively support Plotly. But don’t panic! This is a very small hurdle that is easily overcome. Mesop does have a <code class="language-plaintext highlighter-rouge">me.plot()</code> component but that is restricted to Matplotlib. Mesop also has a way to create user-defined components and, while I have not looked closely at that, it seems like quite a long-winded way of solving the simple problem of using Plotly.</p>

<p>All you need to use Plotly is a small amount of boiler-plate HTML code that can be reused, as is, for any Plotly project. And since Mesop does have a <code class="language-plaintext highlighter-rouge">me.html()</code> component, that is what I intend to do.</p>

<p>Below is a reusable function that will display a Plotly chart.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">chart_html</span><span class="p">(</span><span class="n">chart</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"""</span><span class="s">
        &lt;div id=</span><span class="sh">'</span><span class="s">figure</span><span class="sh">'</span><span class="s">&gt;&lt;/div&gt;
        &lt;script src=</span><span class="sh">"</span><span class="s">https://cdn.plot.ly/plotly-latest.min.js</span><span class="sh">"</span><span class="s">&gt;&lt;/script&gt;
        &lt;script&gt;
        Plotly.react(</span><span class="sh">'</span><span class="s">figure</span><span class="sh">'</span><span class="s">, </span><span class="si">{</span><span class="n">chart</span><span class="si">}</span><span class="s">);
        &lt;/script&gt;
        &lt;div id=</span><span class="sh">'</span><span class="s">figure</span><span class="sh">'</span><span class="s">&gt;&lt;/div&gt;
        </span><span class="sh">"""</span>
</code></pre></div></div>

<p>It’s simply a bit of HTML into which we insert the Plotly chart that we want to display. We can then use an HTML component to display it on the page.</p>

<p>Let’s see it in use.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">mesop</span> <span class="k">as</span> <span class="n">me</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="c1">#
# Defs for BLOCK_STYLE and chart_html() go here
#
</span>
<span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="n">BLOCK_STYLE</span><span class="p">):</span>
    <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sh">"</span><span class="s"># A Plotly chart</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">data_canada</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">gapminder</span><span class="p">().</span><span class="nf">query</span><span class="p">(</span><span class="sh">"</span><span class="s">country == </span><span class="sh">'</span><span class="s">Canada</span><span class="sh">'"</span><span class="p">)</span>
    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">data_canada</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">pop</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">chart</span> <span class="o">=</span> <span class="nf">chart_html</span><span class="p">(</span><span class="n">fig</span><span class="p">.</span><span class="nf">to_json</span><span class="p">())</span>
    <span class="n">me</span><span class="p">.</span><span class="nf">html</span><span class="p">(</span>
        <span class="nf">chart_html</span><span class="p">(</span><span class="n">chart</span><span class="p">),</span>
        <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">sandboxed</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="sh">"</span><span class="s">100%</span><span class="sh">"</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="sh">"</span><span class="s">500px</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>We have the same structure as before and we put everything in a <code class="language-plaintext highlighter-rouge">me.box()</code>. The Plotly chart is adapted from the Plotly documentation and uses the bundled Gapminder data to display a population chart for Canada. To include this in the HTML code we need to convert it into JSON format, pass it to the previously defined function and render it using a call to <code class="language-plaintext highlighter-rouge">me.html()</code>.</p>

<p>The style setting code is self-explanatory but the <code class="language-plaintext highlighter-rouge">mode </code>parameter needs to be explained. While Mesop allows HTML code it will filter out anything that might be dangerous like JavaScript code. If we need such code we have to set the mode to “sandboxed”. This means that the HTML will be rendered safely in an iframe.</p>

<p>Below is a screenshot of the result.</p>

<p><img src="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/plotlychart.png?raw=true" alt="" /></p>

<p>Right, now we have a chart it feels like we are on our way!</p>

<h4 id="co2-data">CO2 Data</h4>

<p>We will be using CO2 emissions data as I’ve already mentioned and to make this easy, I’ve defined a Python class that reads the data and provides methods that will return the required Plotly charts in JSON format. The code for this is included in the project GitHub repository but we won’t go into any detailed explanation of the implementation here (the code is easy to follow). What we need to know is that we can instantiate a CO2 data object and</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">CO2_Data</span> <span class="k">as</span> <span class="n">CO2</span>

<span class="n">co2_data</span> <span class="o">=</span> <span class="n">CO2</span><span class="p">.</span><span class="nc">CO2_Data</span><span class="p">()</span>
<span class="n">bar_chart</span> <span class="o">=</span> <span class="n">co2_data</span><span class="p">.</span><span class="nf">plot_chart</span><span class="p">(</span><span class="sh">"</span><span class="s">Total</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>We will see exactly how it is used later but there are two main methods:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">plot_chart</code>: this returns a bar chart of CO2 emissions from a particular course over time. The sources are ‘Total’, ‘Oil’, ‘Cement’, ‘Flaring’ and ‘Other’ and we need to provide the source as a parameter.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">plot_choro</code>: this returns a world map of total CO2 emissions for a particular year with the countries coloured according to the level of emissions. It takes the year as a parameter.</p>
  </li>
</ul>

<p>We also use some attributes that are defined in the class.</p>

<p>We can now concentrate on the UI in Mesop.</p>

<h4 id="application-pages">Application Pages</h4>

<p>I’ll deal with them separately but I’ve coded all the pages in a single file. This is the simplest method but not necessarily the best. If there were more than three pages, I’d probably code each page in its own file. Here is the layout for all of the pages.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">home</span><span class="p">():</span>    
    <span class="c1"># Home page code goes here
</span>
<span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/CO2</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">CO2</span><span class="p">():</span>
    <span class="c1"># CO2 sources page code goes here
</span>
<span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/map</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">map</span><span class="p">():</span>
    <span class="c1"># Map page code goes here
</span></code></pre></div></div>

<p>Each page is given a route in the <code class="language-plaintext highlighter-rouge">@me.page</code> decorator and the code for the page is defined in the following function.</p>

<p>We’ll start at the beginning with the home page.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">home</span><span class="p">():</span>    
    <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span> <span class="o">=</span> <span class="n">BLOCK_STYLE</span><span class="p">):</span>       
        <span class="nf">banner</span><span class="p">(</span><span class="sh">'</span><span class="s">World CO2 Emissions</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Explore the graphs below</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span> <span class="sh">"""</span><span class="s">The World</span><span class="sh">'</span><span class="s">s CO2 emissions have been increasing at an alarming rate since the time of the Industrial Revolution. 
                    We demonstrate the extend of those emissions using two data sets:  the first tracks overall emissions and we show those
                    onto a World map. We also show the breakdown of the sources of those emissions in a set of bar graphs.</span><span class="sh">"""</span><span class="p">)</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sh">"</span><span class="s">_Click on the buttons below to see the charts._</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span> <span class="o">=</span> <span class="n">FLEX_STYLE</span><span class="p">):</span>
            <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">():</span>
                <span class="n">me</span><span class="p">.</span><span class="nf">image</span><span class="p">(</span><span class="n">src</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://github.com/alanjones2/mesopapps/blob/main/CO2/images/Co2sources.png?raw=true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">alt</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span>
                    <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="sh">"</span><span class="s">90%</span><span class="sh">"</span><span class="p">)</span>
                <span class="p">)</span>
                <span class="n">me</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">By source</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">'</span><span class="s">flat</span><span class="sh">'</span><span class="p">,</span><span class="n">on_click</span><span class="o">=</span><span class="n">navigate</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="sh">'</span><span class="s">CO2</span><span class="sh">'</span><span class="p">)</span>
            <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">():</span>
                <span class="n">me</span><span class="p">.</span><span class="nf">image</span><span class="p">(</span><span class="n">src</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://github.com/alanjones2/mesopapps/blob/main/CO2/images/Co2country.png?raw=true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">alt</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span>
                    <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="sh">"</span><span class="s">90%</span><span class="sh">"</span><span class="p">),</span>
                <span class="p">)</span>
                <span class="n">me</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">By country</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="sh">'</span><span class="s">flat</span><span class="sh">'</span><span class="p">,</span> <span class="n">on_click</span><span class="o">=</span><span class="n">navigate</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="sh">'</span><span class="s">map</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>The whole thing goes in a <code class="language-plaintext highlighter-rouge">me.box</code> styled with <code class="language-plaintext highlighter-rouge">BLOCK_STYLE</code> and so fills the whole page but includes padding so that the page content does not reach the extremities of the window.</p>

<p>The content is mostly static. We have a banner, some text formatted as Markdown and then boxes that each contain images and a button that will select a new page. These boxes are contained in a third box styled with <code class="language-plaintext highlighter-rouge">FLEX_STYLE</code> which attempts to ensure that the image/button boxes are displayed on the same line.</p>

<p>Most of this is self-explanatory but we need to focus on two things. The first is <code class="language-plaintext highlighter-rouge">banner</code>. This is a function that will be used by all of the pages and is in <code class="language-plaintext highlighter-rouge">utils.py</code> (so this needs to be included). This takes two parameters, a heading and a sub-heading (which can be blank) and is styled with <code class="language-plaintext highlighter-rouge">BANNER_STYLE</code> from <code class="language-plaintext highlighter-rouge">styles.py</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">banner</span><span class="p">(</span><span class="n">head</span><span class="o">=</span><span class="sh">''</span><span class="p">,</span> <span class="n">subhead</span><span class="o">=</span><span class="sh">''</span><span class="p">):</span>
    <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="n">BANNER_STYLE</span><span class="p">):</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span> <span class="sa">f</span><span class="sh">"</span><span class="s"># </span><span class="si">{</span><span class="n">head</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">Navy</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span> <span class="sa">f</span><span class="sh">"</span><span class="s">## </span><span class="si">{</span><span class="n">subhead</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">SteelBlue</span><span class="sh">"</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">banner</span>
</code></pre></div></div>

<p>From a functional point of view, the more important thing to look at is the button code. This allows us to navigate to a new page. It works in the same way as the button we saw in the Click Counter code and calls a function <code class="language-plaintext highlighter-rouge">navigate</code>. But there is an additional parameter <code class="language-plaintext highlighter-rouge">key</code> that we set with a string that represents the page that we want to navigate to. Here in the <code class="language-plaintext highlighter-rouge">navigate</code> function</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">navigate</span><span class="p">(</span><span class="n">event</span><span class="p">:</span> <span class="n">me</span><span class="p">.</span><span class="n">ClickEvent</span><span class="p">):</span>
    <span class="n">match</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span><span class="p">:</span>
        <span class="n">case</span> <span class="sh">"</span><span class="s">CO2</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">me</span><span class="p">.</span><span class="nf">navigate</span><span class="p">(</span><span class="sh">"</span><span class="s">/CO2</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">case</span> <span class="sh">"</span><span class="s">map</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">me</span><span class="p">.</span><span class="nf">navigate</span><span class="p">(</span><span class="sh">"</span><span class="s">/map</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">case</span> <span class="n">_</span><span class="p">:</span>
            <span class="n">me</span><span class="p">.</span><span class="nf">navigate</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>As you can see <code class="language-plaintext highlighter-rouge">key</code> is part of an event object. We read it and depending on its value, use the built-in <code class="language-plaintext highlighter-rouge">me.navigate()</code> function to go to the required page. Each of the other pages also uses the same function to navigate to the <em>home</em> page.</p>

<p>The map page and the CO2 sources page are logically very similar. Here’s the code for the map page.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">on_slider_change</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
   <span class="k">global</span> <span class="n">CO2_map</span>
   <span class="n">State</span><span class="p">.</span><span class="n">year</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
   <span class="n">CO2_map</span> <span class="o">=</span> <span class="n">co2_data</span><span class="p">.</span><span class="nf">plot_choro</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>   

<span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/map</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">map</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span> <span class="o">=</span> <span class="n">BLOCK_STYLE</span><span class="p">):</span>
        <span class="nf">banner</span><span class="p">(</span> <span class="sa">f</span><span class="sh">"</span><span class="s">CO2 Emissions by country for </span><span class="si">{</span><span class="n">State</span><span class="p">.</span><span class="n">year</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">slider</span><span class="p">(</span><span class="n">on_value_change</span><span class="o">=</span><span class="n">on_slider_change</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">State</span><span class="p">.</span><span class="n">year</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="sh">'</span><span class="s">2020</span><span class="sh">'</span><span class="p">,</span> <span class="nb">min</span><span class="o">=</span><span class="sh">'</span><span class="s">1900</span><span class="sh">'</span><span class="p">,</span> <span class="n">discrete</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

        <span class="n">me</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">Home page</span><span class="sh">"</span><span class="p">,</span> <span class="n">on_click</span><span class="o">=</span><span class="n">navigate</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="sh">'</span><span class="s">home</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">html</span><span class="p">(</span>
            <span class="nf">chart_html</span><span class="p">(</span><span class="n">CO2_map</span><span class="p">),</span>
            <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">sandboxed</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="sh">"</span><span class="s">100%</span><span class="sh">"</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="sh">"</span><span class="s">500px</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p><img src="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/Co2country.png?raw=true" alt="" /></p>

<p>Another box and another banner. But then a <code class="language-plaintext highlighter-rouge">me.slider</code>function with parameters whose use is clear. When it changes the global variable <code class="language-plaintext highlighter-rouge">CO2_map</code> is updated and this is displayed via the <code class="language-plaintext highlighter-rouge">me.html()</code> function and our little utility <code class="language-plaintext highlighter-rouge">chart_html</code> . We also see that the button uses the navigate function to return to the <em>home</em> page when pressed.</p>

<p>The rest of the code is similar to things we’ve seen before.</p>

<p>That leaves the CO2 Sources page which uses a drop-down menu to select the source to be displayed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">on_selection_change</span><span class="p">(</span><span class="n">select</span><span class="p">):</span>
   <span class="k">global</span> <span class="n">bar_chart</span>
   <span class="n">bar_chart</span> <span class="o">=</span> <span class="n">co2_data</span><span class="p">.</span><span class="nf">plot_chart</span><span class="p">(</span><span class="n">select</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="nd">@me.page</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/CO2</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">CO2</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">me</span><span class="p">.</span><span class="nf">box</span><span class="p">(</span><span class="n">style</span> <span class="o">=</span> <span class="n">BLOCK_STYLE</span><span class="p">):</span>
        <span class="nf">banner</span><span class="p">(</span> <span class="sh">"</span><span class="s">CO2 Emissions by source since the mid-19th Century</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">select</span><span class="p">(</span>
            <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Select a CO2 Source</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">options</span><span class="o">=</span><span class="p">[</span>
            <span class="n">me</span><span class="p">.</span><span class="nc">SelectOption</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Total</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">Total</span><span class="sh">"</span><span class="p">),</span>
            <span class="n">me</span><span class="p">.</span><span class="nc">SelectOption</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Coal</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">Coal</span><span class="sh">"</span><span class="p">),</span>
            <span class="n">me</span><span class="p">.</span><span class="nc">SelectOption</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Oil</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">Oil</span><span class="sh">"</span><span class="p">),</span>
            <span class="n">me</span><span class="p">.</span><span class="nc">SelectOption</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Cement</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">Cement</span><span class="sh">"</span><span class="p">),</span>
            <span class="n">me</span><span class="p">.</span><span class="nc">SelectOption</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Flaring</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">Flaring</span><span class="sh">"</span><span class="p">),</span>
            <span class="n">me</span><span class="p">.</span><span class="nc">SelectOption</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Other</span><span class="sh">"</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">Other</span><span class="sh">"</span><span class="p">),</span>      
            <span class="p">],</span>
            <span class="n">on_selection_change</span><span class="o">=</span><span class="n">on_selection_change</span><span class="p">,</span>
            <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">240</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">70</span><span class="p">),</span>
        <span class="p">)</span>

        <span class="n">me</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">Home page</span><span class="sh">"</span><span class="p">,</span> <span class="n">on_click</span><span class="o">=</span><span class="n">navigate</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="sh">'</span><span class="s">home</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">me</span><span class="p">.</span><span class="nf">html</span><span class="p">(</span>
            <span class="nf">chart_html</span><span class="p">(</span><span class="n">bar_chart</span><span class="p">),</span>
            <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">sandboxed</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">style</span><span class="o">=</span><span class="n">me</span><span class="p">.</span><span class="nc">Style</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="sh">"</span><span class="s">100%</span><span class="sh">"</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="sh">"</span><span class="s">500px</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>
</code></pre></div></div>

<p><img src="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/Co2sources.png?raw=true" alt="" /></p>

<p>The logic is the same as before so I won’t go into detail. The <code class="language-plaintext highlighter-rouge">me.select</code> function has different parameters to the slider but the main thing to notice is that the possible selections are defined as a list of <code class="language-plaintext highlighter-rouge">me.SelectOption()</code> and that each of these has a label (that will be displayed) and a value which is passed to the change function.</p>

<h3 id="conclusion">Conclusion</h3>

<p>There we have the complete app based on Mesop.</p>

<p>I’ve tried to make this as clear as I can without embedding the whole of the code into the article. If it is not absolutely clear how we put together all of the sections then you should refer to the code in the GitHub repo and read the README.md file there.</p>

<p>So, what do we think about Mesop as a vehicle for creating visualisation app? All new frameworks represent a learning curve but Mesop is not that difficult if you are familiar with other Flask-based frameworks such as Dash or <a href="https://medium.com/towards-data-science/a-data-dashboard-in-pure-python-with-taipy-bdb164a62b8b">Taipy</a>.</p>

<p>Mesop’s components seem easy to use but while the layout is simple, it can get a bit verbose. This is down to the fact that the layout parameters are basically a mirror of CSS attributes that you find in HTML. However, the ability to define layouts and use them multiple times is a useful way of reducing verbosity and providing consistency.</p>

<p>I’ve found working with Mesop for the first time a useful experience and I am likely to use it again. I might not code everything in the same way next time (I’m always uncomfortable with using global variables, for example, and I might put pages in separate files, in the future).</p>

<p>Will it become a properly supported product in the future? I have no inside information but my guess would be yes. Google seem to have put a fair amount of effort into developing it, documenting it and talking about it and it would be a shame if it disappeared.</p>

<hr />

<p>As ever, thanks for reading, I hope that this stroll through Mesop’s abilities has been useful. All the code and data are in my <a href="https://github.com/alanjones2/mesopapps">GitHub repo</a> — the app code is in the CO2 folder and the smaller experiments are in the samples folder.You can see more of my articles on my <a href="alanjones2.github.io">website </a> and can find out when I publish new stuff by subscribing to my occasional <a href="technofile.substack.com">newsletter</a>. Most of my stuff is also on <a href="https://medium.com/@alan-jones">Medium </a>(paywalled).</p>

<hr />

<h3 id="notes-and-references">Notes and references</h3>

<ol>
  <li>The Mesop GitHub repository is <a href="[GitHub - google/mesop: Rapidly build AI apps in Python](https://github.com/google/mesop)">here </a>and the official docs are <a href="[Mesop](https://google.github.io/mesop/)">here</a>.</li>
  <li>The data used in this article is derived from <a href="https://ourworldindata.org/">Our World in Data</a>. OWID publishes articles and data about the most pressing problems that the world faces. All its content is open source and its data is downloadable — see <a href="https://ourworldindata.org/about">About — Our World in Data</a> for details.</li>
  <li>The title image was created with the help of DALL-E the others are all screenshots by me, the author.</li>
  <li>I have no connection with Google other than as a user.</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Google Mesop is an easy-to-use Python UI framework. We see how to use it to create Data Visualization app with Plotly.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/front.png?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/mesopapps/blob/main/CO2/images/front.png?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Build a Private AI Agent with Ollama and LlamaIndex</title><link href="http://localhost:4000/2024/10/18/ollama-agent.html" rel="alternate" type="text/html" title="How to Build a Private AI Agent with Ollama and LlamaIndex" /><published>2024-10-18T00:00:00+02:00</published><updated>2024-10-18T00:00:00+02:00</updated><id>http://localhost:4000/2024/10/18/ollama-agent</id><content type="html" xml:base="http://localhost:4000/2024/10/18/ollama-agent.html"><![CDATA[<p><img src="/assets/images/llamaindex/db5withllama.png" alt="" /></p>

<p><em>Image by author with a little help from Microsoft Bing Image Creator (Ok, ok… a  lot of help)</em></p>

<p>Running an LLM locally with Ollama is not difficult and implementing an agent with LlamaIndex is also straightforward. But don’t expect the same performance you get from Anthropic, OpenAI or Google.</p>

<p>Industrial strength AI runs on powerful servers with lots of resources. Nothing that lives on your desk can compete with that sort of power, so while we will attempt to implement something interesting and, hopefully, useful that will run on your day-to-day laptop, don’t expect miracles.</p>

<p>We’ll use Ollama to run a local LLM. It’s not the only choice, for example, <em>LM Studio</em> and <em>GPT4All</em> are possible alternatives, but Ollama works nicely with LlamaIndex, so we’ll go with that.</p>

<p>Likewise, LlamaIndex is not the only way to implement an AI agent but it’s pretty easy. I’ve already explored other alternatives: <a href="https://medium.com/towards-data-science/ai-agents-vs-ai-pipelines-a-practical-guide-to-coding-your-llm-application-167e3c9a654c">AI Agents vs. AI Pipelines: A Practical Guide to Coding Your LLM Application</a>, which is based on <em>CrewAI</em>, and <a href="https://medium.com/ai-advances/how-to-build-a-react-ai-agent-with-claude-3-5-and-python-95423f798640">How to Build a ReAct AI Agent with Claude 3.5 and Python</a>, which is a DIY approach - now it’s someone else’s turn.</p>

<h3 id="ollama">Ollama</h3>

<p>Ollama lets you run an LLM on your local machine. You can choose which model you want to run and Ollama will download and run it.  The first thing to do is get yourself over to the <a href="https://ollama.com/">Ollama website</a>, download it and install it - just follow the instructions for your operating system.</p>

<p>When you’ve done that open a terminal, or command window, and type in the command to run Ollama, e.g.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ollama run gemma2:2b
</code></pre></div></div>

<p>This runs Ollama using Google’s <em>gemma2:2b</em>  which is the smallest of the Gemma models and seems to run OK on a machine with 8 gigabytes of RAM. If you don’t already have that particular model locally, then Ollama will download it. When Ollama is running you are presented with a command prompt. There are several commands available, for example,  the command, <code class="language-plaintext highlighter-rouge">pull,</code>will download a new model - check out the <a href="https://ollama.com/library">Ollama library</a> web page to select a model. And look at the <a href="[GitHub - ollama/ollama: Get up and running with Llama 3.2, Mistral, Gemma 2, and other large language models.](https://github.com/ollama/ollama)">Ollama GitHub page</a> for more details and commands.</p>

<p>The command line is an interface to the LLM. Here is an example of an interaction with the LLM from the command line.</p>

<blockquote>
  <p><strong>»&gt;Please list the presidents of the USA since 1990</strong></p>

  <p>Here are the presidents of the United States since 1990:</p>

  <ul>
    <li><strong>George H. W. Bush</strong> (1990-1993)</li>
    <li><strong>William Jefferson Clinton</strong> (1993-2001)</li>
    <li><strong>George W. Bush</strong> (2001-2009)</li>
    <li><strong>Barack Obama</strong> (2009-2017)</li>
    <li><strong>Donald Trump</strong> (2017-2021)</li>
    <li><strong>Joe Biden</strong> (2021-Present)</li>
  </ul>

  <p>Let me know if you’d like any more information about these presidents or their presidencies!</p>
</blockquote>

<p>The first line is my prompt and the rest is the LLM’s response (I’ve put in the emphasis for readability). It’s a good response and it wasn’t as slow as I thought it might be, so we are off to a good start.</p>

<p>To use Ollama in Python you will, of course, need to download the library from PyPi.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>ollama
</code></pre></div></div>

<p>Once you have done that and it is running you can ensure it works using the following code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">ollama</span>

<span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span><span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">ollama</span><span class="p">.</span><span class="nf">chat</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">'</span><span class="s">gemma2:2b</span><span class="sh">'</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">'</span><span class="s">role</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">:</span> <span class="n">q</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">])</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">response</span><span class="p">[</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">content</span><span class="sh">'</span><span class="p">])</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">query</span><span class="p">(</span><span class="sh">"</span><span class="s">Why did the chicken cross the road</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<p>The LLM will respond with a message something like the following.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>To get to the other side! 🐔😄

This is a classic joke! It's simple, silly, and always 
a fun way to start a conversation.  
Do you want to try telling another one? 😉
</code></pre></div></div>

<p>OK, now we are up and running. Let’s take a look at how we are going to implement a local agent.</p>

<h3 id="agents">Agents</h3>

<p>Agents are LLMs that have access to external tools and can make decisions on how to use those tools to provide a solution to a problem. They typically run in a loop <em>thinking</em> step by step about how they should address a problem and which tools they need to invoke at each step.</p>

<p><img src="https://datavizandai.github.io/assets/images/agentpipeline/reactflow.png" alt="" /></p>

<p><em>An AI agent flow chart</em></p>

<p>I’ve explored the use of agents in the articles I referred to above, this time I will demonstrate the use of LlamaIndex agents. We don’t need to go into the implementation but it might be useful to look at the prompt that is used to implement LlamaIndex agents as this is where much of the work is done.</p>

<p>We’ll look at the prompt a section at a time to work out just what is going on. (To be clear, LlamaIndex code is open-sourced under the <a href="[GitHub - ollama/ollama: Get up and running with Llama 3.2, Mistral, Gemma 2, and other large language models.](https://github.com/ollama/ollama?tab=MIT-1-ov-file#readme)">MIT licence</a> so we are permitted to use it pretty much how we like and we can reproduce it here.)</p>

<p>The prompts used in LlamaIndex code are implemented as templates, that is strings that contain placeholders for variable inputs (e.g. the names of tools that are provided to the agent). The prompt that we will examine here is the <em>system</em> prompt for a ReAct agent[1]. It is formatted as a Markdown document and starts with a very broad aim.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You are designed to help with a variety of tasks, from answering 
questions to providing summaries to other types of analyses.
</code></pre></div></div>

<p>The prompt is then broken down into several sections. The first tells the LLM what tools are available to it.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Tools</span>

You have access to a wide variety of tools. You are responsible for using
the tools in any sequence you deem appropriate to complete the task at 
hand but you should always use a tool if you are able in order to find 
information. This may require breaking the task into subtasks and using 
different tools to complete each subtask.

You have access to the following tools:
{tool_desc}
</code></pre></div></div>

<p>As you can see the LLM is told how to use the tools and <code class="language-plaintext highlighter-rouge">{tool_desc}</code>will be replaced with a list of the tool descriptions.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Output Format</span>

Please answer in the same language as the question but and use the following format:

  Thought: The current language of the user is: (user's language). I need to use a tool to help me answer the question.
  Action: tool name (one of {tool_names}) if using a tool.
  Action Input: the input to the tool, in a JSON format representing the kwargs (e.g. input)

  Please ALWAYS start with a Thought.

  NEVER surround your response with markdown code markers. You may use code markers within your response if you need to.

  Please use a valid JSON format for the Action Input. Do NOT do this input.

  If this format is used, the user will respond in the following format:

  Observation: tool response

  You should keep repeating the above format till you have enough information to answer the question without using any more tools. At that point, you MUST respond in the one of the following two formats:

  Thought: I can answer without using any more tools. I'll use the user's language to answer
  Answer: [your answer here (In the same language as the user's question)]

  Thought: I cannot answer the question with the provided tools.
  Answer: [your answer here (In the same language as the user's question)]
</code></pre></div></div>

<p>This section describes the <em>Thought</em>, <em>Action</em>, <em>Observation</em>, <em>Answer</em> sequence which are the steps the agent goes through to arrive at a solution and specifies the format in which the LLM should respond.</p>

<p>Finally, the prompt tells the LLM that following this system prompt will be the messages that are generated by the user and responded to by the LLM.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Current Conversation</span>

Below is the current conversation consisting of interleaving human and assistant messages.
</code></pre></div></div>

<p>These sections are all joined into a single system prompt, which defines the behaviour of the agent.</p>

<h3 id="llamaindex">LlamaIndex</h3>

<p>This brings us to creating an agent in LlamaIndex. LlamaIndex has libraries that implement agents and one of these is the <em>ReactAgent</em> that incorporates the prompt that we saw above. We’ll implement an agent and specify some tools that it can use. Then we’ll see how it performs.</p>

<p>The first thing we need, of course, is to import some libraries.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">llama_index.core.tools</span> <span class="kn">import</span> <span class="n">FunctionTool</span> <span class="c1"># allow function use
</span><span class="kn">from</span> <span class="n">llama_index.llms.ollama</span> <span class="kn">import</span> <span class="n">Ollama</span>      <span class="c1"># the Ollama library
</span><span class="kn">from</span> <span class="n">llama_index.core.agent</span> <span class="kn">import</span> <span class="n">ReActAgent</span>   <span class="c1"># the agent library
</span><span class="kn">import</span> <span class="n">wikipedia</span>                                <span class="c1"># the wikipedia library
</span></code></pre></div></div>

<p>Their use is pretty much self-explanatory: the first lets us define and add tools to the agent, the Ollama library is required so we can easily incorporate our local LLM and, of course, we need the library that allows us to create agents.</p>

<p>We import <em>wikipedia</em> because we are going to build a tool around it.</p>

<p><em>If you would like to follow along and implement the code as a Jupyter Notebook then each code block that I describe here can go into a separate cell. Alternatively, you can concatenate them into a single Python program.</em></p>

<p>We want our agent to have access to tools and so we need to specify functions that implement those tools. Here are a couple.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define sample Tools
</span><span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">inp</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">evaluate an expression given in Python syntax</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="nf">eval</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Look up a query in Wikipedia and return the result</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="n">q</span><span class="p">).</span><span class="n">summary</span>

<span class="n">eval_tool</span> <span class="o">=</span> <span class="n">FunctionTool</span><span class="p">.</span><span class="nf">from_defaults</span><span class="p">(</span><span class="n">fn</span><span class="o">=</span><span class="n">evaluate</span><span class="p">)</span>
<span class="n">wikipedia_lookup_tool</span> <span class="o">=</span> <span class="n">FunctionTool</span><span class="p">.</span><span class="nf">from_defaults</span><span class="p">(</span><span class="n">fn</span><span class="o">=</span><span class="n">wikipedia_lookup</span><span class="p">)</span>
</code></pre></div></div>

<p>Here we define two tools: one looks up something on Wikipedia and the other evaluates a Python string. Both take strings as input and return strings as output. The type hints and documentation strings are important as these are used to tell the agent how to use the tools.</p>

<p>A note of caution here: the <code class="language-plaintext highlighter-rouge">evaluate </code>tool is useful and versatile as we can use it to solve mathematical problems - something that LLMs are not great at. However, it is inherently dangerous as it will run any Python code you give it - imagine a set of Python commands that imported the <em>os</em> library, used it to navigate to your root folder and then proceeded to delete all your files. This is not something that we would want to allow unrestricted access to. So, while this particular tool is convenient, it should be used with caution.</p>

<p>Following the tool function definitions, we need to create LlamaIndex tools to use them. I’ve named these <code class="language-plaintext highlighter-rouge">eval_tool</code> and <code class="language-plaintext highlighter-rouge">wikipedia_lookup_tool</code>. We will see how we inform the agent about them, shortly. Before that, we can do that we need to create an agent.</p>

<p>But first, we set up the LLM.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># initialize llm
</span><span class="n">llm</span> <span class="o">=</span> <span class="nc">Ollama</span><span class="p">(</span>
    <span class="n">model</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gemma2:2b</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">request_timeout</span><span class="o">=</span><span class="mf">120.0</span><span class="p">,</span>
    <span class="n">temperature</span><span class="o">=</span><span class="mi">0</span>
<span class="p">)</span>
</code></pre></div></div>

<p>We call this <code class="language-plaintext highlighter-rouge">llm</code> and it is the result of a call to <code class="language-plaintext highlighter-rouge">Ollama</code> from the Ollama library. In that call, we specify the model we will use (this should be the same as the one we’ve set running from the command line - obviously!), we set a timeout (2 hours! Things don’t normally take that long so you can make it much shorter if you want to) and we also set the <code class="language-plaintext highlighter-rouge">temperature </code>which is a measure of the randomness, or creativity, of the LLM’s response. A value of 0 gives you the least randomness and the most consistency but you may want to change this depending on the sort of work that you are doing.</p>

<p>Now we can create the agent that uses the LLM and the tools we have just defined.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">agent</span> <span class="o">=</span> <span class="n">ReActAgent</span><span class="p">.</span><span class="nf">from_tools</span><span class="p">([</span><span class="n">eval_tool</span><span class="p">,</span> <span class="n">wikipedia_lookup_tool</span><span class="p">],</span> 
<span class="err">                                </span><span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>That is all there is to creating an agent with Llamaindex. We give it a list of tools, the LLM and set <code class="language-plaintext highlighter-rouge">verbose </code>to <code class="language-plaintext highlighter-rouge">True</code>. This means that we will get a lot of feedback from the agent. As you might expect, you will get less feedback if you set it to <code class="language-plaintext highlighter-rouge">False</code>.</p>

<p>And there we are! Ready to run.</p>

<p>Let’s give it a try.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">response</span> <span class="o">=</span> <span class="n">agent</span><span class="p">.</span><span class="nf">chat</span><span class="p">(</span><span class="sh">"</span><span class="s">What is the population of the capital of France</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div>

<p>A simple request that will invoke a call to the Wikipedia tool, get the information required,  and then print out the result.</p>

<p>Here is an abbreviated readout of the session.</p>

<blockquote>
  <p>Running step dc619f8e-45ca-4cfc-8bd1-50ed2b9e64ea.</p>

  <p><strong>Step input</strong>: What is the population of the capital of France</p>

  <p><strong>Thought</strong>: The current language of the user is: English. I need to use a tool to help me answer the question.</p>

  <p><strong>Action</strong>: wikipedia_lookup</p>

  <p><strong>Action Input</strong>: {‘q’: ‘Paris’}</p>

  <p><strong>Observation</strong>: Paris (French pronunciation: [paʁi] ) is the capital and largest city of France. With an official estimated population of 2,102,650 residents in January 2023 in an area of more than 105 km2 (41 sq mi)…</p>

  <p><em>(lots more about Paris here)</em></p>

  <p>…Tour de France bicycle race finishes on the Avenue des Champs-Élysées in Paris.</p>

  <p>Running step d7d0c129-dfe1-45a5-9db0-81e43ca6debf.</p>

  <p><strong>Step input</strong>: None</p>

  <p><strong>Thought</strong>: I can answer the question without using any more tools.</p>

  <p><strong>Answer</strong>: The population of the capital of France, Paris, is estimated to be around 2,102,650 residents.</p>
</blockquote>

<p>I’ve highlighted the stages that it has worked through like a good little agent, so you can easily see its ‘thought process’. You can see how it has chosen a tool, called it and used the response to work out the answer to the question.</p>

<p>Next, we have a simple use of the <code class="language-plaintext highlighter-rouge">eval </code>tool.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">response</span> <span class="o">=</span> <span class="n">agent</span><span class="p">.</span><span class="nf">chat</span><span class="p">(</span><span class="sh">"""</span><span class="s">What is 2 * (5 + (6 * 4))</span><span class="sh">"""</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>
</code></pre></div></div>

<p>We are asking the agent to solve a simple arithmetic expression and it does exactly that.</p>

<blockquote>
  <p>Running step c8347df9-10c7-4d34-8b78-2540521e6e7b.</p>

  <p><strong>Step input</strong>: What is 2 * (5 + (6 * 4))</p>

  <p><strong>Thought</strong>: I need to use the evaluate tool to calculate this expression.</p>

  <p><strong>Action</strong>: evaluate</p>

  <p><strong>Action Input</strong>: {‘inp’: ‘2 * (5 + (6 * 4))’}</p>

  <p><strong>Observation</strong>: 58</p>

  <p>Running step 58981d08-1b5d-4658-80e5-21ecb4503665.</p>

  <p><strong>Step input</strong>: None</p>

  <p><strong>Thought</strong>: The answer is 58.</p>

  <p><strong>Answer</strong>: 58</p>
</blockquote>

<p>The agent simply extracts the expression from the input and passes it to the tool for evaluation.</p>

<p>We’ve done what we set out to do - we have a locally running LLM and a pattern for how we can use it programmatically with LlamaIndex agents. But let’s go just a little bit further.</p>

<p>With this simple set up we can even create a basic workflow.</p>

<h3 id="a-simple-workflow">A simple workflow</h3>

<p>LlamaIndex provides support for workflows within its framework and you can also use other frameworks such as LangChain, or CrewAI, to do the same thing.</p>

<p>These products give you very sophisticated ways of orchestrating flows between agents and tools. But if you use a single agent with a simple linear flow, a workflow boils down to a list of prompts and a loop.</p>

<p>Here is an example of a workflow that consists of two prompts. It is a tool for creating summaries of information suitable for kids. The agent will look up a subject in Wikipedia, construct a summary of that information, and, finally, rewrite it using language that is good for a young reader.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A crude workflow
</span><span class="k">def</span> <span class="nf">kids_query</span><span class="p">(</span><span class="n">subject</span><span class="p">):</span>
    <span class="n">prompts</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="sh">"""</span><span class="s">Find out about </span><span class="si">{</span><span class="n">subject</span><span class="si">}</span><span class="s"> and summarize your findings 
                   in about 100 words and respond with that summary</span><span class="sh">"""</span><span class="p">,</span>
               <span class="sh">"""</span><span class="s">Re-write your summary so that it is suitable for a 
                  7-year old reader</span><span class="sh">"""</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">prompts</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">agent</span><span class="p">.</span><span class="nf">chat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">response</span> <span class="c1"># return the last response
</span></code></pre></div></div>

<p>It’s a simple function definition that incorporates a list of two prompts. The first instructs the agent to look up a topic and produce a 100-word summary. The second prompt tells the agent to re-write the summary in language aimed at a 7-year-old reader. The topic to look up is set as a parameter so we can write any topic in there and inform our young reader of a whole range of subjects.</p>

<p>We run through a loop to send each prompt to the agent. The response from the agent is recorded in the variable <code class="language-plaintext highlighter-rouge">response</code> and the last of these responses is passed back as the return value.</p>

<p>Here is an example.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="nf">kids_query</span><span class="p">(</span><span class="sh">"</span><span class="s">Madrid</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<p>This results in the following.</p>

<blockquote>
  <p>Running step 5489cdff-2845-424e-8cca-56d2a7b5da17.</p>

  <p><strong>Step input</strong>: Find out about Madrid and summarize your findings in about 100 words and respond with that summary.</p>

  <p><strong>Thought</strong>: (Implicit) I can answer without any more tools!</p>

  <p><strong>Answer</strong>: Madrid is the capital of Spain, a vibrant city known for its rich history, art…</p>

  <p><em>more stuff about Madrid, here</em></p>

  <p>Running step d5ecf385-6846-4e40-b244-5c84c731f9b4.</p>

  <p><strong>Step input</strong>: Re-write your summary so that it is suitable for a 7-year old reader</p>

  <p><strong>Thought</strong>: (Implicit) I can answer without any more tools!</p>

  <p><strong>Answer</strong>: Madrid is like a big city with lots of cool stuff! It has fancy palaces and museums where you can see amazing paintings and sculptures. You can even go dancing in the evening! Madrid also has yummy food, just like your favorite pizza place! It’s a fun place to visit!</p>
</blockquote>

<p>This is simple and I hope that you can see that using a parameterised function makes the workflow more easily generalisable. Imagine now if the agent is passed as a parameter, too.  Your program would then be able to use multiple agents. And if we also passed in the list of prompts, we would be well on our way to constructing our own multi-agent framework.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Of course, a locally running LLM is not going to be as powerful as one supplied online by one of the big players. But I hope that I have demonstrated that a local LLM is pretty easy and could be useful. If, for example, you want to incorporate private data into your app and are nervous about them being uploaded to an external website then this might be a way forward for you.</p>

<p>You have to bear in mind that a local LLM will use a lot of resources and while it is working you may well notice that your laptop slows down. Also, as you might expect, things take longer. It might take a minute or so to respond to the simple prompts I’ve demonstrated here. To do any sort of data analysis is also slow (that is why I set the timeout to 2 hours!). I haven’t included any data analysis examples here because I have not been satisfied with the results I have obtained, so far - maybe next time.</p>

<hr />

<p>Thanks for reading, I hope that this article has been useful. All code and examples are available in my <a href="https://github.com/alanjones2/llamaindexapps">Github repo</a> -  feel free to download them.
To be informed when I publish articles please subscribe to my occasional <a href="technofile.substack.com">newsletter </a>or follow me on <a href="https://medium.com/@alan-jones/subscribe">Medium </a>(if you are a member).</p>

<h3 id="notes-and-references">Notes and references</h3>

<ol>
  <li>Shunyu Yao, et al, ReAct: Synergizing Reasoning and Acting in Language Models, The Eleventh International Conference on Learning Representations (ICLR), 2023. (retrieved from https://arxiv.org/pdf/2210.03629, 27/06/2024)</li>
</ol>

<p>All images and illustrations are by me the author unless otherwise noted.</p>

<p><em>Disclaimer: I have no connection or commercial interest in any of the companies mentioned in this article.</em></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Running a local LLM is a no-cost alternative to using commercial APIs]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/llamaindex/db5withllama.png" /><media:content medium="image" url="http://localhost:4000/assets/images/llamaindex/db5withllama.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AI Agents vs. AI Pipelines - A Practical Guide to Coding Your LLM Application</title><link href="http://localhost:4000/2024/09/28/AI_Agents_vs._AI_Pipelines-3A_a_Practical_Guide_to_Coding_Your_LLM_Application.html" rel="alternate" type="text/html" title="AI Agents vs. AI Pipelines - A Practical Guide to Coding Your LLM Application" /><published>2024-09-28T00:00:00+02:00</published><updated>2024-09-28T00:00:00+02:00</updated><id>http://localhost:4000/2024/09/28/AI_Agents_vs._AI_Pipelines:_a_Practical_Guide_to_Coding_Your_LLM_Application</id><content type="html" xml:base="http://localhost:4000/2024/09/28/AI_Agents_vs._AI_Pipelines-3A_a_Practical_Guide_to_Coding_Your_LLM_Application.html"><![CDATA[<p><img src="/assets/images/agentpipeline/image.png" alt="" />
<em>An agent and a pipeline — based on an image created with Microsoft Bing Image Creator</em></p>

<p>We can think of an AI agent as an LLM with access to external tools; it runs in a loop, making decisions about how to behave and what tools to use at each iteration.</p>

<p>In doing this, the agent can solve much more complex problems than a conventional LLM app. (I explored how to build such an agent from scratch in the article <a href="https://ai.gopubby.com/how-to-build-a-react-ai-agent-with-claude-3-5-and-python-95423f798640"><strong>How to Build a ReAct AI Agent with Claude 3.5 and Python</strong></a>)</p>

<p>AI Agents are powerful and a long step beyond a conventional chat application. But they are not always the right solution.</p>

<p>Sometimes a sequence of more conventional functions is more appropriate. We can think of this type of application as a pipeline, where a solution is developed by passing the output of one function as the input to the next.</p>

<p>In this article, we will explore the use of AI agents and pipelines and what types of applications they are most suited to. We will use the CrewAI open-source framework to create the LLM logic and build a simple front end in Streamlit for an online app.</p>

<h4 id="apps-for-agents-apps-for-pipelines">Apps for agents, apps for pipelines</h4>

<p>Let’s think about a couple of different apps. </p>

<p>A customer logs on to a manufacturer’s website to solve a problem that they are having with their washing machine. He is greeted by an AI agent that wants to help. What make and model is the machine? What are the symptoms? Are the clothes still dirty? Is there water on the floor? Is it refusing to spin?</p>

<p>There are a whole load of questions that the agent might ask to solve whatever problem the customer has. And subsequent questions will depend on previous answers.</p>

<p>Here, an AI agent is a great solution. It needs to run in a loop gathering information until it is in a position either to suggest a solution or, if it has run out of ideas, pass the problem on to a human operator.</p>

<p>The operation of this type of agent is represented in the diagram below.</p>

<p><img src="/assets/images/agentpipeline/reactflow.png" alt="" /></p>

<p>Here’s another scenario.</p>

<p>The sales director of a small company that runs coffee shops in London wants to produce a report on the performance of several branches. She regularly needs to see how the performance differs between outlets located in the financial district of the City and the more tourist- and retail-focused West End. She has spreadsheets detailing the sales for each branch. She wants to consolidate the numbers and write a report for her board of directors that includes easily understood charts that show the relative performance of each coffee shop.</p>

<p>In this case, the director could use an LLM app to combine monthly sales figures into a single entity, write a commentary on the performance of the different outlets, produce the appropriate charts and combine these elements into a single report. It’s the same process each month and the only variable is the values in the spreadsheets. So, while the content of the report will vary, the process is the same.</p>

<p>Unlike the agentic example, this is a simple sequential flow.</p>

<p><img src="/assets/images/agentpipeline/pipelineflow.png" alt="" /></p>

<p>An AI agent is an ideal solution for the first problem. Given that it is provided with the appropriate information on the operation of the washing machine, its potential failure modes and the symptoms of those failures, the agent can intelligently search out information and pose new questions in response to the customer’s input until it comes up with a solution. For this sort of problem, the AI agent provides a flexible and intelligent solution.</p>

<p>A sales report is a different matter. Sales figures change and it may be that a report would find differences in performance depending on the time of year and the prevalence of tourists or office workers.</p>

<p>So while an intelligent view of those changing figures is necessary, the processes for creating the report are the same. Consolidate the figures; analyse the sales results; create the charts; and finally, write the complete report.</p>

<p>You could write a prompt for an agent that would direct it to go through the necessary steps but a more consistent result might come from designing a series of tasks where the output of one feeds into the input of the next.</p>

<h3 id="crewai">CrewAI</h3>

<p>We’ll use CrewAI to create two example apps. CrewAI gives us a simple way of creating agents, defining tasks and connecting them. And, while it is not the only open-source framework that we could use, it serves to easily illustrate our topic.</p>

<p>We’ll start by using Jupyter Notebooks and convert them into free-standing apps later.</p>

<p>We can use any AI chat API, I used Claude 3.5 to build the ReAct agent in my previous <a href="https://ai.gopubby.com/how-to-build-a-react-ai-agent-with-claude-3-5-and-python-95423f798640">article</a> but CrewAI uses OpenAI by default, so we’ll go with that.</p>

<p>You should bear in mind that if you want to code along with the article you will need an OpenAI API key and you may be charged for using it - a simple call to the API, such as we will use here, costs only a few cents but, of course, the more calls you make the more your bill will accumulate, so make sure that you keep an eye on your usage in the OpenAI dashboard.</p>

<p>CrewAI comes in two flavours, Enterprise and Open Source. We will use the open-source version here, so no API keys or cost is involved in that.</p>

<p>Installing CrewAI is what you would expect, although, as we will be using external tools, we need to add that functionality, too.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>crewai crewai-tools
</code></pre></div></div>

<p>We will create a tool for CrewAI to use based on the Wikipedia library from PyPi so we will also need to install that.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>wikipedia
</code></pre></div></div>

<p>The first app that we will develop is called Intelligent Wikipedia. It will take a query and then use the Wikipedia tool to find an answer. It will do this by reasoning about the query, working out what it needs to find out, making the appropriate searches and analysing the results before giving an answer. If that sounds complicated, don’t worry,  it isn’t.</p>

<h3 id="intelligent-wikipedia">Intelligent Wikipedia</h3>

<p>As I said, initially, we’ll use a Jupyter Notebook, so I’ll present the code here as individual notebook cells.</p>

<p>The first cell imports CrewAI and sets up OpenAI.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai</span> <span class="kn">import</span> <span class="n">Agent</span><span class="p">,</span> <span class="n">Task</span><span class="p">,</span> <span class="n">Crew</span>

<span class="c1"># Omit the next two lines if OPENAI_API_KEY is already set
</span><span class="kn">import</span> <span class="n">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your key here</span><span class="sh">"</span>

<span class="n">llm</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gpt-4o</span><span class="sh">"</span>
</code></pre></div></div>

<p>CrewAI will find the OpenAI key in the “OPENAI_API_KEY” environment variable, so we set it here. You may have already done this, if so, this code is redundant and you can omit it.</p>

<p>You can use whichever model you wish but “gpt-4o” seems the best option at the time of writing.</p>

<h4 id="tools">Tools</h4>

<p>Now we are going to specify the Wikipedia tool. A tool is a function that a CrewAI agent can call if required - it performs a task and returns a value. The simplest way to define a tool is with a decorator. So, the next cell is:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai_tools</span> <span class="kn">import</span> <span class="n">tool</span>
<span class="kn">import</span> <span class="n">wikipedia</span>

<span class="nd">@tool</span><span class="p">(</span><span class="sh">"</span><span class="s">wikipedia_lookup</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Look up a query in Wikipedia and return the result</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="n">q</span><span class="p">).</span><span class="n">summary</span>
</code></pre></div></div>

<p>After the imports, we have a simple function that takes a string parameter, sends it to Wikipedia and returns a summary of a Wikipedia page. Note we have included a function description and type hints for the parameter and return value. This helps CrewAI to know how to use the tool.</p>

<p>Now we get to the main part of the application: we define the agent that will do the work for us and the task that we want it to undertake, and then we create and run the <em>crew</em>. This <em>crew</em> combines <em>agents</em> and <em>tasks</em> into something that can be executed. In our first app, that is a single agent and single task but later we will see more complex <em>crews</em>.</p>

<h4 id="agents">Agents</h4>

<p>Let’s first look at the agent. The following code creates an agent variable called <code class="language-plaintext highlighter-rouge">researcher_agent</code>. It specifies a <em>role</em>, a <em>goal</em>, a <em>backstory</em> and a list of tools the agent can use. It also specifies the LLM model to use. So the next cell is:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define the agent
</span><span class="n">researcher_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Researcher</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You research topics using Wikipedia and report on the results</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Many more attributes can be specified for an Agent but these are the basic ones.  The LLM and tools are fairly obvious, they are things you want to be specific about. But one might be forgiven for thinking that <em>role</em>, goal and <em>backstory</em> are more like magical incantations rather than programming requirements. However, as you might expect, these strings are used when CrewAI constructs prompts for the LLM.</p>

<p>So that’s an Agent: some stuff that tells the LLM its purpose, a list of tools and an LLM model.</p>

<h4 id="tasks">Tasks</h4>

<p>Next up is the <em>task</em>. The <em>task</em> tells us what the <em>agent</em> has to do and, for our purposes, it will involve responding to a query. When we get around to creating a proper app we will prompt the user for a query, but this is a prototype Jupyter Notebook so to make things easier we will hard code the query.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span> <span class="o">=</span> <span class="sh">"</span><span class="s">What is the EU</span><span class="sh">'</span><span class="s">s largest city</span><span class="sh">"</span>
</code></pre></div></div>

<p>That is not a question that can be answered directly from a Wikipedia page - some reasoning will be required.</p>

<p>And here is the task specification that will incorporate this query.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">task1</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="n">query</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output.</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">researcher_agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">]</span>
<span class="p">)</span>
</code></pre></div></div>

<p>The description of the task is the query, we explain what the expected output will be (this is another magical string that will end up in a prompt), we associate the task with an agent and we list the tools that may be used.</p>

<p>Now we tie it all together with a <em>crew</em>.</p>

<h4 id="crews">Crews</h4>

<p>Crews tell us which agents are required to do which tasks. Here is the <em>crew</em> for this app.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define the crew
</span><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">researcher_agent</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">task1</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>
</code></pre></div></div>

<p>It comprises a list of agents and a list of tasks. In this case, one task and one agent. When the <code class="language-plaintext highlighter-rouge">verbose </code>flag is set, CrewAI will show its working - we’ll see that shortly.</p>

<p>Now all we need to do is run the whole thing and look at the results.</p>

<h4 id="execute-the-crew">Execute the crew</h4>

<p>If that sounds a bit harsh before we even know what the result is, let me be clear I mean we need to run the code that the crew represents (no capital punishment is involved no matter how bad the response is).</p>

<p>In CrewAI terms, we <code class="language-plaintext highlighter-rouge">kickoff</code> the crew and then get the response in the return value. Here’s the next cell.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">()</span>

<span class="c1"># Accessing the task output
</span><span class="n">task_output</span> <span class="o">=</span> <span class="n">task1</span><span class="p">.</span><span class="n">output</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Task Description: </span><span class="si">{</span><span class="n">task_output</span><span class="p">.</span><span class="n">description</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Task Summary: </span><span class="si">{</span><span class="n">task_output</span><span class="p">.</span><span class="n">summary</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Raw Output: </span><span class="si">{</span><span class="n">task_output</span><span class="p">.</span><span class="n">raw</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>As you can see we call the <code class="language-plaintext highlighter-rouge">kickoff</code> method and then print out the various outputs that have been generated.</p>

<p>Now, if we run the complete notebook, the result of those print statements are:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Task Description: What is the EU's largest city

Task Summary: What is the EU's largest city...

Raw Output: Berlin is the largest city in the European Union in terms of 
population within city administrative boundaries.
</code></pre></div></div>

<p>This is a good and correct response.</p>

<p>What is possibly more interesting is the way that the crew managed to get to the solution. Remember we set the <code class="language-plaintext highlighter-rouge">verbose </code>attribute to <code class="language-plaintext highlighter-rouge">True</code>. This means that the ‘thinking’ that the agent does is recorded and displayed as the notebook is run. You can see this below.</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Agent: Researcher</span>
<span class="gu">## Task: What is the EU's largest city</span>

<span class="gh"># Agent: Researcher</span>
<span class="gu">## Thought: I need to look up information about the largest city in the European Union (EU).</span>
<span class="gu">## Using tool: wikipedia_lookup</span>
<span class="gu">## Tool Input: </span>
{
  "q": "Largest city in the European Union"
}
<span class="gu">## Tool Output: </span>
This is a list of the largest cities in the European Union according to 
the population within their city boundary. The cities listed all have 
populations over 300,000. The list deals exclusively with the areas 
within city administrative boundaries as opposed to urban areas or 
larger urban zones (metropolitan areas), which are generally larger in 
terms of population than the main city (although they can also be 
smaller, in some of the cases presented).
As some cities have a very narrow boundary and others a very wide one, 
the list may not give an accurate view of the comparative magnitude of 
entire urban areas, and thus the figures in the list should be treated 
with caution. For example Paris is the most populous urban area in the 
European Union; however, the city proper of the French capital has a 
lower population than top-ranked Berlin and a couple of other cities, 
as shown in the table. Likewise the City of Brussels is only one of a 
total of 19 municipalities making up the greater Brussels Capital Region, 
and by itself does not reach the population threshold to be listed here. 
On the other hand, the Municipality of Sintra, listed on the table as the 
second most populous Portuguese city includes in it the cities of 
Agualva-Cacém and Queluz, in addition to the town of Sintra and other 
urban centers.

<span class="gh"># Agent: Researcher</span>
<span class="gu">## Final Answer: </span>
Berlin is the largest city in the European Union in terms of population 
within city administrative boundaries.
</code></pre></div></div>

<p>You can see that CrewAI follows a very agent-like process. It reasons about its response, gathers the appropriate information and then responds with a suitable answer.</p>

<h4 id="lets-make-an-app">Let’s make an app</h4>

<p>Turning this into an app is easy. We can add a plain Python front end or a prettier GUI using Streamlit or Taipy. Here’s the plain Python version.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai</span> <span class="kn">import</span> <span class="n">Agent</span><span class="p">,</span> <span class="n">Task</span><span class="p">,</span> <span class="n">Crew</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your api key</span><span class="sh">"</span>
<span class="n">llm</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gpt-4o</span><span class="sh">"</span>

<span class="c1"># Create the wikipedia tool
</span><span class="kn">from</span> <span class="n">crewai_tools</span> <span class="kn">import</span> <span class="n">tool</span>
<span class="kn">import</span> <span class="n">wikipedia</span>

<span class="nd">@tool</span><span class="p">(</span><span class="sh">"</span><span class="s">wikipedia_lookup</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"</span><span class="s">Look up a query in Wikipedia and return a summary</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="n">q</span><span class="p">).</span><span class="n">summary</span>

<span class="c1"># Define the agent
</span><span class="n">intelligent_wikipedia</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Researcher</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You research topics using Wikipedia and report on the results</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>
    <span class="p">)</span>

<span class="c1"># The run function sets the task and executes the crew
# and returns the result
</span><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">task</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
        <span class="n">description</span><span class="o">=</span><span class="n">s</span><span class="p">,</span>
        <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">agent</span><span class="o">=</span><span class="n">intelligent_wikipedia</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">]</span>
    <span class="p">)</span>

    <span class="c1"># Define the crew
</span>    <span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
        <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">intelligent_wikipedia</span><span class="p">],</span>
        <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">task</span><span class="p">],</span>
        <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">()</span>
    <span class="n">task_output</span> <span class="o">=</span> <span class="n">task</span><span class="p">.</span><span class="n">output</span>
    <span class="k">return</span> <span class="n">task_output</span><span class="p">.</span><span class="n">raw</span>

<span class="c1">###############################
</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Intelligent Wikipedia</span><span class="sh">"</span><span class="p">)</span>

<span class="n">q</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter your question: </span><span class="sh">"</span><span class="p">)</span> 
<span class="n">answer</span> <span class="o">=</span> <span class="nf">run</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
</code></pre></div></div>

<p>All of the cells from the Notebook have been concatenated and the task, crew and kickoff functionality have been incorporated into a function run.</p>

<p>Below the comment line, we print a title, prompt for a query,  call the run function, and print out the response.</p>

<p>If you prefer a more sophisticated GUI using Streamlit or Taipy then replace the code below the comment line with something like one of the following:</p>

<p>Streamlit:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">streamlit</span> <span class="k">as</span> <span class="n">st</span>

<span class="n">st</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="sh">"</span><span class="s">Intelligent Wikipedia</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">q</span> <span class="p">:</span><span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">text_input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter your question</span><span class="sh">"</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="nf">run</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
    <span class="n">st</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span> <span class="n">answer</span><span class="p">)</span>
</code></pre></div></div>

<p>Taipy:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">taipy.gui</span> <span class="kn">import</span> <span class="n">Gui</span>
<span class="kn">import</span> <span class="n">taipy.gui.builder</span> <span class="k">as</span> <span class="n">tgb</span>

<span class="n">user_input</span> <span class="o">=</span> <span class="sh">""</span>
<span class="n">result</span> <span class="o">=</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">input_change</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="nf">run</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">user_input</span><span class="p">)</span>
    <span class="n">state</span><span class="p">.</span><span class="n">result</span> <span class="o">=</span> <span class="n">answer</span>

<span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nc">Page</span><span class="p">()</span> <span class="k">as</span> <span class="n">page</span><span class="p">:</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s"># Intelligent Wikipedia</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">layout</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="sh">"</span><span class="s">1 1</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
            <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter your question in the box</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">tgb</span><span class="p">.</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">{user_input}</span><span class="sh">"</span><span class="p">,</span> <span class="n">multiline</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">class_name</span><span class="o">=</span><span class="sh">"</span><span class="s">fullwidth</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">tgb</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">Submit</span><span class="sh">"</span><span class="p">,</span> <span class="n">on_action</span><span class="o">=</span><span class="n">input_change</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
            <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">Intellligent Wikipedia</span><span class="sh">'</span><span class="s">s response will appear below:</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">{result}</span><span class="sh">"</span><span class="p">)</span>


<span class="nc">Gui</span><span class="p">(</span><span class="n">page</span><span class="o">=</span><span class="n">page</span><span class="p">).</span><span class="nf">run</span><span class="p">(</span><span class="n">dark_mode</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>Here is a screenshot of the Streamlit version</p>

<p><img src="/assets/images/agentpipeline/Streamlit.png" alt="" /></p>

<p>You don’t see the reasoning in the GUI version of the app as this is sent to the console. So you should see it on the command line where you invoked the app. If you don’t want this, the set <code class="language-plaintext highlighter-rouge">verbose = False</code> in the crew definition.</p>

<h3 id="wikipedia-for-kids---a-pipeline-app">Wikipedia for kids - a pipeline app</h3>

<p>To create a pipeline we define more agents and more tasks, and then create a crew that will join them in a sensible way.</p>

<p>The new app will build on the previous one. It’s called Wikipedia for Kids and again looks something up in Wikipedia but then translates it into a text suitable for young readers and shortens it to a few hundred words.</p>

<p>Let’s take a look at the code for the agents.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">researcher_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Researcher</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You research topics using Wikipedia and report on the results</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>
    <span class="p">)</span>
<span class="n">writer_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Writer</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You re-write articles so that they are suitable for young readers</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>
    <span class="p">)</span>
<span class="n">editor_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You ensure that the text you are given is grammatically correct and the correct length</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>You can see that we now have three agents. The second two are the <code class="language-plaintext highlighter-rouge">writer_agent</code>and the <code class="language-plaintext highlighter-rouge">editor_agent</code>.  The <code class="language-plaintext highlighter-rouge">goal</code> strings tell you their purpose and, while they also require a LLM, they don’t need to use the Wikipedia tool.</p>

<p>Having the agents is fine but we need to specify what tasks they need to perform. Here is the code cell for the tasks.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">task1</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="n">query</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">researcher_agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">]</span>
<span class="p">)</span>
<span class="n">task2</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Rework the text to be suitable for a 10-year-old reader</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">writer_agent</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">task3</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Edit the text to ensure that it is grammatically correct and no more than 500 words</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">editor_agent</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<p>The first task is as before but the second and third ones tell the agents to change the original text into something suitable for a 10-year-old reader and to make sure that it is grammatically correct and that it is not longer than 500 words. Note that the appropriate agents are specified in each task and that the Wikipedia tool is only required for the first task.</p>

<p>Now we need to create a crew and run it. Here’s the code for that.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define the crew
</span><span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
    <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">researcher_agent</span><span class="p">,</span> <span class="n">writer_agent</span><span class="p">,</span> <span class="n">editor_agent</span><span class="p">],</span>
    <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">task1</span><span class="p">,</span> <span class="n">task2</span><span class="p">,</span> <span class="n">task3</span><span class="p">],</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
<span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Raw Output: </span><span class="si">{</span><span class="n">result</span><span class="p">.</span><span class="n">raw</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>To define the crew, we simply list the agents and the tasks in the order in which they need to be executed. Note that there is a minor change in the way the result is retrieved. We don’t use the output from a task but rather from the final result.</p>

<p>The prompt, this time was simply <code class="language-plaintext highlighter-rouge">"Paris"</code> and as you can see our pipeline of agents has done a good job of telling a youngster about Paris in a few hundred words. Below is a screenshot of the Streamlit version of the app.</p>

<p><img src="/assets/images/agentpipeline/Streamlit2.png" alt="" /></p>

<p>Below is the complete code for the Streamlit app.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">crewai</span> <span class="kn">import</span> <span class="n">Agent</span><span class="p">,</span> <span class="n">Task</span><span class="p">,</span> <span class="n">Crew</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="c1"># OpenAI
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your API key</span><span class="sh">"</span>
<span class="n">llm</span> <span class="o">=</span> <span class="sh">"</span><span class="s">gpt-4o</span><span class="sh">"</span>

<span class="c1"># Create the wikipedia tool
</span><span class="kn">from</span> <span class="n">crewai_tools</span> <span class="kn">import</span> <span class="n">tool</span>
<span class="kn">import</span> <span class="n">wikipedia</span>

<span class="nd">@tool</span><span class="p">(</span><span class="sh">"</span><span class="s">wikipedia_lookup</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">wikipedia_lookup</span><span class="p">(</span><span class="n">q</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"</span><span class="s">Look up a query in Wikipedia and return a summary</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">wikipedia</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="n">q</span><span class="p">).</span><span class="n">summary</span>

<span class="c1"># Define the agents
</span><span class="n">researcher_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Researcher</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You research topics using Wikipedia and report on the results</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">],</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>
    <span class="p">)</span>
<span class="n">writer_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Writer</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You re-write articles so that they are suitable for young readers</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>

    <span class="p">)</span>
<span class="n">editor_agent</span> <span class="o">=</span> <span class="nc">Agent</span><span class="p">(</span>
        <span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">Editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">goal</span><span class="o">=</span><span class="sh">"</span><span class="s">You ensure that the text you are given is grammatically correct and the correct length</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">backstory</span><span class="o">=</span><span class="sh">"</span><span class="s">You are an experienced writer and editor</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">llm</span><span class="o">=</span><span class="n">llm</span>
    <span class="p">)</span>

<span class="c1"># The run function sets the task and executes the crew
# and returns the result
</span><span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">task1</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
        <span class="n">description</span><span class="o">=</span><span class="n">q</span><span class="p">,</span>
        <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">agent</span><span class="o">=</span><span class="n">researcher_agent</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="n">wikipedia_lookup</span><span class="p">]</span>
    <span class="p">)</span>
    <span class="n">task2</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Rework the text to be suitable for a 10-year-old reader</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">agent</span><span class="o">=</span><span class="n">writer_agent</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">task3</span> <span class="o">=</span> <span class="nc">Task</span><span class="p">(</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Edit the text to ensure that it is grammatically correct and no more than 500 words</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">expected_output</span><span class="o">=</span><span class="sh">'</span><span class="s">A short text based on the tool output</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">agent</span><span class="o">=</span><span class="n">editor_agent</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># Define the crew
</span>    <span class="n">crew</span> <span class="o">=</span> <span class="nc">Crew</span><span class="p">(</span>
        <span class="n">agents</span><span class="o">=</span><span class="p">[</span><span class="n">researcher_agent</span><span class="p">,</span> <span class="n">writer_agent</span><span class="p">,</span> <span class="n">editor_agent</span><span class="p">],</span>
        <span class="n">tasks</span><span class="o">=</span><span class="p">[</span><span class="n">task1</span><span class="p">,</span> <span class="n">task2</span><span class="p">,</span> <span class="n">task3</span><span class="p">],</span>
        <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">crew</span><span class="p">.</span><span class="nf">kickoff</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">raw</span>    
<span class="c1">###############################
</span>
<span class="kn">import</span> <span class="n">streamlit</span> <span class="k">as</span> <span class="n">st</span>

<span class="n">st</span><span class="p">.</span><span class="nf">header</span><span class="p">(</span><span class="sh">"</span><span class="s">Wikipedia for kids</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">q</span> <span class="p">:</span><span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">text_input</span><span class="p">(</span><span class="sh">"</span><span class="s">Enter your question</span><span class="sh">"</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="nf">run</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
    <span class="n">st</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span> <span class="n">answer</span><span class="p">)</span>
</code></pre></div></div>

<p>And there we have the two example apps. They do similar things and both use the same Wikipedia lookup tool. The second one adds a couple of extra functions to the pipeline, changing the text to be more suitable for a young reader and limiting the length of the text.</p>

<p>What can we conclude from this exercise?</p>

<h3 id="conclusion-ai-agents-vs-ai-pipelines-in-llm-applications">Conclusion: AI Agents vs. AI Pipelines in LLM Applications</h3>

<p>The two approaches differ in how they handle tasks, decision-making, and interaction.</p>

<p><strong>Agents</strong> are autonomous, can make decisions and are potentially interactive. In this approach, the LLM acts as an “agent” capable of understanding potentially complex user prompts and adapting its behaviour to achieve specific goals. Examples of use include conversational virtual assistants (as in the app we’ve seen) or autonomous customer service agents.</p>

<p>Agents can handle open-ended tasks and maintain context over time, making them ideal for complex, interactive applications.</p>

<p><strong>AI Pipelines</strong>, in contrast, follow a linear, deterministic process with predefined stages for tasks such as data processing. Pipelines are structured and good for applications that involve repetitive, well-defined tasks such as text classification, document processing or data transformation.</p>

<p>AI pipelines are modular, scalable, and, because they typically consist of well-defined tasks, are more predictable than the more open-ended behaviour of agents.</p>

<p>Agents could be designed to mimic pipelines by structuring their prompts as a sequence of tasks but the result may be less predictable or consistent, so where a pipeline can be used, that may be the better approach.</p>

<hr />

<p>I hope that you have found this an interesting topic and that the code is useful to you. If you would like to see more of my articles, please visit my <a href="alanjones2.github.io">web page</a> and/or subscribe to my occasional, free <a href="technofile.substack.com">newsletter</a>. If you are a Medium member, you can find most of my stuff <a href="https://medium.com/@alan-jones">there</a>, too.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[We use CrewAI to create apps that demonstrate how to choose the right architecture for your LLM application]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/agentpipeline/image.png" /><media:content medium="image" url="http://localhost:4000/assets/images/agentpipeline/image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Construct a Multipage Data Science Web App in Python with Taipy</title><link href="http://localhost:4000/2024/09/10/mulitpage-taipy.html" rel="alternate" type="text/html" title="How to Construct a Multipage Data Science Web App in Python with Taipy" /><published>2024-09-10T00:00:00+02:00</published><updated>2024-09-10T00:00:00+02:00</updated><id>http://localhost:4000/2024/09/10/mulitpage-taipy</id><content type="html" xml:base="http://localhost:4000/2024/09/10/mulitpage-taipy.html"><![CDATA[<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/ria-CvTaPeo3NRk-unsplash.jpg?raw=true" alt="" /></p>

<p><em>Photo by <a href="https://unsplash.com/@riapuskas?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Ria</a> on <a href="https://unsplash.com/photos/factory-chimney-emitting-smoke-CvTaPeo3NRk?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a></em></p>

<p>Taipy is a framework for building Data Science and AI web apps in Python. As such, it is a competitor to the likes of Streamlit or Dash, but it is distinct from both of those products.</p>

<p>Taipy separates the user interface from the rest of the program logic and uses callbacks to add functionality to user controls. In this sense, it is closer to Dash than Streamlit where the user interface controls are often incorporated into the main Python code.</p>

<p>Both Dash and Taipy are based on the Flask microframework, so it shouldn’t be a surprise that there are similarities but where in a Dash app, you essentially construct your user interface in HTML (but written with Python functions), Taipy has an additional layer of abstraction that lets the user define user controls that are closer to Streamlit than Dash.</p>

<p>So, is Taipy the best of both worlds?  I wrote an introduction in <a href="https://medium.com/towards-data-science/a-data-dashboard-in-pure-python-with-taipy-bdb164a62b8b">A Data Dashboard in Pure Python with Taipy</a> that explores how to construct a web app in Taipy, so you can judge for yourselves how easy it is to use.</p>

<p>This article goes a step further than the first by looking at how multipage apps can be constructed with Taipy but first let’s spend a minute constructing a simple one-page app (it’s only three lines of code!)</p>

<p>If you want to code along, you will need a Python installation, 3.8 or newer, and you will need to…</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>taipy
</code></pre></div></div>

<p>Of course!</p>

<h3 id="hello-world-the-taipy-way">Hello World the Taipy way</h3>

<p>The basic building block for a Taipy web app is a page. You define it in Python, Markdown or HTML (your choice) and then add the application logic in Python linking it to the user interface using callback functions.</p>

<p>Here is the code for the ubiquitous ‘Hello World’ app.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">taipy.gui</span> <span class="kn">import</span> <span class="n">Gui</span>

<span class="n">page</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## Hello World</span><span class="sh">"</span>

<span class="nc">Gui</span><span class="p">(</span><span class="n">page</span><span class="o">=</span><span class="n">page</span><span class="p">).</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<p>As you can probably deduce, a single page is defined by a Markdown string, <code class="language-plaintext highlighter-rouge">page</code> and the app is started by passing that page to the <code class="language-plaintext highlighter-rouge">Gui()</code> function. (In a real application, the page would likely include controls for user input and callback functions written in Python linked to those controls.)</p>

<p>You run the app as a normal Python application (file names are as per my GitHub repo - see note [2]):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python example0.py
</code></pre></div></div>

<p>And it will be available in your browser on your local host: http://127.0.0.1:5000/</p>

<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/Screenshot_example0.png?raw=true" alt="" /></p>

<p>Easy.</p>

<h3 id="multiple-pages">Multiple pages</h3>

<p>To display multiple pages it is simply a matter of defining those pages individually and giving each page a named endpoint. Navigation between the pages can be done explicitly, using the <code class="language-plaintext highlighter-rouge">navigate()</code> function or a built-in navigation bar.</p>

<p>Shortly, we will build a multipage app and explore how to construct the pages and navigate between them using both methods. This app will define the pages in Python and will feature interactive charts and callbacks linked to the UI controls.</p>

<p>But to illustrate the basic structure, here is the code for a simple two-page app that defines the pages as Markdown strings.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">taipy.gui</span> <span class="kn">import</span> <span class="n">Gui</span>

<span class="n">page1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## This is page 1</span><span class="sh">"</span>
<span class="n">page2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## This is page 2</span><span class="sh">"</span>

<span class="n">pages</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">page1</span><span class="sh">"</span><span class="p">:</span> <span class="n">page1</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">page2</span><span class="sh">"</span><span class="p">:</span> <span class="n">page2</span><span class="p">,</span>
<span class="p">}</span>

<span class="nc">Gui</span><span class="p">(</span><span class="n">pages</span><span class="o">=</span><span class="n">pages</span><span class="p">).</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<p>The actual pages are defined in the strings <code class="language-plaintext highlighter-rouge">page1</code> and <code class="language-plaintext highlighter-rouge">page2</code> and display the Markdown text in those strings. The pages are grouped in a dictionary along with their endpoint names and these are then passed to the function <code class="language-plaintext highlighter-rouge">Gui</code> which runs the app.</p>

<p>This code is in a file called <em>example1.py</em> so we run it, thus:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python example1.py
</code></pre></div></div>

<p>The pages are named “page1” and “page2” and when you run the app locally “page1” is accessible on the local server: http://127.0.0.1:5000/page1 and “page2” on http://127.0.0.1:5000/page2.</p>

<p>Ideally, of course, you want to have some sort of navigation between the pages. A simple way of doing this is to include a navigation bar.</p>

<h3 id="navigation-bar">Navigation bar</h3>

<p>Taipy provides a navigation bar control that you can use in a Markdown page definition. To use it as a common navigation bar across all pages, we need to define a third page which maps onto the root endpoint (<code class="language-plaintext highlighter-rouge">'/'</code>).</p>

<p>You can see this in the code below. There is a new page called <code class="language-plaintext highlighter-rouge">root</code> which contains the navigation bar code. The other two pages are as before and the dictionary now contains a new entry for the root page.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">taipy.gui</span> <span class="kn">import</span> <span class="n">Gui</span>

<span class="n">root</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
&lt;|navbar|&gt;  
</span><span class="sh">"""</span>
<span class="n">page1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## This is page 1</span><span class="sh">"</span>
<span class="n">page2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## This is page 2</span><span class="sh">"</span>

<span class="n">pages</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">:</span> <span class="n">root</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">page1</span><span class="sh">"</span><span class="p">:</span> <span class="n">page1</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">page2</span><span class="sh">"</span><span class="p">:</span> <span class="n">page2</span><span class="p">,</span>
<span class="p">}</span>

<span class="nc">Gui</span><span class="p">(</span><span class="n">pages</span><span class="o">=</span><span class="n">pages</span><span class="p">).</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<p>Now run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python example2.py
</code></pre></div></div>

<p>Navigate to http://127.0.0.1:5000/, and you will see that the navigation bar is displayed at the top of the screen and the browser will automatically navigate to the first page. You can then use the navigation bar to move from one page to the other. In the image below I have selected PAGE2.</p>

<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/Screenshot_example2_dark.png?raw=true" alt="" /></p>

<p>Taipy has created a sort of template for us where the content of the root endpoint is displayed as a header above all of the other pages.</p>

<p>What if we want a footer, too?</p>

<p>To create a website where the content of each page has a common header and footer we use the pseudo control <code class="language-plaintext highlighter-rouge">&lt;|content|&gt;</code> in the root page. This pseudo control explicitly tells Taipy where the content of the web page should be located (in the previous example it was implicitly located after the header).</p>

<p>In the code below we see that the <code class="language-plaintext highlighter-rouge">root</code> page now contains the content pseudo control and it is placed immediately after the navigation bar. By doing this we can now add a footer to each page by simply adding more Markdown code after the content. In this case, the footer contains the text, <em>“This is a footer”</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">taipy.gui</span> <span class="kn">import</span> <span class="n">Gui</span>

<span class="n">root</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
&lt;|navbar|&gt;  
&lt;|content|&gt;
_This is a footer_
</span><span class="sh">"""</span>

<span class="n">page1</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## This is page 1</span><span class="sh">"</span>
<span class="n">page2</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## This is page 2</span><span class="sh">"</span>

<span class="n">pages</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">:</span> <span class="n">root</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">page1</span><span class="sh">"</span><span class="p">:</span> <span class="n">page1</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">page2</span><span class="sh">"</span><span class="p">:</span> <span class="n">page2</span><span class="p">,</span>
<span class="p">}</span>

<span class="nc">Gui</span><span class="p">(</span><span class="n">pages</span><span class="o">=</span><span class="n">pages</span><span class="p">).</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div></div>

<p>You can see the result in the image below.</p>

<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/Screenshot_example3_dark.png?raw=true" alt="" /></p>

<p>Selecting page 2 would show the contents of page 2 with the same header and footer.</p>

<h3 id="the-multipage-app">The multipage app</h3>

<p>Let’s look at something a bit more interesting.</p>

<p>We are going to develop a simple three-page app that explores CO2 emissions by country and by the source of the emissions.</p>

<p>The app consists of a home page that gives us a summary of the app and ways to navigate to the other two pages,</p>

<p>You can see a screenshot of the home page, below.</p>

<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/appscreenshot.png?raw=true" alt="" /></p>

<p>It is a simple app that consists of three pages: the home screen plus two pages that contain interactive graphs that explore sources of global CO2 emissions and a map of CO2 emissions by country. The graphs are drawn using Plotly.</p>

<p>At the top of the screen is the navigation bar that links to the three pages that comprise the app, while, below the images on the home screen, are buttons that provide an alternative way of navigating between the pages.</p>

<p>The other pages are shown below.</p>

<p>The first is a bar graph of the CO2 emissions between 1850 and 2020 - you can show the total emissions or those from a particular source using the dropdown menu.</p>

<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/co2emissionspagescreenshot.png?raw=true" alt="" /></p>

<p>The second one is a choropleth showing annual CO2 emissions by country for a range of years.</p>

<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/worldtemppagescreenshot.png?raw=true" alt="" /></p>

<p>You can see how the header (navigation bar) and the footer are preserved in each page.</p>

<p>Of course, these pages are more complicated than the simple strings that we have seen so far. So, to make things neat and easy to follow, we will define each page as a separate entity, we’ll define them in Python and we will make each page a package (i.e. each page will be in a separate Python file that we can import into the main program).</p>

<p>The files for the pages will be called <em>home.py</em>, <em>CO2_src_chart.py</em> and <em>CO2_map.py</em>. In each of the page files we will define a variable <code class="language-plaintext highlighter-rouge">page</code> that will contain the page definition and those variables will be imported into the main program. In addition, there will be a main program <em>main.py</em>.</p>

<p>Let’s take a look at <em>main.py</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">taipy.gui</span> <span class="kn">import</span> <span class="n">Gui</span>
<span class="kn">from</span> <span class="n">pages.home</span> <span class="kn">import</span> <span class="n">page</span> <span class="k">as</span> <span class="n">homepage</span>
<span class="kn">from</span> <span class="n">pages.CO2_src_chart</span> <span class="kn">import</span> <span class="n">page</span> <span class="k">as</span> <span class="n">co2page</span>
<span class="kn">from</span> <span class="n">pages.CO2_map</span> <span class="kn">import</span> <span class="n">page</span> <span class="k">as</span> <span class="n">CO2countrypage</span>

<span class="n">root_md</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
&lt;|navbar|&gt;
&lt;|content|&gt;  
_Made with Taipy_    
</span><span class="sh">"""</span>

<span class="n">pages</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">:</span> <span class="n">root_md</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">home</span><span class="sh">"</span><span class="p">:</span> <span class="n">homepage</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">CO2_Sources</span><span class="sh">"</span><span class="p">:</span> <span class="n">co2page</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">CO2_by_Country</span><span class="sh">"</span><span class="p">:</span><span class="n">CO2countrypage</span><span class="p">,</span>
<span class="p">}</span>

<span class="nc">Gui</span><span class="p">(</span><span class="n">pages</span><span class="o">=</span><span class="n">pages</span><span class="p">).</span><span class="nf">run</span><span class="p">(</span><span class="n">dark_mode</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>As you can see it follows the same pattern as the simple apps that we saw before.  The main difference is that we import the pages from external files rather than defining them as strings. The root endpoint <em>is</em> defined as a Markdown string and is almost identical to the earlier ones.</p>

<p>Running this file will give us a webpage with a navigation bar and a footer that says “<em>Made with Taipy</em>”.</p>

<p>There is one more minor addition. In the call to the  <code class="language-plaintext highlighter-rouge">run</code> function (the last line), we set a parameter <code class="language-plaintext highlighter-rouge">dark_mode</code> to <code class="language-plaintext highlighter-rouge">False</code>. By default, Taipy uses dark mode for the display and this is the way to change it. I have nothing against dark mode but I think the lighter colours go better with the default Plotly theme in this app.</p>

<h2 id="the-pages">The pages</h2>

<p>I discussed creating webpages in Python with Taipy in <a href="https://medium.com/towards-data-science/a-data-dashboard-in-pure-python-with-taipy-bdb164a62b8b">A Data Dashboard in Pure Python with Taipy</a> so I’ll try not to repeat myself too much here.</p>

<p>Defining pages as separate Python packages is very convenient and reminiscent of the way you design a multipage Streamlit app. Although, unlike Streamlit, you can locate the files wherever you want to; here we put them in a folder called <em>pages</em>. Let’s look at the simplest page first.</p>

<h3 id="co2-sources-page">CO2 sources page</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">taipy.gui.builder</span> <span class="k">as</span> <span class="n">tgb</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="k">def</span> <span class="nf">plot_chart</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">Year</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fig</span>

<span class="k">def</span> <span class="nf">on_select</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">var</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
    <span class="n">state</span><span class="p">.</span><span class="n">fig2</span> <span class="o">=</span> <span class="nf">plot_chart</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">df</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">val</span><span class="p">)</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">data/co2-emissions-by-category.csv</span><span class="sh">"</span><span class="p">)</span> 
<span class="n">src</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Total</span><span class="sh">"</span>
<span class="n">fig2</span> <span class="o">=</span> <span class="nf">plot_chart</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">src</span><span class="p">)</span>

<span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nc">Page</span><span class="p">()</span> <span class="k">as</span> <span class="n">page</span><span class="p">:</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span> <span class="n">value</span> <span class="o">=</span> <span class="sh">"</span><span class="s">### CO2 Emissions by source since the mid-19th Century</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_name</span><span class="o">=</span><span class="sh">"</span><span class="s">color-secondary</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">selector</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Select a CO2 Source</span><span class="sh">"</span><span class="p">,</span> 
                    <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">{src}</span><span class="sh">"</span><span class="p">,</span> 
                    <span class="n">lov</span><span class="o">=</span><span class="sh">"</span><span class="s">Total;Coal;Oil;Gas;Cement</span><span class="sh">"</span><span class="p">,</span> 
                    <span class="n">dropdown</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
                    <span class="n">on_change</span><span class="o">=</span><span class="n">on_select</span><span class="p">)</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">chart</span><span class="p">(</span><span class="n">figure</span><span class="o">=</span><span class="sh">"</span><span class="s">{fig2}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>This page displays the bar chart of CO2 emissions by source. To select the source it utilises a drop-down menu, the chart is drawn using Plotly and the data, derived from Our World in Data[1], are read from a CSV file. The page itself is constructed using Taipy’s GUI Builder package.</p>

<p>The imports are self-explanatory and, for the moment, let’s ignore the function definitions. The first code to be executed sets up some state (global) variables that will be used to create the default page:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">df</code> is a Pandas dataframe with the emissions data</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">src</code> is a string - the default CO2 source</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fig2</code> is set to an initial bar chart</p>
  </li>
</ul>

<p><img src="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/co2sourcedata.png?raw=true" alt="" /></p>

<p>You can see a snapshot of the data above. In the bar chart, we will be displaying the total emissions or those sourced from coal, oil, gas, and cement over all of the years covered in the data.</p>

<p>Let’s see how we construct the page.</p>

<p>We use <code class="language-plaintext highlighter-rouge">tgb.Page()</code> to create a variable called <code class="language-plaintext highlighter-rouge">page</code> and  use a <code class="language-plaintext highlighter-rouge">with</code> statement to create the elements within the page.</p>

<p>The first element is a simple header in a Markdown string and the last element is a chart which takes the state variable <code class="language-plaintext highlighter-rouge">fig2</code> as a parameter (the curly brace notation binds the state variable <code class="language-plaintext highlighter-rouge">fig2</code> to the chart element so that whenever <code class="language-plaintext highlighter-rouge">fig2</code> is updated the chart element is updated, too).</p>

<p>This leaves the bit in the middle which is a call to <code class="language-plaintext highlighter-rouge">tgb.selector()</code>  -  this implements the drop-down menu.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">tgb</span><span class="p">.</span><span class="nf">selector</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Select a CO2 Source</span><span class="sh">"</span><span class="p">,</span> 
                    <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">{src}</span><span class="sh">"</span><span class="p">,</span> 
                    <span class="n">lov</span><span class="o">=</span><span class="sh">"</span><span class="s">Total;Coal;Oil;Gas;Cement</span><span class="sh">"</span><span class="p">,</span> 
                    <span class="n">dropdown</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
                    <span class="n">on_change</span><span class="o">=</span><span class="n">on_select</span><span class="p">)</span>
</code></pre></div></div>

<p>The parameter values are:</p>

<ul>
  <li>
    <p>a label for the menu,</p>
  </li>
  <li>
    <p>the default menu selection,</p>
  </li>
  <li>
    <p>the list of variables that will appear in the menu “Total;Coal;Oil;Gas;Cement”,</p>
  </li>
  <li>
    <p>a flag to determine whether the menu drops down (otherwise it is a fixed menu),</p>
  </li>
  <li>
    <p>the callback function that will be called when the menu selection changes.</p>
  </li>
</ul>

<p>So the default selection is “Total” (we initialised it earlier) and when we change this the function <code class="language-plaintext highlighter-rouge">on_select()</code> is called.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">on_select</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">var</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
    <span class="n">state</span><span class="p">.</span><span class="n">fig2</span> <span class="o">=</span> <span class="nf">plot_chart</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">df</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">val</span><span class="p">)</span>
</code></pre></div></div>

<p>All callback functions have the same default parameters:</p>

<p><code class="language-plaintext highlighter-rouge">state</code>: is the set of state (global) variables,</p>

<p><code class="language-plaintext highlighter-rouge">var</code>: is the name of the variable that is bound to the called control,</p>

<p><code class="language-plaintext highlighter-rouge">val</code>: is the value of <code class="language-plaintext highlighter-rouge">var</code>.</p>

<p>And we use these to call the plotting function and update the state variable <code class="language-plaintext highlighter-rouge">fig2</code> which, because it is bound to the chart element on the page, means that the chart element is updated with the chart for the newly selected CO2 source.</p>

<h3 id="co2-map-page">CO2 Map page</h3>

<p>This page looks more complex the the previous one but that is mainly due to the extra code needed to create a choropleth.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">taipy.gui.builder</span> <span class="k">as</span> <span class="n">tgb</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="n">year_max</span> <span class="o">=</span> <span class="mi">2020</span>
<span class="n">year_min</span> <span class="o">=</span> <span class="mi">1950</span>
<span class="n">year</span> <span class="o">=</span> <span class="n">year_max</span>

<span class="c1"># define parameters for map graphic
</span><span class="n">df_total</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">data/co2_total.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">col</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Annual CO₂ emissions</span><span class="sh">'</span>    <span class="c1"># the column that contains the emissions data
</span><span class="nb">max</span> <span class="o">=</span> <span class="n">df_total</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span>       <span class="c1"># maximum emissions value for color range
</span><span class="nb">min</span> <span class="o">=</span> <span class="n">df_total</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">min</span><span class="p">()</span>       <span class="c1"># minimum emissions value for color range
</span>
<span class="k">def</span> <span class="nf">plot_choro</span><span class="p">(</span><span class="n">year</span><span class="p">):</span>
    <span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">choropleth</span><span class="p">(</span><span class="n">df_total</span><span class="p">[</span><span class="n">df_total</span><span class="p">[</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="n">year</span><span class="p">],</span> 
        <span class="n">locations</span><span class="o">=</span><span class="sh">"</span><span class="s">Code</span><span class="sh">"</span><span class="p">,</span>       <span class="c1"># The ISO code for the Entity (country)
</span>        <span class="n">color</span><span class="o">=</span><span class="n">col</span><span class="p">,</span>              <span class="c1"># color is set by this column
</span>        <span class="n">hover_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Entity</span><span class="sh">"</span><span class="p">,</span>    <span class="c1"># hover name is the name of the Entity (country)
</span>        <span class="n">range_color</span><span class="o">=</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span><span class="nb">max</span><span class="p">),</span>  <span class="c1"># the range of values as set above
</span>        <span class="n">scope</span><span class="o">=</span> <span class="sh">'</span><span class="s">world</span><span class="sh">'</span><span class="p">,</span>         <span class="c1"># a world map - the default
</span>        <span class="n">projection</span><span class="o">=</span><span class="sh">'</span><span class="s">equirectangular</span><span class="sh">'</span><span class="p">,</span> 
        <span class="n">title</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">CO2 Emissions by country in </span><span class="si">{</span><span class="n">year</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">color_continuous_scale</span><span class="o">=</span><span class="n">px</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="n">sequential</span><span class="p">.</span><span class="n">Reds</span>
        <span class="p">)</span>

    <span class="n">fig</span><span class="p">.</span><span class="nf">update_layout</span><span class="p">(</span>
        <span class="n">margin</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="n">fig</span>

<span class="n">fig</span> <span class="o">=</span> <span class="nf">plot_choro</span><span class="p">(</span><span class="n">year_max</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">on_slider</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">var</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>    
    <span class="n">state</span><span class="p">.</span><span class="n">fig</span> <span class="o">=</span> <span class="nf">plot_choro</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>

<span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nc">Page</span><span class="p">()</span> <span class="k">as</span> <span class="n">page</span><span class="p">:</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span> <span class="n">value</span><span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">### Country CO2 Emissions from </span><span class="si">{</span><span class="n">year_min</span><span class="si">}</span><span class="s"> to </span><span class="si">{</span><span class="n">year_max</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_name</span><span class="o">=</span><span class="sh">"</span><span class="s">color-secondary</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">#### Use the slider to select a year</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">slider</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">{year}</span><span class="sh">"</span><span class="p">,</span> <span class="nb">min</span><span class="o">=</span><span class="n">year_min</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="n">year_max</span><span class="p">,</span> <span class="n">on_change</span><span class="o">=</span><span class="n">on_slider</span><span class="p">)</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">chart</span><span class="p">(</span><span class="n">figure</span><span class="o">=</span><span class="sh">"</span><span class="s">{fig}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>If you look closely you will see that the structure is very similar to the <em>CO2 Sources</em> page. The main difference to the page layout is that we include a slider element instead of a menu. The remainder is much the same: some state variables are given initial values; there is a plotting function; and there is a callback function that calls the plotting function in the same way as before.</p>

<p>The more interesting page is the home page as this uses the <code class="language-plaintext highlighter-rouge">navigate()</code> function to implement navigation separately from the menu bar.</p>

<h3 id="the-home-page-with-button-navigation">The Home page with button navigation</h3>

<p>Here we demonstrate the second method of navigation. We still have the navigation bar (that’s on all of the pages) but here we also see the use of the <code class="language-plaintext highlighter-rouge">navigate()</code> function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">taipy.gui</span> <span class="kn">import</span> <span class="n">navigate</span>
<span class="kn">import</span> <span class="n">taipy.gui.builder</span> <span class="k">as</span> <span class="n">tgb</span>

<span class="k">def</span> <span class="nf">on_button_press</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
    <span class="n">page</span> <span class="o">=</span> <span class="sh">"</span><span class="s">home</span><span class="sh">"</span>
    <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="sh">"</span><span class="s">CO2</span><span class="sh">"</span><span class="p">:</span> <span class="n">page</span> <span class="o">=</span> <span class="sh">"</span><span class="s">CO2_Sources</span><span class="sh">"</span> 
    <span class="k">if</span> <span class="nb">id</span> <span class="o">==</span> <span class="sh">"</span><span class="s">CO2Country</span><span class="sh">"</span><span class="p">:</span> <span class="n">page</span> <span class="o">=</span> <span class="sh">"</span><span class="s">CO2_by_Country</span><span class="sh">"</span>
    <span class="nf">navigate</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">to</span><span class="o">=</span><span class="n">page</span><span class="p">)</span>

<span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nc">Page</span><span class="p">()</span> <span class="k">as</span> <span class="n">page</span><span class="p">:</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span> <span class="n">value</span> <span class="o">=</span> <span class="sh">"</span><span class="s">## World CO2 Emissions</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span> <span class="o">=</span> <span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_name</span><span class="o">=</span><span class="sh">"</span><span class="s">color-secondary</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span> <span class="n">value</span> <span class="o">=</span> <span class="sh">"</span><span class="s">#### Explore the graphs using the navigation bar above, or the buttons below.</span><span class="sh">"</span><span class="p">,</span> 
             <span class="n">mode</span> <span class="o">=</span> <span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">layout</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="sh">"</span><span class="s">1 1</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
            <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">![](images/co2emissionspagesmall.png)</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">)</span> 
            <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">layout</span><span class="p">(</span><span class="sh">"</span><span class="s">2 1</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
                    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">__Select the Co2 Emissions page here:__</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">)</span>
                <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
                    <span class="n">tgb</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">CO2 by source</span><span class="sh">"</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">CO2</span><span class="sh">"</span><span class="p">,</span>  <span class="n">on_action</span><span class="o">=</span><span class="n">on_button_press</span><span class="p">)</span>
        <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
            <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">![](images/worldtemppagesmall.png)</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">)</span> 
            <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">layout</span><span class="p">(</span><span class="sh">"</span><span class="s">2 1</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
                    <span class="n">tgb</span><span class="p">.</span><span class="nf">text</span><span class="p">(</span><span class="sh">"</span><span class="s">__Select CO2 by Country page here:__</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">md</span><span class="sh">'</span><span class="p">)</span>
                <span class="k">with</span> <span class="n">tgb</span><span class="p">.</span><span class="nf">part</span><span class="p">():</span>
                    <span class="n">tgb</span><span class="p">.</span><span class="nf">button</span><span class="p">(</span><span class="sh">"</span><span class="s">CO2 by Country</span><span class="sh">"</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="sh">"</span><span class="s">CO2Country</span><span class="sh">"</span><span class="p">,</span> <span class="n">on_action</span><span class="o">=</span><span class="n">on_button_press</span><span class="p">)</span>
</code></pre></div></div>

<p>The page begins with text headers and then is split into two columns - each column is defined in a <code class="language-plaintext highlighter-rouge">tgb.part()</code>. In those columns we display images of the other pages via Markdown text and then, below the images there are two more columns, the left one for a label and the right one for a button. The callback function defined for the two buttons is the same. <code class="language-plaintext highlighter-rouge">on_button_press()</code> and each button had an <code class="language-plaintext highlighter-rouge">id </code>set for it - this id will be passed into the callback function.</p>

<p>The callback, itself, looks at the <code class="language-plaintext highlighter-rouge">id </code>and determines which page to navigate to using the <code class="language-plaintext highlighter-rouge">navigate()</code> function, which, as you can see, requires the state and a page name to be passed to it.</p>

<p>And that’s it.</p>

<h2 id="conclusion">Conclusion</h2>

<p>We’ve seen how easy it is to create a multipage app in Taipy by creating each page in a separate file, setting the content to a local variable <code class="language-plaintext highlighter-rouge">page </code>and then importing each of the pages into a main program.</p>

<p>Navigation can be automatically included using a navigation bar control or by explicit use of the <code class="language-plaintext highlighter-rouge">navigation </code>function.</p>

<p>Taipy, an interesting alternative to Dash or Streamlit, has a character and capabilities of its own. It is not such a mature product as the other two, perhaps, but looks very capable.</p>

<hr />

<p>Thanks for reading and I hope you enjoyed this look at multipage apps in Taipy. Please download the code and data (link below) and give it a go. Any opinions, criticisms or any other comments are always welcome.</p>

<p>To see more articles, follow me here on <a href="https://medium.com/@alan-jones/subscribe">Medium</a>, or subscribe to my free, occasional, <a href="http://technofile.substack.com/">newsletter</a>. Older articles are listed on my <a href="http://alanjones2.github.io/">webpage</a>.</p>

<h1 id="notes">Notes</h1>

<ol>
  <li>The data used in this article is derived from <a href="https://ourworldindata.org/">Our World in Data</a>. OWID publishes articles and data about the most pressing problems that the world faces. All its content is open source and its data is downloadable — see <a href="https://ourworldindata.org/about">About — Our World in Data</a> for details.</li>
  <li>Code and data for this app are available in my <a href="https://github.com/alanjones2/taipyapps">GitHub</a> repo in the folder ‘multipage’.</li>
  <li>All images, screenshots, diagrams, etc. are by me, the author, unless otherwise noted.</li>
  <li>While there is a commercial version of Taipy, this article uses the open source version.</li>
  <li>Disclaimer: I have no connection with Taipy other than as a user of their products.</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Taipy supports easy navigation between pages in Python web apps - we create a simple CO2 emissions app]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/ria-CvTaPeo3NRk-unsplash.jpg?raw=true" /><media:content medium="image" url="https://github.com/alanjones2/taipyapps/blob/main/multipage/images/ria-CvTaPeo3NRk-unsplash.jpg?raw=true" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">From Data to Visualization with the OpenAI Assistants API and GPT-4o</title><link href="http://localhost:4000/2024/08/27/From-Data-to-Visualization-with-the-OpenAI-Assistants-API-and-GPT-4o.html" rel="alternate" type="text/html" title="From Data to Visualization with the OpenAI Assistants API and GPT-4o" /><published>2024-08-27T00:00:00+02:00</published><updated>2024-08-27T00:00:00+02:00</updated><id>http://localhost:4000/2024/08/27/From%20Data%20to%20Visualization%20with%20the%20OpenAI%20Assistants%20API%20and%C2%A0GPT-4o</id><content type="html" xml:base="http://localhost:4000/2024/08/27/From-Data-to-Visualization-with-the-OpenAI-Assistants-API-and-GPT-4o.html"><![CDATA[<h2 id="we-explore-the-code-completion-tool-from-openais-assistants-api-to-create-visualizations-directly-fromdata">We explore the Code Completion tool from OpenAI’s Assistants API to create visualizations directly from data</h2>

<p><img src="https://cdn-images-1.medium.com/max/1200/1*BhucSzDp94gE2iZLAgrW4g.png" alt="" /></p>

<p><em>Programming tools — Image constructed from photos by <a href="https://unsplash.com/@quaritsch?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Quaritsch Photography</a> and <a href="https://unsplash.com/@tonchik?utm_source=medium&amp;utm_medium=referral">Anton Savinov</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a></em></p>

<p>As GPT-4’s capabilities continue to expand, OpenAI’s tools built on its technology are evolving into increasingly powerful assets for developers.</p>

<p>In this article, we are going to explore the chart-making capabilities of the latest iteration. We’ll equip an Assistant with a data file and specific instructions to see how it brings our data visualization ideas into being.</p>

<p>We will use the built-in tools in the Assistant API to achieve this.</p>

<p>Currently, in the OpenAI Python package (v1.30.0, at the time of writing) the Assistants API includes the tools, File Search, Code Completion and Function Calling.</p>

<p>Function Calling lets the developer define functions that the AI can intelligently choose in order to complete a task; File Search allows the developer to upload a variety of file types which can be stored, RAG style, in a vector database; and Code Completion lets the assistant write and run Python programs in a sandboxed environment to solve programming and math problems.</p>

<p>Code Completion can also work with uploaded files, which can be processed to create data files and images of charts. And that is the functionality that we will be using here.</p>

<p>The code that we will explore below will load a data file (in CSV form), and by using appropriate prompts, instruct our assistant to create a graph from the data. We will then download the graph and display it.</p>

<p>Using plain English prompts, we can easily generate charts such as the ones below from raw CSV data.</p>

<p><img src="https://cdn-images-1.medium.com/max/1200/1*EWQK128vsaUAwZHEMr3xfw.png" alt="" /></p>

<h3 id="openai-assistants">OpenAI Assistants</h3>

<p>I have explained OpenAI’s Assistants API, and how to get started with them previously (<a href="https://medium.com/towards-data-science/how-to-use-the-powerful-new-assistants-api-for-data-analysis-c9ea1cab0b53"><em>Use OpenAI’s Powerful New Assistants API for Data Analysis</em></a>). While the new versions of the API have rendered this article a little out of date, the description of Assistants and how they work is still broadly correct, as is how to get up and running with an OpenAI account.</p>

<p>So, for a more detailed look, you can refer to that article and here I will limit myself to a brief introduction of the basics before getting into the nitty-gritty.</p>

<h3 id="openai">OpenAI</h3>

<p>Firstly, of course, you will need an OpenAI account, and you need to be aware that you will be charged for using it. However, the fees are not high: running the code we will describe here once, should cost only a few cents. Other charges apply, such as file storage, and while they are not likely to be relevant in this context, you should check up on the latest fees.</p>

<p>Having said that, you should regularly use the OpenAI dashboard to check your usage so as to make sure you are not racking up a large bill.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*MxXiUczWlKIq9FPqc1nJsw.png" alt="" /></p>

<p><em>The OpenAI dashboard menu</em></p>

<p>You should also use the dashboard to check the storage that you are using. All the output from an assistant is stored along with any files that you have uploaded. You can delete them manually from the dashboard, and you probably want to do this because while you may not be charged, over time a lot of unnecessary files can accumulate in your workspace.</p>

<h3 id="assistants-threads-andruns">Assistants, Threads, and Runs</h3>

<p>These are the three basic objects in the Assistants API.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Assistants:</code> As you might imagine, these are the fundamental part of the setup. When we create an assistant, we specify various attributes such as: a model (e.g. <code class="language-plaintext highlighter-rouge">gpt-4o</code>); instructions that inform the model about the type of behaviour we expect from it; tools such as the <em>code interpreter</em> and <em>file search</em>; and files that we want the model to use.</li>
  <li><code class="language-plaintext highlighter-rouge">Threads:</code> These store the state of a conversation and contain the <code class="language-plaintext highlighter-rouge">messages</code> that are generated both by the user and the assistant. A thread is associated with an assistant when a <code class="language-plaintext highlighter-rouge">run</code> is started (see below).</li>
  <li><code class="language-plaintext highlighter-rouge">Runs:</code> These control the execution of an <code class="language-plaintext highlighter-rouge">assistant</code> with a <code class="language-plaintext highlighter-rouge">thread</code>. The <code class="language-plaintext highlighter-rouge">run</code> takes the information in the <code class="language-plaintext highlighter-rouge">thread</code> and the <code class="language-plaintext highlighter-rouge">assistant</code> and manages the interaction with the LLM. <code class="language-plaintext highlighter-rouge">Runs</code> go through a number of steps before completion. When the <code class="language-plaintext highlighter-rouge">run</code> is complete, we can interrogate the <code class="language-plaintext highlighter-rouge">thread</code> to see what response the assistant has come up with.</li>
</ul>

<p>In addition to these basic objects, in a thread, we need <code class="language-plaintext highlighter-rouge">messages</code> that will contain the instructions for the model and its responses. Also, we shall use <code class="language-plaintext highlighter-rouge">files</code> which are separate objects that assistants use and which hold the details of files that are uploaded.</p>

<h3 id="coding-the-assistant">Coding the Assistant</h3>

<p>We will need to go through a number of steps to create and run our assistant. The sequence of events is listed below and gives an overview of how each of the components is used.</p>

<p>The steps are:</p>

<ul>
  <li>Create an OpenAI client with our API key.</li>
  <li>Upload a local file and retrieve the file object for later use.</li>
  <li>Create an assistant with instructions for the model and the ID of the uploaded file.</li>
  <li>Create a thread that also includes the file ID and instructions for the model.</li>
  <li>Run the assistant and thread.</li>
  <li>Display the messages generated by both the user and the AI that are now in the thread (this should show the process the model went through to produce a result, and if anything went wrong we can, hopefully, see what it was).</li>
  <li>Retrieve the generated image and display it.</li>
</ul>

<p>We will code each of the bullet points above in Python and describe exactly what is happening. I’ve written the code in the form of a Jupyter notebook, so if you want to follow along, copy each section of code into a new notebook cell, and you’ll have a copy of my notebook.</p>

<p>The first step is to create a client.</p>

<h4 id="create-aclient">Create a client</h4>

<p>The client gives us access to the OpenAI API. We need to provide it with an API key and in the code below, I have included an input statement so that you need to enter the key manually.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>  

<span class="n">key</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">API key</span><span class="sh">"</span><span class="p">)</span>  
<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">key</span><span class="p">)</span>
</code></pre></div></div>

<p>You could also hard code the key (but make sure your code doesn’t go public).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>  

<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="sh">"</span><span class="s">Your key here</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Or, if your key is stored as an environment variable then the client will find it automatically and all you need to code is…</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>  

<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">()</span>
</code></pre></div></div>

<p>One of these is your first Jupyter Notebook cell.</p>

<h4 id="upload-afile">Upload a file</h4>

<p>First, you need a file! I’m using a CSV file that is derived from data on the <a href="https://ourworldindata.org/co2-and-greenhouse-gas-emissions?insight=human-greenhouse-gas-emissions-have-increased-global-average-temperatures#key-insights">Our World in Data (OWID) website.</a> OWID is a great source of information and data, and they helpfully allow all of their content to be used freely under the <a href="https://creativecommons.org/licenses/by/4.0/">Creative Commons BY license</a>.</p>

<p>The file records worldwide CO2 emissions from 1850 to 2021 (the original data contained data for many other entries, but I have only included World data, here). You can see what it looks like in the screenshot below.</p>

<p><img src="https://cdn-images-1.medium.com/max/1200/1*0WawRuVQMFfpdXqlDakt3Q.png" alt="" /></p>

<p>I’ve called the file <em>world_df.csv</em> and, I also want to set a variable with the name that I’m going to give to the assistant. So, my second notebook cell contains two variables for these values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filename</span> <span class="o">=</span> <span class="sh">"</span><span class="s">world_df.csv</span><span class="sh">"</span>  
<span class="n">assistant_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">data-analyst-v0.1</span><span class="sh">"</span>
</code></pre></div></div>

<p>If I want to use the code to read different files or create a new assistant, I can change the values in this cell.</p>

<p>The next cell uploads the file. The main work of uploading a file is done by the <code class="language-plaintext highlighter-rouge">client.files.create</code> method. In the code below, this method takes two parameters, the file itself and the string ‘assistants’ which tells the client what the purpose of the file is.</p>

<p>The code does a little more than just upload a file. I’m assuming that the code will be run more than once (perhaps with different instructions) and I don’t want to duplicate the files. So, if the file is new, the code uploads it, but if it had been uploaded earlier, the code retrieves that existing file.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check if file is already uploaded  
</span><span class="n">filelist</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">list</span><span class="p">(</span><span class="n">purpose</span><span class="o">=</span><span class="sh">"</span><span class="s">assistants</span><span class="sh">"</span><span class="p">)</span>  
<span class="n">filenames</span> <span class="o">=</span>  <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">filename</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">filelist</span><span class="p">.</span><span class="n">data</span><span class="p">]</span>  

<span class="c1"># Upload a file with an "assistants" purpose or use existing one  
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>  
  <span class="nb">file</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>  
    <span class="nb">file</span><span class="o">=</span><span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">),</span>  
    <span class="n">purpose</span><span class="o">=</span><span class="sh">'</span><span class="s">assistants</span><span class="sh">'</span>  
  <span class="p">)</span>  
<span class="k">else</span><span class="p">:</span>  
  <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">filelist</span><span class="p">:</span>  
    <span class="k">if</span> <span class="n">f</span><span class="p">.</span><span class="n">filename</span> <span class="o">==</span> <span class="n">filename</span><span class="p">:</span>  
      <span class="nb">file</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">retrieve</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>  
      <span class="k">break</span>
</code></pre></div></div>

<p>We can check if the file exists by downloading a list of already uploaded files and searching it to see if our file is there. The method <code class="language-plaintext highlighter-rouge">client.files.list()</code> retrieves the list from the client and we pass the parameter<code class="language-plaintext highlighter-rouge">purpose='assistants'</code> to show the type of file we are interested in.</p>

<p>We can then scan the list to find the file name of interest. If it is not there, we upload, otherwise we fetch the file object from the client. In either case, <code class="language-plaintext highlighter-rouge">file</code>is set to the file object.</p>

<p>In an app, this code could be usefully placed in a function that returned the file object.</p>

<p>So, we now have the file uploaded and a record of the file object. Next, we need to create an assistant that will use that file.</p>

<h4 id="create-an-assistant">Create an assistant</h4>

<p>As with the uploaded file, we check to see if it already exists. Again, if we have run this code before, then the assistant will have already been created, and we don’t want to duplicate it, and so we just retrieve the existing assistant object. Otherwise, we create a new one.</p>

<p>The code for this functionality is pretty much the same as we used for the file upload.</p>

<p>Creating an assistant, is done with a call to <code class="language-plaintext highlighter-rouge">client.beta.assistants.create().</code></p>

<p>We set the parameters for the name of the assistant, some basic instructions (these will be a System Prompt), the model that we want to use (in the case GPT-4o), the tools that we require (code interpreter) and the resources. In this last parameter, we can see that we reference the file object for the uploaded file and indicate that the code interpreter will be using the file.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check if assistant already exists  
</span><span class="n">assistant_list</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">beta</span><span class="p">.</span><span class="n">assistants</span><span class="p">.</span><span class="nf">list</span><span class="p">()</span>  
<span class="n">assistant_names</span> <span class="o">=</span>  <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">assistant_list</span><span class="p">.</span><span class="n">data</span><span class="p">]</span>  

<span class="k">if</span> <span class="ow">not</span> <span class="n">assistant_name</span> <span class="ow">in</span> <span class="n">assistant_names</span><span class="p">:</span>  
  <span class="c1"># Create an assistant using the file ID  
</span>  <span class="n">assistant</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">beta</span><span class="p">.</span><span class="n">assistants</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>  
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">data-analyst-v0.1</span><span class="sh">"</span><span class="p">,</span>  
    <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">You are a data analyst</span><span class="sh">"</span><span class="p">,</span>  
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o</span><span class="sh">"</span><span class="p">,</span>  
    <span class="n">tools</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">code_interpreter</span><span class="sh">"</span><span class="p">}],</span>  
    <span class="n">tool_resources</span><span class="o">=</span><span class="p">{</span>  
      <span class="sh">"</span><span class="s">code_interpreter</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>  
        <span class="sh">"</span><span class="s">file_ids</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="nb">file</span><span class="p">.</span><span class="nb">id</span><span class="p">]</span>  
      <span class="p">}</span>  
    <span class="p">}</span>  
  <span class="p">)</span>  
<span class="k">else</span><span class="p">:</span>  
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">assistant_list</span><span class="p">:</span>  
      <span class="k">if</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">assistant_name</span><span class="p">:</span>  
        <span class="n">assistant</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">beta</span><span class="p">.</span><span class="n">assistants</span><span class="p">.</span><span class="nf">retrieve</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>  
        <span class="k">break</span>
</code></pre></div></div>

<p>Again, in an app, this could be a function that returns the assistant object.</p>

<h4 id="create-athread">Create a thread</h4>

<p>To create a thread, we simply call <code class="language-plaintext highlighter-rouge">client.beta.threads.create()</code> and specify the first message that will be passed to the assistant when it runs the assistant with this thread.</p>

<p>As you can see in the code below, in the message we set the role, the prompt, and add the file ID as an attachment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">thread</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">beta</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>  
  <span class="n">messages</span><span class="o">=</span><span class="p">[</span>  
    <span class="p">{</span>  
      <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span>  
      <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Using the csv file attached, display a graph of </span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="s"> against </span><span class="sh">'</span><span class="s">Annual CO2 emissions</span><span class="sh">"</span><span class="p">,</span>  
      <span class="sh">"</span><span class="s">attachments</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>  
        <span class="p">{</span>  
          <span class="sh">"</span><span class="s">file_id</span><span class="sh">"</span><span class="p">:</span> <span class="nb">file</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>  
          <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="p">[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">code_interpreter</span><span class="sh">"</span><span class="p">}]</span>  
        <span class="p">}</span>  
      <span class="p">]</span>  
    <span class="p">}</span>  
  <span class="p">]</span>  
<span class="p">)</span>
</code></pre></div></div>

<p>The prompt that we are sending to the LLM is:</p>

<p><em>“Using the csv file attached, display a graph of ‘Year’ against ‘Annual CO2 emissions”.</em></p>

<p>That’s a fairly straightforward requirement that requires the code interpreter to analyse the data file and generate the required code.</p>

<p>Now we are all set to run the assistant with the thread.</p>

<h4 id="create-arun">Create a run</h4>

<p>A run takes the assistant and the thread and submits them to the LLM. It runs asynchronously and goes through a number of steps before it finishes.</p>

<p>Consequently, we need to wait for a result, and we can do this in two ways: polling or streaming. Polling repeatedly checks the status of the run until it is completed. Whereas with streaming the various steps are automatically detected and functions can be mapped onto those events with an event hander.</p>

<p>Below is the streaming code from the <a href="https://platform.openai.com/docs/assistants/overview?context=with-streaming">OpenAI documentation</a> (with a changed message) which suffices for this experiment.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing_extensions</span> <span class="kn">import</span> <span class="n">override</span>  
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AssistantEventHandler</span>  

<span class="c1"># First, we create a EventHandler class to define  
# how we want to handle the events in the response stream.  
</span>
<span class="k">class</span> <span class="nc">EventHandler</span><span class="p">(</span><span class="n">AssistantEventHandler</span><span class="p">):</span>  
  <span class="nd">@override</span>  
  <span class="k">def</span> <span class="nf">on_text_created</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>  
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">assistant &gt; </span><span class="si">{</span><span class="n">text</span><span class="p">.</span><span class="n">value</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  

  <span class="nd">@override</span>  
  <span class="k">def</span> <span class="nf">on_text_delta</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delta</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">):</span>  
    <span class="nf">print</span><span class="p">(</span><span class="n">delta</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  

  <span class="k">def</span> <span class="nf">on_tool_call_created</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">tool_call</span><span class="p">):</span>  
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">assistant &gt; </span><span class="si">{</span><span class="n">tool_call</span><span class="p">.</span><span class="nb">type</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  

  <span class="k">def</span> <span class="nf">on_tool_call_delta</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delta</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">):</span>  
    <span class="k">if</span> <span class="n">delta</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">code_interpreter</span><span class="sh">'</span><span class="p">:</span>  
      <span class="k">if</span> <span class="n">delta</span><span class="p">.</span><span class="n">code_interpreter</span><span class="p">.</span><span class="nb">input</span><span class="p">:</span>  
        <span class="nf">print</span><span class="p">(</span><span class="n">delta</span><span class="p">.</span><span class="n">code_interpreter</span><span class="p">.</span><span class="nb">input</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  
      <span class="k">if</span> <span class="n">delta</span><span class="p">.</span><span class="n">code_interpreter</span><span class="p">.</span><span class="n">outputs</span><span class="p">:</span>  
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n\n</span><span class="s">output &gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  
        <span class="k">for</span> <span class="n">output</span> <span class="ow">in</span> <span class="n">delta</span><span class="p">.</span><span class="n">code_interpreter</span><span class="p">.</span><span class="n">outputs</span><span class="p">:</span>  
          <span class="k">if</span> <span class="n">output</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">logs</span><span class="sh">"</span><span class="p">:</span>  
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="si">{</span><span class="n">output</span><span class="p">.</span><span class="n">logs</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  

<span class="c1"># Then, we use the `stream` SDK helper  
# with the `EventHandler` class to create the Run  
# and stream the response.  
</span>
<span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">beta</span><span class="p">.</span><span class="n">threads</span><span class="p">.</span><span class="n">runs</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span>  
  <span class="n">thread_id</span><span class="o">=</span><span class="n">thread</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>  
  <span class="n">assistant_id</span><span class="o">=</span><span class="n">assistant</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>  
  <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">create a downloadable file for the graph</span><span class="sh">"</span><span class="p">,</span>  
  <span class="n">event_handler</span><span class="o">=</span><span class="nc">EventHandler</span><span class="p">(),</span>  
<span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>  
  <span class="n">stream</span><span class="p">.</span><span class="nf">until_done</span><span class="p">()</span>
</code></pre></div></div>

<p>The function which starts the run is <code class="language-plaintext highlighter-rouge">client.bet.threads.run.stream()</code> and we pass the IDs of the thread and the assistant along with instructions for this particular run and the event handler which is defined above.</p>

<p>We won’t go into detail about the workings of the event handler, suffice it to say that it catches events when text is created or a tool outputs something and prints the result. Its functionality is fine for experimental purposes but for a real app, you would probably want to do something more sophisticated with these outputs.</p>

<p>Note that we specified in the thread that we wanted a graph to be generated and here in the run we additionally ask it to generate a downloadable file.</p>

<p>The output from the run is shown below and mostly comprises the Python code generated by the assistant.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">assistant</span> <span class="o">&gt;</span> <span class="n">code_interpreter</span>  

<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>  

<span class="c1"># Load the CSV file  
</span><span class="n">file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/mnt/data/file-8XwqMOlaH6hoKEEKOYXPYqTh</span><span class="sh">'</span>  
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>  

<span class="c1"># Display the first few rows of the dataframe to understand its structure  
</span><span class="n">data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>  

<span class="c1"># Plot 'Year' vs 'Annual CO₂ emissions'  
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Annual CO₂ emissions</span><span class="sh">'</span><span class="p">],</span> <span class="n">marker</span><span class="o">=</span><span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Annual CO₂ emissions</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Year vs Annual CO₂ emissions</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>  

<span class="c1"># Save the plot to a file  
</span><span class="n">plot_file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/mnt/data/year_vs_annual_co2_emissions.png</span><span class="sh">'</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="n">plot_file_path</span><span class="p">)</span>  
<span class="n">plot_file_path</span>  

<span class="n">output</span> <span class="o">&gt;</span>  

<span class="n">assistant</span> <span class="o">&gt;</span> <span class="n">The</span> <span class="n">graph</span> <span class="n">depicting</span> <span class="sh">'</span><span class="s">Year</span><span class="sh">'</span> <span class="n">against</span> <span class="sh">'</span><span class="s">Annual CO₂ emissions</span><span class="sh">'</span> <span class="n">has</span> <span class="n">been</span> <span class="n">created</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span> <span class="n">download</span> <span class="n">the</span> <span class="n">plot</span> <span class="n">using</span> <span class="n">the</span> <span class="n">link</span> <span class="n">below</span><span class="p">:</span>  

<span class="p">[</span><span class="n">Download</span> <span class="n">the</span> <span class="n">graph</span><span class="p">](</span><span class="n">sandbox</span><span class="p">:</span><span class="o">/</span><span class="n">mnt</span><span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">year_vs_annual_co2_emissions</span><span class="p">.</span><span class="n">png</span><span class="p">)</span><span class="bp">None</span>
</code></pre></div></div>

<p><em>To be clear the code above is NOT to be included in the Jupyter Notebook. It was generated and run by GPT.</em></p>

<p>The output shows that the LLM has understood our instructions, has generated the code to create the correct graph, has run that code, and has created an image file that we can download.</p>

<h4 id="retrieve-the-generated-file">Retrieve the generated file</h4>

<p>All we need to do now is find the file that the assistant generated and download it.</p>

<p>The last code cell in our notebook is shown below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filelist</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">list</span><span class="p">(</span><span class="n">purpose</span><span class="o">=</span><span class="sh">"</span><span class="s">assistants_output</span><span class="sh">"</span><span class="p">)</span>  

<span class="n">image_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">filelist</span><span class="p">.</span><span class="n">data</span> <span class="k">if</span> <span class="sh">"</span><span class="s">png</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">.</span><span class="n">filename</span><span class="p">]</span>  

<span class="nb">id</span> <span class="o">=</span> <span class="n">image_list</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nb">id</span> <span class="c1"># the last in the list is the latest  
</span>
<span class="n">image_data</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">content</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>  
<span class="n">image_data_bytes</span> <span class="o">=</span> <span class="n">image_data</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>  

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">./my-image.png</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>  
    <span class="nb">file</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">image_data_bytes</span><span class="p">)</span>
</code></pre></div></div>

<p>Again, we assume that this (or similar) code may have been run before, so there might well be more than one image file.</p>

<p>So, we first get a list of all the files that are labelled as “assistants_output”, then we create a list of images (i.e. files with the extension ‘.png’) and then we find the last file in that list — that will be the last one that was generated.</p>

<p>And to display the chart we can create a markdown cell with the following content.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">![](</span>my-image.png<span class="o">)</span>
</code></pre></div></div>

<p>The result can be seen in the image below:</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*NQxjzaIMsTw0AueTEQPXUQ.png" alt="" /></p>

<p>An example of an AI-generated graph: CO2 emissions over time</p>

<h3 id="changing-theprompt">Changing the prompt</h3>

<p>To generate a different chart we simply run the code again but with a different prompt. For example:</p>

<p><em>“Using the csv file attached, display a graph of ‘Year’ against all other columns”</em></p>

<p>The result is the image below.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*01lkKzIVhodN9hZopnTWVA.png" alt="" /></p>

<p>Or, if we are only interested in the data for this century:</p>

<p><em>“Using the csv file attached, display a graph of ‘Year’ against all other columns. Only chart the figures for the 21st century”</em></p>

<p>This elicits the response below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">assistant</span> <span class="o">&gt;</span> <span class="n">code_interpreter</span>  

<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>  

<span class="c1"># Load the CSV file  
</span><span class="n">file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/mnt/data/file-8XwqMOlaH6hoKEEKOYXPYqTh</span><span class="sh">'</span>  
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>  

<span class="c1"># Display the first few rows of the dataframe to understand its structure  
</span><span class="n">data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>  

<span class="c1"># Filter the data to include only the 21st century (from year 2000 onwards)  
</span><span class="n">data_21st_century</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">2000</span><span class="p">]</span>  

<span class="c1"># Define the columns to be plotted against 'Year'  
</span><span class="n">columns_to_plot</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">Entity</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Code</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">])</span>  

<span class="c1"># Plot the data  
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>  
<span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">columns_to_plot</span><span class="p">:</span>  
    <span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">data_21st_century</span><span class="p">[</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">],</span> <span class="n">data_21st_century</span><span class="p">[</span><span class="n">column</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="n">column</span><span class="p">)</span>  

<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Yearly Data in the 21st Century</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Year</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Values</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Metrics</span><span class="sh">'</span><span class="p">,</span> <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">1.05</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper left</span><span class="sh">'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>  

<span class="c1"># Save the plot to a file  
</span><span class="n">plot_file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/mnt/data/my-image3.png</span><span class="sh">'</span>  
<span class="n">plt</span><span class="p">.</span><span class="nf">savefig</span><span class="p">(</span><span class="n">plot_file_path</span><span class="p">)</span>  

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>  

<span class="n">plot_file_path</span>  

<span class="n">output</span> <span class="o">&gt;</span>  

<span class="n">assistant</span> <span class="o">&gt;</span> <span class="n">The</span> <span class="n">graph</span> <span class="n">has</span> <span class="n">been</span> <span class="n">created</span> <span class="ow">and</span> <span class="n">saved</span> <span class="n">successfully</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span> <span class="n">download</span> <span class="n">the</span> <span class="nb">file</span> <span class="n">using</span> <span class="n">the</span> <span class="n">link</span> <span class="n">below</span><span class="p">:</span>  

<span class="p">[</span><span class="n">Download</span> <span class="n">the</span> <span class="n">graph</span><span class="p">](</span><span class="n">sandbox</span><span class="p">:</span><span class="o">/</span><span class="n">mnt</span><span class="o">/</span><span class="n">data</span><span class="o">/</span><span class="n">my</span><span class="o">-</span><span class="n">image3</span><span class="p">.</span><span class="n">png</span><span class="p">)</span><span class="bp">None</span>
</code></pre></div></div>

<p>From this, we can see how the code interpreter has filtered the data to produce the required chart, which you can see below.</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*7pwpLDCLSGAg08Qlpeg2zA.png" alt="" /></p>

<h3 id="conclusion-and-towards-anapp">Conclusion and towards an app</h3>

<p>Using OpenAI’s Assistants API along with the Code Interpreter allows us to generate code that will prompt GPT to create charts directly from a data file using plain English.</p>

<p>The code is not particularly tricky and while the Jupyter Notebook code is for demonstration purposes only, I hope that you can see how this could be easily transformed into an app that asks the user to upload a data file, enter a prompt that describes the chart required and then enables the user to download the chart as an image file.</p>

<h4 id="update-a-prototype-app">Update: A prototype app</h4>

<p>You will find a prototype Streamlit app based on the code in the GitHub repo (see below) in a folder called ‘streamlit’. To use the app, you must supply your API key and put it in a Streamlit secrets file.</p>

<p>The app uses the Streamlit file upload control to upload a CSV file to work with and a prompt can be entered in an input box. While the prompt is running a status string is displayed. If the LLM cannot understand your prompt or there is any other error then a simple error message is displayed.</p>

<p>A modified version of the Jupyter Notebook above is coded as a class in a local library package and the Streamlit app calls the methods in it. There are a couple of simple data files, too. Feel free to download and modify it and run it for your own purposes <strong>but you must <em>first</em> read the README.md file in the ‘streamlit’ folder</strong>!</p>

<hr />

<p>Thanks for reading. You can find the code and data in a GitHub repo <a href="https://github.com/alanjones2/assistantscharts2">here</a>. Feel free to download, clone or fork it. To see more articles you can follow me on <a href="https://medium.com/@alan-jones/subscribe">Medium</a> or subscribe to my free, occasional, <a href="http://technofile.substack.com">newsletter</a>. Articles are also listed on my <a href="http://alanjones2.github.io">webpage</a>.</p>

<p><em>All images and screenshots are by me, the author unless otherwise noted.</em></p>

<p><em>All code is covered by the MIT license (see the repo) and, while not necessary, attribution is always appreciated.</em></p>]]></content><author><name></name></author><summary type="html"><![CDATA[We explore the Code Completion tool from OpenAI’s Assistants API to create visualizations directly from data]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn-images-1.medium.com/max/1200/1*BhucSzDp94gE2iZLAgrW4g.png" /><media:content medium="image" url="https://cdn-images-1.medium.com/max/1200/1*BhucSzDp94gE2iZLAgrW4g.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to Build a ReAct AI Agent with Claude 3.5 and Python</title><link href="http://localhost:4000/2024/08/01/How-to-build-a-ReAct-agent-with-claude.html" rel="alternate" type="text/html" title="How to Build a ReAct AI Agent with Claude 3.5 and Python" /><published>2024-08-01T00:00:00+02:00</published><updated>2024-08-01T00:00:00+02:00</updated><id>http://localhost:4000/2024/08/01/How-to-build-a-ReAct-agent-with-claude</id><content type="html" xml:base="http://localhost:4000/2024/08/01/How-to-build-a-ReAct-agent-with-claude.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We present a Reason+Act agent that iteratively reasons and gathers information from external tools before providing an answer.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*0cpvsatUj9HPm6H3IJNmTw.png" /><media:content medium="image" url="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*0cpvsatUj9HPm6H3IJNmTw.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Streamlit Supports 5 Important Data Visualization Libraries - Which to Choose?</title><link href="http://localhost:4000/2024/05/16/streamlit-five-varieties.html" rel="alternate" type="text/html" title="Streamlit Supports 5 Important Data Visualization Libraries - Which to Choose?" /><published>2024-05-16T00:00:00+02:00</published><updated>2024-05-16T00:00:00+02:00</updated><id>http://localhost:4000/2024/05/16/streamlit-five-varieties</id><content type="html" xml:base="http://localhost:4000/2024/05/16/streamlit-five-varieties.html"><![CDATA[<p><img src="/assets/images/streamlit5varieties/rowcharts.png" alt="" />
Imagine your organisation has decided to use Streamlit as its primary platform for showcasing data visualization applications and, to ensure a consistent look, it wants to adopt a single graphing library to be used across all applications. And, let’s say, your job is to investigate which is most appropriate.</p>

<p>You are spoiled for choice! There are 5 libraries you can use for coding your data visualizations: Altair, Bokeh, Plotly, Pyplot (Matplotlib) and Vega Lite. And Streamlit provides some native charts, as well.</p>

<p>Let’s take a look at each one and code up some commonly used charts.</p>

<p>The data that we will use is a set of price data for a pair of cryptocurrencies and from that data we will create a line chart showing the change in closing prices over a year for both currencies, a grouped bar chart showing the same data, again, for both currencies and a scatter chart with a trendline showing the correlation between the change in value of the two currencies.</p>

<p>The charts will look similar to the ones in the image above.</p>

<h3 id="the-data">The data</h3>

<p>The dataset is a simple three-column table. It tracks the closing prices of two cryptocurrencies over a 12-month period. It is not important for the exercise but the currencies are Ethereum and Bitcoin and the period is the previous 12 months from the time of writing. (The data are a matter of public record and are available from several sources. I retrieved them from <a href="[Crypto Real Time Prices &amp; Latest News - Yahoo Finance](https://finance.yahoo.com/crypto/)">Yahoo Finance</a>.)</p>

<p>Below is a screenshot of the data that we will use.</p>

<p><img src="/assets/images/streamlit5varieties/crypto-data.png" alt="" /></p>

<p>This representation of the data is <em>wide format</em> with each observation (the closing price) in its own column. For this article, this data is assumed to be in the file <em>crypto-23.csv</em> . This wide format shows the different observations (here, the closing prices) in seperate columns (headed ETH and BTC) and is entirely suitable for human readers. However, some data visualization packages require the data to be presented in <em>long</em> format where the observations are in a single column and seperate column contains a label for the observation.</p>

<p>If the data is in the form af a Pandas dataframe (which it is!), we can create a new dataframe in long format using the Pandas <code class="language-plaintext highlighter-rouge">melt()</code>function in the following Python code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cryptoL</span> <span class="o">=</span> <span class="n">cryptoW</span><span class="p">.</span><span class="nf">melt</span><span class="p">(</span><span class="n">value_vars</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span>
          <span class="n">var_name</span><span class="o">=</span><span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">,</span>
          <span class="n">id_vars</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<p>You can look up <code class="language-plaintext highlighter-rouge">melt</code>in the <a href="https://pandas.pydata.org/docs/reference/api/pandas.melt.html">Pandas documentation</a> but basically this code creates a column called <em>value</em> which contains the values from the original columns <em>ETH</em> and <em>BTC</em>. The <em>Month</em> column remains a single column but it is expanded lengthwise to match <em>value</em> and the numbers of the months are repeated as required. A new column <em>Name</em> is created that will contain the value <em>ETH</em> or <em>BTC</em> and labels the <em>value</em> in the same row. The result can be seen in the image below.</p>

<p><img src="/assets/images/streamlit5varieties/crypto-data-long.png" alt="" /></p>

<h3 id="the-charts">The charts</h3>

<p>More specifically the charts that we want to create are:</p>

<p><em>Line chart</em>: The line chart should track both currencies over the period and show two seperate lines of different colours, one for each currency.</p>

<p><em>Bar chart</em>: the bar chart should be a grouped bar chart that tracks the two currencies over the period. The bars should be vertical and grouped such that the pair of currencies are shown next to each other in each month. The bar for each currency should be coloured differently.</p>

<p><em>Scatter chart</em>: The scatter chart should show the relationship between the closing prices of each currency and in addition show include a trendline to indicate the linearity (or otherwise) of that relationship.</p>

<p>Additionally, all charts should have a title and appropriate labels on the x and y axes.</p>

<h3 id="the-options">The options</h3>

<p>First, let’s do a quick review of the options so we can eliminate any obvious non-starters.</p>

<p><strong>Streamlit charts</strong></p>

<p>The first thing we should look at is the set of built-in functions that Streamlit provides. They will draw simple line charts, bar charts and scatter plots. And, as the documentation states, these are simply wrappers around the Altair equivalents. The documentation also suggests that if these simple charts don’t work for you, you should use the Altair charts, instead.</p>

<p>A quick look at the documentation will confirm that these charts cannot produce any of the three charts in this exercise as they cannot display more than one trace per chart. We won’t explore these any further.</p>

<p><strong>Vega-Lite</strong></p>

<p>Vega-Lite is a powerful graphing language that specifies charts in a JSON format [1]. Writing a Vega-Lite specification can be an arduous and error-prone task which is why Altair was developed. Altair is a Python library that outputs Vega-Lite specs, so If you already have Vega-Lite specifications to hand then the Vega-Lite library is the obvious one to use. But to create a chart from scratch it has to be better to use the Altair library which is a Python-friendly way of producing the same thing. We won’t explore Vega-Lite any further, either.</p>

<p><strong>The rest</strong></p>

<p>The remaining libraries are all powerful and Python-friendly ways of producing sophisticated charts and these we will explore further. But we’ll look at one of the libraries in two ways.</p>

<p>Streamlit’s <code class="language-plaintext highlighter-rouge">st.pyplot()</code>function is a way of displaying Matplotlib figures but, of course, there are other plotting libraries that are built on Matplotlib: Seaborn, Plotnine and Pandas Plots, for example. To show how we can use these we will include a version of the graphs created with Pandas Plots in addition to those created directly in Matplotlib.</p>

<p>So, we will create the three graphs in each of Altair, Bokeh, Matplotlib, Pandas Plots and Plotly.</p>

<h3 id="altair">Altair</h3>

<p>Altair[3] is a graphing library based on the concept of the Grammar of Graphics [2]. Instead of implementing specific chart types, with Altair you start with the data and then decide how that data should be mapped onto the various aspects of a graphical representation. (For a more detailed look at Altair, please see my article <a href="https://medium.com/towards-data-science/altair-and-the-powerful-vega-lite-grammar-of-graphics-d1d864c3e08e">Mastering Data Visualizaton with Altair’s Grammar of Graphics</a>.)</p>

<p>To implement the three graphs we first need to included the libraries and import the data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">altair</span> <span class="k">as</span> <span class="n">alt</span>

<span class="n">cryptoW</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">crypto-23.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">cryptoL</span> <span class="o">=</span> <span class="n">cryptoW</span><span class="p">.</span><span class="nf">melt</span><span class="p">(</span><span class="n">value_vars</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span>
          <span class="n">var_name</span><span class="o">=</span><span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">,</span><span class="n">id_vars</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<p>We import the Streamlit package, of course, along with Pandas and Altair. The data is in a <em>CSV</em> file and, as you can see we import the <em>wide</em> version in <code class="language-plaintext highlighter-rouge">cryptoW</code>,  and then create a <em>long</em> version of the data in the variable <code class="language-plaintext highlighter-rouge">cryptoL</code>.</p>

<p>To create any Altair chart we start with the code <code class="language-plaintext highlighter-rouge">alt.Chart()</code>, pass it the data and then map the data onto the various parts of the chart. The code for the line chart follows.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">alt</span><span class="p">.</span><span class="nc">Chart</span><span class="p">(</span><span class="n">cryptoL</span><span class="p">,</span> 
                <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span> 
                <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Cryptocurrency closing prices</span><span class="sh">'</span>
                <span class="p">).</span><span class="nf">mark_line</span><span class="p">().</span><span class="nf">encode</span><span class="p">(</span>
                    <span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Month:O</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">y</span> <span class="o">=</span> <span class="sh">'</span><span class="s">value:Q</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Name:N</span><span class="sh">'</span><span class="p">)</span>

<span class="n">st</span><span class="p">.</span><span class="nf">altair_chart</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>We specify the dataframe that we are going to use as a parameter (there are other parameters that we could include, here we set the title and width). The <code class="language-plaintext highlighter-rouge">mark_line()</code> method specifies that we want the data represented as a line and the encodings that follow determine the way the data is mapped onto the chart: the month is on the <code class="language-plaintext highlighter-rouge">x</code> axis, the value on the <code class="language-plaintext highlighter-rouge">y</code>axis and the <code class="language-plaintext highlighter-rouge">color</code>is specified by the name of the currency. Note that the codes appended to the names of the data fields are Altair types, <code class="language-plaintext highlighter-rouge">O</code>is ordinal, <code class="language-plaintext highlighter-rouge">Q</code>is qualitative and <code class="language-plaintext highlighter-rouge">N</code>is nominal.</p>

<p>The resulting graph is shown below. (In this rendition, the text is not very easy to see but the title, x and y label and the legend are perfectly visible in the Streamlit app).</p>

<p><img src="/assets/images/streamlit5varieties/alt-line.png" alt="" /></p>

<p>So, tick! That’s our first graph completed. Let’s do the other two.</p>

<p>The grouped bar chart code is very similar. This time we use the method <code class="language-plaintext highlighter-rouge">mark_bar</code>. Without any modification this will gives is a stacked bar chart but by specifying an x offset, we can shift the bars sideways and thereby produce a grouped chart.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">alt</span><span class="p">.</span><span class="nc">Chart</span><span class="p">(</span><span class="n">cryptoL</span><span class="p">,</span> 
                <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
                <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Cryptocurrency closing prices</span><span class="sh">'</span>
                <span class="p">).</span><span class="nf">mark_bar</span><span class="p">().</span><span class="nf">encode</span><span class="p">(</span>
                    <span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Month:O</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">y</span> <span class="o">=</span> <span class="sh">'</span><span class="s">value:Q</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Name:N</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">xOffset</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Name:N</span><span class="sh">'</span><span class="p">)</span>

<span class="n">st</span><span class="p">.</span><span class="nf">altair_chart</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>You can see the result below (the earlier comment applies to the text here, too).</p>

<p><img src="/assets/images/streamlit5varieties/alt-bar.png" alt="" /></p>

<p>The scatter chart is slightly more complicated because we want to include a trendline</p>

<p>The code below is very similar to the other charts but here we use the wide form of the data and the method <code class="language-plaintext highlighter-rouge">mark_point()</code>. The x and y data are the two currencies.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">alt</span><span class="p">.</span><span class="nc">Chart</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">,</span> 
                <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
                <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Cryptocurrency closing prices</span><span class="sh">'</span>
                <span class="p">).</span><span class="nf">mark_point</span><span class="p">().</span><span class="nf">encode</span><span class="p">(</span>
                    <span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span>
                    <span class="n">y</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>As it stands that code would be sufficient to draw a scatter chart. To add the trendline we need to do a little more work.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">trend</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">transform_regression</span><span class="p">(</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">).</span><span class="nf">mark_line</span><span class="p">()</span>
</code></pre></div></div>

<p>Altair has built-in transform functions and here we use the function <code class="language-plaintext highlighter-rouge">transform_regression()</code>to create a line chart of <code class="language-plaintext highlighter-rouge">ETH</code>versus <code class="language-plaintext highlighter-rouge">BTC</code>.</p>

<p>To combine the two charts we simply ‘add’ them together.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st</span><span class="p">.</span><span class="nf">altair_chart</span><span class="p">(</span><span class="n">fig</span> <span class="o">+</span> <span class="n">trend</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">+</code> operator combines the two graphs placing one on top of the other resulting in the following chart.</p>

<p><img src="/assets/images/streamlit5varieties/alt-scatter1.png" alt="" /></p>

<p>That is correct but not ideal. It would be better if we could ignore the left side of the chart that is blank. We can fix this with the longer version shown below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">alt</span><span class="p">.</span><span class="nc">Chart</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">,</span> 
                <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">,</span>
                <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Cryptocurrency closing prices</span><span class="sh">'</span>
                <span class="p">).</span><span class="nf">mark_point</span><span class="p">().</span><span class="nf">encode</span><span class="p">(</span>
                    <span class="n">x</span> <span class="o">=</span> <span class="n">alt</span><span class="p">.</span><span class="nc">X</span><span class="p">(</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span><span class="n">scale</span><span class="o">=</span><span class="n">alt</span><span class="p">.</span><span class="nc">Scale</span><span class="p">(</span><span class="n">domain</span><span class="o">=</span><span class="p">[</span><span class="mi">20000</span><span class="p">,</span> <span class="mi">70000</span><span class="p">])),</span>
                    <span class="n">y</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">)</span>

<span class="n">trend</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="nf">transform_regression</span><span class="p">(</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">).</span><span class="nf">mark_line</span><span class="p">()</span>

<span class="n">st</span><span class="p">.</span><span class="nf">altair_chart</span><span class="p">(</span><span class="n">fig</span> <span class="o">+</span> <span class="n">trend</span><span class="p">)</span>
</code></pre></div></div>

<p>This is fundamentally the same chart but we have specified the x axis in a different way (using the <code class="language-plaintext highlighter-rouge">alt.X()</code> function). By doing this we can pass values for the scale and here we specify that the x scale should begin at 20000 and end at 70000. This code gives us a better rendition.</p>

<p><img src="/assets/images/streamlit5varieties/alt-scatter2.png" alt="" /></p>

<p>We have completed the first task. Altair has givens us perfectly good charts with not too much effort.</p>

<h3 id="bokeh">Bokeh</h3>

<p>The Bokeh library has a similar feel to Altair in that it starts with  a figure object and builds the chart chat that. But the figure specifies mostly decorative elements of the chart. The graphical elements are built on top as attributes to the figure object.</p>

<p>Here’s the initial code that imports the library and the data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="n">bokeh.plotting</span> <span class="kn">import</span> <span class="n">figure</span>

<span class="n">cryptoW</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">crypto-23.csv</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Now we add a figure with some textual attributes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="nf">figure</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Line chart ETH and BTC prices</span><span class="sh">"</span><span class="p">,</span> 
          <span class="n">x_axis_label</span><span class="o">=</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span> 
          <span class="n">y_axis_label</span><span class="o">=</span><span class="sh">"</span><span class="s">Value (USD)</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>To this initial figure we can add graphical elements such as lines. The next piece of code adds line graphs for the two currencies.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span><span class="p">.</span><span class="nf">line</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">],</span> 
    <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span> 
    <span class="n">legend_label</span><span class="o">=</span><span class="sh">"</span><span class="s">BTC</span><span class="sh">"</span><span class="p">,</span> 
    <span class="n">color</span> <span class="o">=</span> <span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">line_width</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="nf">line</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">],</span> 
    <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">],</span> 
    <span class="n">legend_label</span><span class="o">=</span><span class="sh">"</span><span class="s">ETH</span><span class="sh">"</span><span class="p">,</span> 
    <span class="n">color</span> <span class="o">=</span> <span class="sh">"</span><span class="s">green</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">line_width</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">legend</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="sh">"</span><span class="s">top_left</span><span class="sh">"</span>

<span class="n">st</span><span class="p">.</span><span class="nf">bokeh_chart</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p>As you can see the <code class="language-plaintext highlighter-rouge">line()</code>function is invoked twice, once for each of the currencies (with appropriate labels, colours and line width) and we (optionally) change the default position of the legend to the top left so that it doesn’t obscure the lines in the graph.</p>

<p>Below we can see the resulting graph.</p>

<p><img src="/assets/images/streamlit5varieties/bokeh_line.png" alt="" /></p>

<p>The result is, of course, similar to the Altair version but with a different style.</p>

<p>The grouped bar chart is very similar but uses the <code class="language-plaintext highlighter-rouge">vbar()</code>function to plot the data, and like the Altair version would default to a stacked bar. With Bokeh we can use <code class="language-plaintext highlighter-rouge">dodge()</code>as a parameter which shifts the bars horizontally. First, we set a width for the bars (a full bar would have a width of 1 but since there are two bars they should be a maximum of 0.5 each. Here we set them to 0.4 so there is a gap between them). We then we use the width divided by 2 to set the offset for each bar.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">bokeh.transform</span> <span class="kn">import</span> <span class="n">dodge</span>
<span class="n">p</span> <span class="o">=</span> <span class="nf">figure</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Grouped bar</span><span class="sh">"</span><span class="p">,</span> 
          <span class="n">x_axis_label</span><span class="o">=</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span> 
          <span class="n">y_axis_label</span><span class="o">=</span><span class="sh">"</span><span class="s">Value (USD)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">width</span> <span class="o">=</span> <span class="mf">0.4</span>

<span class="n">p</span><span class="p">.</span><span class="nf">vbar</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nf">dodge</span><span class="p">(</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> 
    <span class="n">legend_label</span><span class="o">=</span><span class="sh">"</span><span class="s">BTC</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">top</span><span class="o">=</span><span class="sh">"</span><span class="s">BTC</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">,</span>
    <span class="n">source</span><span class="o">=</span><span class="n">cryptoW</span><span class="p">,</span>
    <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="nf">vbar</span><span class="p">(</span>
    <span class="n">x</span><span class="o">=</span><span class="nf">dodge</span><span class="p">(</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span><span class="o">-</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> 
    <span class="n">legend_label</span><span class="o">=</span><span class="sh">"</span><span class="s">ETH</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">top</span><span class="o">=</span><span class="sh">"</span><span class="s">ETH</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">,</span>
    <span class="n">source</span><span class="o">=</span><span class="n">cryptoW</span><span class="p">,</span>
    <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">legend</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="sh">"</span><span class="s">top_left</span><span class="sh">"</span>
<span class="n">st</span><span class="p">.</span><span class="nf">bokeh_chart</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p>The chart is show below.</p>

<p><img src="/assets/images/streamlit5varieties/bokeh_bar.png" alt="" /></p>

<p>Finally, we need to draw the scatter plot. We start by defining the figure as before and then creating a simple scatter plot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="nf">figure</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">Scatter chart BTC/ETH</span><span class="sh">"</span><span class="p">,</span> 
          <span class="n">x_axis_label</span><span class="o">=</span><span class="sh">"</span><span class="s">BTC</span><span class="sh">"</span><span class="p">,</span> 
          <span class="n">y_axis_label</span><span class="o">=</span><span class="sh">"</span><span class="s">ETH</span><span class="sh">"</span><span class="p">,</span>
          <span class="n">width</span><span class="o">=</span><span class="mi">800</span><span class="p">)</span>

<span class="n">p</span><span class="p">.</span><span class="nf">circle</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span> <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">],</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> 
</code></pre></div></div>

<p>We set the point size in the scatter plot to 0.8 which is appropriate for this chart. And then we create a line chart which is the trendline. We create the trendline using Numpy to determine the cooefficients for a first level regression plot and then create a new column in the dataframe from that.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add trend line to scatter plot
</span><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="c1"># Calculate regression params
</span><span class="n">m</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">polyfit</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">.</span><span class="n">BTC</span><span class="p">,</span> <span class="n">cryptoW</span><span class="p">.</span><span class="n">ETH</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1"># Add a trendline to the dataframe
</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">"</span><span class="s">trendline</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span>  <span class="n">y</span> <span class="ow">in</span>  <span class="n">m</span><span class="o">*</span><span class="n">cryptoW</span><span class="p">.</span><span class="n">BTC</span> <span class="o">+</span> <span class="n">b</span><span class="p">]</span>

<span class="n">p</span><span class="p">.</span><span class="nf">line</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span> 
      <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">trendline</span><span class="sh">'</span><span class="p">],</span>  
      <span class="n">color</span> <span class="o">=</span> <span class="sh">"</span><span class="s">green</span><span class="sh">"</span><span class="p">,</span>
       <span class="n">line_width</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="n">st</span><span class="p">.</span><span class="nf">bokeh_chart</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p>When this line is added to the chart we get the following figure.</p>

<p><img src="/assets/images/streamlit5varieties/bokeh_scatter.png" alt="" /></p>

<p>Again, a perfectly adequate chart.</p>

<h3 id="matplotlib">Matplotlib</h3>

<p>Like many libraries, Matplotlib gives us a set of basic chart types to choose from and then provides a set of functions that can modify that chart.</p>

<p>Matplotlib requires you to engage with your charts at a fairly low level but in doing this gives you a lot of control over the result.</p>

<p>For Matplotlib we will use only the wide format data. Here’s the intial code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">cryptoW</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">crypto-23.csv</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>And let’s see the code for the line chart.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">],</span> <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">],</span> <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Closing value (USD)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">BTC/ETH performance</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">])</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>We first define a Matplotlib plot in the first line of code. This gives us two variables that will contain the final figure and the axes that are elements of that figure.</p>

<p>I hope you can see that using Matplotlib we simply build a plot with a series of statements. First, we create the line plots for the two currencies (the Matplotlib functio <code class="language-plaintext highlighter-rouge">plot()</code>creates a line plot for the x and y data provided).</p>

<p>And following that, we specifiy the textual properties of the plot and the legend.</p>

<p>The line plot is shown below.</p>

<p><img src="/assets/images/streamlit5varieties/plt-line.png" alt="" /></p>

<p>The bar chart is very similar. In the code below we specify the width of a bar and set the individual to that width but shifting it horizontally by adding or subtracting half of the column width. This gives us the grouped chart that we want and is a similar technique to the ones we’ve seen earlier.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">width</span> <span class="o">=</span> <span class="mf">0.45</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">]</span><span class="o">-</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span> <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">]</span><span class="o">+</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">],</span> <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Closing value (USD)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">BTC/ETH performance</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">])</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>The result can be seen below.</p>

<p><img src="/assets/images/streamlit5varieties/plt-bar.png" alt="" /></p>

<p>A next, of course, the scatter diagram.</p>

<p>Again the code is similar to create the initial scatter plot. After that, we determine the cooeficients for a regression line with Numpy (as above) and create a trendline column in the dataframe. A line plot is created from that trendline and added to the figure.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span> <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">BTC</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">ETH</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">BTC/ETH correlation</span><span class="sh">"</span><span class="p">)</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">m</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">polyfit</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">.</span><span class="n">BTC</span><span class="p">,</span> <span class="n">cryptoW</span><span class="p">.</span><span class="n">ETH</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1"># Add a trendline to the dataframe
</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">"</span><span class="s">trendline</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span>  <span class="n">y</span> <span class="ow">in</span>  <span class="n">m</span><span class="o">*</span><span class="n">cryptoW</span><span class="p">.</span><span class="n">BTC</span> <span class="o">+</span> <span class="n">b</span><span class="p">]</span>
<span class="n">st</span><span class="p">.</span><span class="nf">table</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span> <span class="n">cryptoW</span><span class="p">[</span><span class="sh">'</span><span class="s">trendline</span><span class="sh">'</span><span class="p">])</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">BTC</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">ETH</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">BTC/ETH correlation</span><span class="sh">"</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>The resulting figure is shown below.</p>

<p><img src="/assets/images/streamlit5varieties/plt-scatter.png" alt="" /></p>

<p>Matplotlib is a fairly low level charting package and other, higher level, packages have been created on top of this library and we will look at one of these next.</p>

<h3 id="pandas-plots">Pandas Plots</h3>

<p>Pandas incorporates plotting functions and it is simply a matter of using the appropriate method on a dataframe to create a chart.</p>

<p>The initial code is the same as Matplotlib because we are using exactly the same packages.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">cryptoW</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">crypto-23.csv</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>And we also need to define the <code class="language-plaintext highlighter-rouge">fig</code>and <code class="language-plaintext highlighter-rouge">ax</code>variables in the same way as we did with Mathplotlib. Below is the code to produce a line chart for just the ETH prices.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ETH line chart
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">cryptoW</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">ETH values</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>You can see that we call a method on the dataframe itself <code class="language-plaintext highlighter-rouge">plot()</code>, this will produce a line chart from the parameters given. Note that it is important that we refer to the <code class="language-plaintext highlighter-rouge">ax</code> variable in the call - this effectively adds the new line plot to the figure that we defined at the beginning.</p>

<p>With Pandas Plots we can specify any number of <code class="language-plaintext highlighter-rouge">y</code>variables by passing a list as a parameter. So, to plot a line chart for both ETH and BTC the code is almost identical.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">cryptoW</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">],</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">,</span>
             <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">BTC and ETH values</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>This code is a little shorter than the Matplotlib code as Pandas makes assumptions about the names of the axes - it takes them from the column name by default although you can change this if you wish. The line chart is shown below.</p>

<p><img src="/assets/images/streamlit5varieties/pyplot-line.png" alt="" /></p>

<p>The grouped bar code is almost identical except for the name of the method to be called; here it is <code class="language-plaintext highlighter-rouge">plot.bar()</code>rather than simply <code class="language-plaintext highlighter-rouge">plot()</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">cryptoW</span><span class="p">.</span><span class="n">plot</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">],</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">,</span> 
                 <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">BTC and ETH values</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>We don’t need to mess around with the positioning of the bars in order to create a grouped set of bars, Pandas defaults to creating a grouped representation when given a list of <code class="language-plaintext highlighter-rouge">y</code>values.</p>

<p><img src="/assets/images/streamlit5varieties/pyplot-bar.png" alt="" /></p>

<p>To create a simple scatter plot we use the method <code class="language-plaintext highlighter-rouge">plot.scatter()</code>and otherwise the code is very similar to the other charts. However, to add the trendline we need to create a separate plot.</p>

<p>Below is the code to create the basic scatter plot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">()</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">cryptoW</span><span class="p">.</span><span class="n">plot</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span> 
                          <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">BTC and ETH values</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>As you see it is again very similar to the preceding code. To add the trendline we create a new column in the dataframe as we did previously.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">polyfit</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">.</span><span class="n">BTC</span><span class="p">,</span> <span class="n">cryptoW</span><span class="p">.</span><span class="n">ETH</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1"># Add a trendline to the dataframe
</span><span class="n">cryptoW</span><span class="p">[</span><span class="sh">"</span><span class="s">trendline</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">y</span> <span class="k">for</span>  <span class="n">y</span> <span class="ow">in</span>  <span class="n">m</span><span class="o">*</span><span class="n">cryptoW</span><span class="p">.</span><span class="n">BTC</span> <span class="o">+</span> <span class="n">b</span><span class="p">]</span>
</code></pre></div></div>

<p>Now we can plot a line form this new column and by including the existing axis <code class="language-plaintext highlighter-rouge">ax</code>, we add this new plot line to the existing figure.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cryptoW</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="sh">'</span><span class="s">trendline</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>And when we plot the figure we get the scatter plot with the trendline as we see below.</p>

<p><img src="/assets/images/streamlit5varieties/pyplot-scatter.png" alt="" /></p>

<p>Pandas plots gives you all of the flexibility of Matplotlib as you can still use the Matplotlib library to modify the figure using the <code class="language-plaintext highlighter-rouge">plt.*</code>methods but the syntax for plotting is a little cleaner when using a Pandas dataframe as the source of the plotting data.</p>

<h3 id="plotly">Plotly</h3>

<p>Plotly has both high level and low level functions - Plotly Express is the recommended library as it incorporates a large number of standard charts, whereas lower level functions are provided by the Plotly Graphic Objects (GO) part of the package. Plotly, themselves, suggest that you use Plotly Express, which is built upon Plotly GO, and that is what we will do.</p>

<p>Plotly is generally better used with long format data, so our initial code includes the generation of this form of the data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>

<span class="n">cryptoW</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">crypto-23.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">cryptoL</span> <span class="o">=</span> <span class="n">cryptoW</span><span class="p">.</span><span class="nf">melt</span><span class="p">(</span><span class="n">value_vars</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">ETH</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">BTC</span><span class="sh">'</span><span class="p">],</span>
                       <span class="n">var_name</span><span class="o">=</span><span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">,</span><span class="n">id_vars</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<p>Creating a line chart from the long data is achieved in a single line of code. Below we see that line and how it is plotted.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">line</span><span class="p">(</span><span class="n">cryptoL</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,</span> 
              <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">BTC and ETH values</span><span class="sh">'</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">plotly_chart</span><span class="p">(</span><span class="n">fig</span><span class="p">))</span>
</code></pre></div></div>

<p>By specifiying the <code class="language-plaintext highlighter-rouge">y</code>value to be the <code class="language-plaintext highlighter-rouge">value</code>column we tell the function which data to use for the line chart and by including the <code class="language-plaintext highlighter-rouge">color</code> parameter, we ensure that we have seperate coloured lines (in this case one for each name). We set the name of the figure as a parameter - the axis labels are taken care of automatically.</p>

<p><img src="/assets/images/streamlit5varieties/plotly-line.png" alt="" /></p>

<p>The bar graph is equally easy and follows the same pattern. The default bar chart is a stacked one but we simply set the <code class="language-plaintext highlighter-rouge">barmode</code> parameter to <code class="language-plaintext highlighter-rouge">'group'</code>to get the grouped representation.</p>

<p>Again we create the figure in a single line of code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">cryptoL</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">Name</span><span class="sh">"</span><span class="p">,</span> 
             <span class="n">barmode</span><span class="o">=</span><span class="sh">'</span><span class="s">group</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">BTC and ETH values</span><span class="sh">'</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">plotly_chart</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>And the resulting figure is shown below.</p>

<p><img src="/assets/images/streamlit5varieties/plotly-bar.png" alt="" /></p>

<p>When is comes to the scatter chart, Plotly provides built in trendline functionality. This require the inclusion of the <em>statsmodels</em> library which, while not imported, must be installed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">cryptoW</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">ETH</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">BTC</span><span class="sh">"</span><span class="p">,</span> 
                 <span class="n">trendline</span><span class="o">=</span><span class="sh">"</span><span class="s">ols</span><span class="sh">"</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">ETH/BTC values</span><span class="sh">'</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="nf">plotly_chart</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p>In the code above we see the familiar pattern of a Plotly plot - and additional parameter <code class="language-plaintext highlighter-rouge">trendline</code>  will ensure that the regression line is calculated and drawn with no effort on the programmer’s part.</p>

<p><img src="/assets/images/streamlit5varieties/plotly-scatter.png" alt="" /></p>

<p>That completes the set of charts for Plotly and for the whole exercise.</p>

<h3 id="so-where-does-that-leave-us">So, where does that leave us</h3>

<p>In terms of what the charts shows us, the line and bar charts illustrate the prices for these cryptocurrencies being pretty volatile and the scatter charts confirm what we can also see in the other charts that the two currencies tend to go up and down together - general sentiment about cryptocurrencies probably affects the value of most, if not all, of them.</p>

<p>But what about the libraries.</p>

<p>All of the libraries do a reasonable job although you might find some charts more attractive than others - the Matplotlib charts look a little more clunky than the others, for example (although this may mainly to do with the large font which can be easily changed with a little extra code, for example, <code class="language-plaintext highlighter-rouge">matplotlib.rcParams['font.size'] = 8</code> will reduce the size of all off the text in a figure and this being a global setting will affect all plots that are created after it is executed).</p>

<p>With a little effort you can customize any of the charts that we’ve looked at either by adjusting particular aspcts of a plot such as the height and width, or by adopting a different style sheet.</p>

<p>What is important ot the programmer, of course, is the ease with which you can code these figures. It’s fair to say that the library that has the most compact code is Plotly Express, followed closely by Pandas Plots. With Altair, Bokeh and Matplotlib you need to do a little more work though working with any of the packages is fairly straightforward.</p>

<p>Another thing that might  sway your decision is the philosophy behind the libraries.</p>

<p>Altair uses a Grammar of Graphics approach where you decide what you want to do with the data, whereas the others tend to favour solutions to standard problems by including a fixed library of chart types.</p>

<p>Matplotlib makes you build your charts from the bottom up and has a whole bunch of methods for adjusting and customizing graphs. Pandas Plots simplifies the Matplotlib approach but maintains its flexibility -  Matplotlib parameters and functions work with Pandas charts, too.</p>

<p>Bokeh, again, provides a lot of flexibility with the downside that you need to write a little more code than in other libraries.</p>

<p>Plotly, last but not least, provides a large number of fixed chart types and they are each customizable. If compact code is important then Plotly is probably the winner in this respect.</p>

<p>The decision is yours (or your organisation’s). I could have simply stated my own preference at the beginning but the purpose of showing you the code is so you can judge for yourself.</p>

<hr />

<p>Thanks for reading and I hope this has been helpful. You can find all of the above code and data in the <a href="https://github.com/alanjones2/streamlit-chart-varieties/tree/main/code">GitHub repo</a>) for this article in the form of Streamlit programs. Feel free to download them for your reference.</p>

<p>To see more articles like this you can subscribe on <a href="https://medium.com/@alan-jones/subscribe">Medium</a>, subscribe to my free and occasional <a href="technofile.substack.com">newsletter</a> or visit my <a href="alanjones2.github.io">website</a>.</p>

<hr />

<h3 id="notes">Notes</h3>

<ol>
  <li>
    <p><a href="http://vis.csail.mit.edu/pubs/vega-lite">Vega-Lite: A Grammar of Interactive Graphics</a>, Arvind Satyanarayan, Dominik Moritz, Kanit Wongsuphasawat and Jeffrey Heer, <em>IEEE Transactions on Visualization &amp; Computer Graphics (Proc. IEEE InfoVis)</em>, 2017</p>
  </li>
  <li>
    <p>Leland Wilkinson’s seminal, The Grammar of Graphics (Statistics and Computing) 2nd Edition (2005), is listed on <a href="https://amzn.to/3HVR3mS">Amazon</a>. It’s not cheap!</p>
  </li>
  <li>
    <p><a href="https://joss.theoj.org/papers/10.21105/joss.01057">Altair: Interactive Statistical Visualizations for Python</a>, Jacob VanderPlas, et al. _Journal of Open Source Software, 3(32), 1057</p>
  </li>
</ol>

<p><em>Links to Amazon are affiliate links which means if you purchase something I may get a small commission but it will not affect the price you pay</em></p>

<p>All images and screenshots are by me, the author, unless otherwise noted.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[We code examples using Altair, Bokeh, Plotly, Pandas Plot and Matplotlib, to illustrate the pros and cons of each one]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/streamlit5varieties/rowcharts.png" /><media:content medium="image" url="http://localhost:4000/assets/images/streamlit5varieties/rowcharts.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Create an Interactive Web App with PyScript and Pandas</title><link href="http://localhost:4000/2024/01/01/Create-an-Interactive-Web-App-with-PyScript-and-Pandas.html" rel="alternate" type="text/html" title="Create an Interactive Web App with PyScript and Pandas" /><published>2024-01-01T00:00:00+01:00</published><updated>2024-01-01T00:00:00+01:00</updated><id>http://localhost:4000/2024/01/01/Create-an-Interactive-Web-App-with-PyScript-and-Pandas</id><content type="html" xml:base="http://localhost:4000/2024/01/01/Create-an-Interactive-Web-App-with-PyScript-and-Pandas.html"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[PyScript allows us to create a serverless web application with HTML and Python as the scripting language.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://raw.githubusercontent.com/alanjones2/Alan-Jones-article-code/master/pyscript/images/Screenshot2.png" /><media:content medium="image" url="https://raw.githubusercontent.com/alanjones2/Alan-Jones-article-code/master/pyscript/images/Screenshot2.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>